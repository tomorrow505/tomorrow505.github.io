<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>某东薅羊毛之——使用篇</title>
    <link href="/%E6%9F%90%E4%B8%9C%E8%96%85%E7%BE%8A%E6%AF%9B%E4%B9%8B%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%E7%AF%87/"/>
    <url>/%E6%9F%90%E4%B8%9C%E8%96%85%E7%BE%8A%E6%AF%9B%E4%B9%8B%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前在PT群里搭上了一位大佬薅羊毛的车，其实在很早之前也有一位PTER跟我提过可以用群晖docker挂脚本，当时蜗牛装的windows，三天两头宕机，就没管。上车之后也是等着京豆满了买一波东西，其他的也没怎么管。</p><p>直到最近为了折腾plex穿透又重新入了一个vps，恰巧自己最近学了下docker。哈哈，自己也顺手搞了一下子，京豆效果不咋好，经常脚本就失效了，每天有点收益，聊胜于无吧。后来发现其实脚本挂多了还有别的一些收益，比如红包、免费水果，等等，可是比较烦的是需要下载3个APP，然后每个APP都有红包，可能都有过期时限。所以为了更好地服务大家，后续可能会搞一个API接口出来查询个人信息。</p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><hr><p>脚本每天都会给绑定的微信或者TG之类的发一个统计，形式大致如下：</p><div class="hljs code-wrapper"><pre><code class="hljs json">📣=======账号=======📣账号名称：tomorrow505# 京豆部分，支付的时候直接抵现金，100京豆抵一块钱今日收入：330京豆 🐶                   # 今天累积的京豆收益昨日收入：480京豆 🐶                   # 昨天累积的京豆收益昨日支出：-400京豆 🐶                  # 昨天支持的京豆数量当前京豆：3087(今日将过期0)京豆🐶       # 账户现存的京豆数量# 京喜牧场，这个鸡蛋我也不知道怎么算的，但是后续可以说明一下京喜牧场的金蛋怎么用京喜牧场：44枚鸡蛋🥚# 这个也是可以抵无门槛红包的极速金币：51849金币(≈5.1849元💴)# 同样可以提现，入口稍后说明京东赚赚：17700金币(≈1.77元💴)# 跟极速金币差不多，也是无门槛红包京东秒杀：1566秒秒币(≈1.566元💴)# 东东农场的水果成熟以后，可以兑换水果，也能够抵扣的无门槛红包。# 分为四个等级，每个等级难度不一样，4级抵扣50，但是难度大，时间长。东东农场：20包湿巾,进度7.13%,14天后可兑🍉# 京喜工厂的东西基本上还是要花钱的，属于折扣商品，然后质量不做保证京喜工厂：当前未开始生产商品,请手动去京东APP-&gt;游戏与互动-&gt;查看更多-&gt;京喜工厂 开启活动# 这个可以做一下，可以领一些电子产品，还没有成功过~东东工厂：当前未选择商品(或未开启活动) , 请到京东APP=&gt;首页=&gt;京东电器=&gt;(底栏)东东工厂 选择商品!# 这个也可以做一下，可以领一些电子产品，还没有成功过~东东萌宠：手持便携式小风扇,勋章2/4块(16.9%)                     # 红包明细，每一个APP都不一样，我们就看前三个，对应每一个APP的红包↓↓↓↓↓红包明细↓↓↓↓↓当前总红包：7.53(今日总过期0.80)元 🧧京喜红包：6.96(今日将过期0.80)元 🧧极速红包：0.00(今日将过期0.00)元 🧧京东红包：0.57(今日将过期0.00)元 🧧健康红包：0.00(今日将过期0.00)元 🧧</code></pre></div><p><strong>使用图文教程</strong></p><ol><li><p>京豆篇-&gt;入口：京东APP-&gt;我的-&gt;京豆。</p><p>这个没什么好说的了，就是支付抵扣现金。获得的方式就是签到以及做一些任务，其中某些任务需要关注商店、添加购物车等等，如果觉得打扰应该可以不用挂了，因为脚本是绑在一块儿的。</p></li></ol><p><img src="https://www.z4a.net/images/2021/11/05/1364407194b682d63.png" alt="1364407194b682d63.png"></p><p>2、币种篇，入口不同APP分别介绍</p><ul><li>京东-&gt;秒杀-&gt;秒秒币兑换</li><li>极速-&gt;我的-&gt;金币-&gt;金币兑换</li><li>赚赚-&gt;微信-&gt;京东赚赚小程序</li></ul><p>截图示意：秒秒币兑换</p><p><img src="https://www.z4a.net/images/2021/11/05/245a4fef25a9170a5.png" alt="245a4fef25a9170a5.png"></p><p>截图示意：极速金币兑换</p><p><img src="https://www.z4a.net/images/2021/11/05/39aa3ae2480e05b1e.png" alt="39aa3ae2480e05b1e.png"></p><p>截图示意：赚赚兑换，大额的尝试兑换显示活动火爆，兑换了一个2元的，可以在京东中使用~~~</p><p><img src="https://www.z4a.net/images/2021/11/05/4095c040f0fd90998.png" alt="4095c040f0fd90998.png"></p><p>3、农场工厂加工篇</p><div class="hljs code-wrapper"><pre><code class="hljs json"># 东东农场的水果成熟以后，可以兑换水果，也能够抵扣的无门槛红包。入口：京东-&gt;我的-&gt;东东农场。# 水果兑换完之后可以马上接着种下一个水果，长期活动。一开始还是比较简单的，后边的比较难。东东农场：20包湿巾,进度7.13%,14天后可兑🍉# 京喜工厂的东西基本上还是要花钱的，属于折扣商品，然后质量不做保证。入口：京喜-&gt;我的-&gt;京喜工厂京喜工厂：当前未开始生产商品,请手动去京东APP-&gt;游戏与互动-&gt;查看更多-&gt;京喜工厂 开启活动# 这个可以做一下，可以领一些电子产品，还没有成功过，电力值比较难攒~ 入口：京东=&gt;首页=&gt;京东电器=&gt;(底栏)东东工厂东东工厂：当前未选择商品(或未开启活动) , 请到京东APP=&gt;首页=&gt;京东电器=&gt;(底栏)东东工厂 选择商品!# 这个也可以做一下，可以领一些电子产品，还没有成功过~ 入口：京东-&gt;我的-&gt;东东萌宠东东萌宠：手持便携式小风扇,勋章2/4块(16.9%)</code></pre></div><p>4、不同APP红包</p><p>上面提到的的币种没有过期时限，可以一直攒着想什么时候花什么时候花。但是不同APP对应的红包却是有过期时限的：</p><div class="hljs code-wrapper"><pre><code class="hljs json"># 红包明细，每一个APP都不一样，我们就看前三个，对应每一个APP的红包↓↓↓↓↓红包明细↓↓↓↓↓当前总红包：7.53(今日总过期0.80)元 🧧京喜红包：6.96(今日将过期0.80)元 🧧极速红包：0.00(今日将过期0.00)元 🧧京东红包：0.57(今日将过期0.00)元 🧧健康红包：0.00(今日将过期0.00)元 🧧</code></pre></div><p>然后各个APP基本上购物车是想通的，所以不同平台都可以下单，我在下单的时候就会三个APP都打开一下，哪个便宜下哪个。</p><p>京喜红包经常会比较多，然后有一些拼单还可以不要运费，所以个人用得比较多。</p><p>晒两单：</p><p><img src="https://www.z4a.net/images/2021/11/05/55c331feae0b74729.png" alt="55c331feae0b74729.png"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr><p>关于脚本的任何细节，可以自行谷歌，本教程不做任何讨论，其他更多的脚本收益可以自行探索。拜拜~</p>]]></content>
    
    
    <categories>
      
      <category>使用教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>羊毛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于宝塔面板搭建v2ray+cloudflare隐藏IP</title>
    <link href="/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BAv2ray-cloudflare%E9%9A%90%E8%97%8FIP/"/>
    <url>/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E6%90%AD%E5%BB%BAv2ray-cloudflare%E9%9A%90%E8%97%8FIP/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>昨天一个PT圈的朋友说自己机场进不去了，可能是跑路了。自己在do白嫖的vps又有用武之地了，哈哈~</p><p>之前为了折腾私人网盘搭了一个宝塔面板，然后Nginx跟trojan冲突了，虽然网上有解决方案，但是不能套CDN，弃了。万一IP被墙了转移太麻烦了~</p><p>最后选择的是<code>V2Ray+WebSocket(ws)+TLS+Nginx+网站+Cloudflare</code>的方案，在这里记录一下，免得下次又要重新配置。</p><p>原理是先在 VPS 服务器上用 V2Ray 伪装成一个网站，再用 CDN 中转。这时流量传递的顺序是这样的：</p><p><img src="https://blog.fiteen.top/2019/hide-ip/visitor-firewall-cdn-vps-website.png" alt="原理"></p><p>主要实现就是两点：</p><ul><li>借助 V2Ray 客户端代理，将我们的流量被伪装成网站流量访问我们的域名。</li><li>利用 CDN 中转 V2Ray 的 WebSocket 流量到我们的VPS。</li></ul><p>这样，GFW 只知道你与 CDN 之间的联系，不知道 VPS 的实际地址，并且 CDN 会有很多 IP 地址，GFW 也不会随意封这些 IP，毕竟也有很多正规网站在使用，因此可以基本保证 IP 的安全。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><hr><p>默认有VPS了，然后我用的是ubuntu18.04，不知道为啥，就是喜欢ubuntu的名字。然后有一个域名了，可以解析到你的VPS。然后接下来就是部署一个网站。我们使用宝塔面板进行搭建。</p><p>1、宝塔面板的安装：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p><strong>Ubuntu/Deepin安装命令：</strong><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</code></p><p>安装完成后会高速你登录网址以及账号密码，用小本本记录下来。（图片来自知乎）</p><p><img src="https://pic2.zhimg.com/80/v2-0fa056bb05839eaae2c8961d5ad3ed9d_720w.jpg" alt="安装截图"></p><p>2、一键配置网站环境</p><p>就像你电脑上的游戏，有时候缺少某个环境就无法运行。</p><p>同样网站运行也需要一定的环境支持，这里我推荐的环境组合为</p><ul><li><strong>Nginx</strong></li><li><strong>PHP</strong></li><li><strong>Mysql</strong></li></ul><p>登录宝塔面板后如果你的服务器没有网站运行环境他会弹出一键安装窗口，如果要用到宝塔的证书服务，可能还需要注册一个宝塔账号，然后进行授权什么的。</p><p><img src="https://pic3.zhimg.com/80/v2-8f9d79517de6af4cc08edd8efcf3b87e_720w.jpg" alt="搭建环境"></p><p>3、建站。这个时候需要一个域名先，无论是买的还是免费的，我们假设这个域名就是tomorrow505.xyz。然后我们登录cloudfare（没有的话就注册一个，然后Add site将域名托管在cloudfare，不同的域名商家不一样），具体的教程参见：<a href="https://zhuanlan.zhihu.com/p/56423186">https://zhuanlan.zhihu.com/p/56423186</a></p><p>我们在自己域名对应的站点下创建一条A记录为v2ray指向我们的服务器。</p><p><img src="https://www.z4a.net/images/2021/11/04/19375f3595e7614cd.png" alt="19375f3595e7614cd.png"></p><p>此时我们暂时不需要CDN，所以选择DNS only。现在我们就可以ping v2ray.tomorrow505.xyz了，返回的是VPS的真实IP。这个我们后边还会设置隐藏。使用这个域名建一个站：</p><p><img src="https://www.z4a.net/images/2021/11/04/295a28328dbdb704d.png" alt="295a28328dbdb704d.png"></p><p><img src="https://www.z4a.net/images/2021/11/04/39fd1766354322154.png" alt="39fd1766354322154.png"></p><p>提示我们需要部署SSL证书，宝塔面板自带部署证书的功能：<a href="https://cloud.tencent.com/document/product/400/50874">https://cloud.tencent.com/document/product/400/50874</a></p><p>点击上图未部署位置，会跳转到下图，这里演示了用Let’s Encrypt申请的证书，并开启强制https访问。</p><p><img src="https://www.z4a.net/images/2021/11/04/477c5ebea8c378f2b.png" alt="477c5ebea8c378f2b.png"></p><p>那么站点就搭建好了。使用上述域名访问可以看到下边的提示：</p><p><img src="https://www.z4a.net/images/2021/11/04/5.png" alt="5.png"></p><p>4、安装v2ray，基本上就是一键命令。</p><p><code>bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</code></p><p><img src="https://www.z4a.net/images/2021/11/04/6.png" alt="6.png"></p><p>出现上图那样的提示就显示成功了，运行：chown -R nobody /var/log/v2ray赋予日志写入权限。</p><p>然后我们开始配置文件：/usr/local/etc/v2ray/config.json</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;inbound&quot;</span>: &#123;    <span class="hljs-attr">&quot;streamSettings&quot;</span>: &#123;      <span class="hljs-attr">&quot;network&quot;</span>: <span class="hljs-string">&quot;ws&quot;</span>,       <span class="hljs-attr">&quot;wsSettings&quot;</span>: &#123;        <span class="hljs-attr">&quot;path&quot;</span>: <span class="hljs-string">&quot;/ws/&quot;</span>,         <span class="hljs-attr">&quot;headers&quot;</span>: &#123;          <span class="hljs-attr">&quot;Host&quot;</span>: <span class="hljs-string">&quot;ws.v2ray.tomorrow505.xyz&quot;</span>        &#125;      &#125;    &#125;,     <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;vmess&quot;</span>,     <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9999</span>,     <span class="hljs-attr">&quot;settings&quot;</span>: &#123;      <span class="hljs-attr">&quot;clients&quot;</span>: [        &#123;          <span class="hljs-attr">&quot;alterId&quot;</span>: <span class="hljs-number">100</span>,           <span class="hljs-attr">&quot;security&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>,           <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;00b93379-2d11-4392-a600-52f1d7ea0148&quot;</span>,           <span class="hljs-attr">&quot;level&quot;</span>: <span class="hljs-number">1</span>        &#125;      ]    &#125;  &#125;,   <span class="hljs-attr">&quot;outboundDetour&quot;</span>: [    &#123;      <span class="hljs-attr">&quot;tag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span>,       <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;blackhole&quot;</span>,       <span class="hljs-attr">&quot;settings&quot;</span>: &#123;&#125;    &#125;  ],   <span class="hljs-attr">&quot;outbound&quot;</span>: &#123;    <span class="hljs-attr">&quot;protocol&quot;</span>: <span class="hljs-string">&quot;freedom&quot;</span>,     <span class="hljs-attr">&quot;settings&quot;</span>: &#123;&#125;  &#125;,   <span class="hljs-attr">&quot;log&quot;</span>: &#123;    <span class="hljs-attr">&quot;access&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/access.log&quot;</span>,     <span class="hljs-attr">&quot;loglevel&quot;</span>: <span class="hljs-string">&quot;warning&quot;</span>,     <span class="hljs-attr">&quot;error&quot;</span>: <span class="hljs-string">&quot;/var/log/v2ray/error.log&quot;</span>  &#125;,   <span class="hljs-attr">&quot;routing&quot;</span>: &#123;    <span class="hljs-attr">&quot;settings&quot;</span>: &#123;      <span class="hljs-attr">&quot;rules&quot;</span>: [        &#123;          <span class="hljs-attr">&quot;ip&quot;</span>: [<span class="hljs-string">&quot;geoip:private&quot;</span>],           <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;field&quot;</span>,           <span class="hljs-attr">&quot;outboundTag&quot;</span>: <span class="hljs-string">&quot;blocked&quot;</span>        &#125;      ]    &#125;,     <span class="hljs-attr">&quot;strategy&quot;</span>: <span class="hljs-string">&quot;rules&quot;</span>  &#125;&#125;</code></pre></div><p>上边几个地方需要修改的：</p><div class="hljs code-wrapper"><pre><code class="hljs markup">&quot;path&quot;: &quot;&#x2F;ws&#x2F;&quot;, ##这里是路径，配合Nginx转发；可以不改。&quot;host&quot;：改成&quot;ws.自己的域名&quot;;&quot;port&quot;: 9999, ##这里是需要Nginx转发的端口;&quot;alterId&quot;: 100, ##这里是额外ID;&quot;id&quot;: &quot;00b93379-2d11-4392-a600-52f1d7ea0148&quot;, ##这里是UUID。可以从https:&#x2F;&#x2F;1024tools.com&#x2F;uuid生成之后选择一个。需要和客户端对应。</code></pre></div><p>接着在宝塔面板的安全页面放行9999端口。</p><p><img src="https://www.z4a.net/images/2021/11/04/8.png" alt="8.png"></p><p>然后根据图片的提示运行：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> v2raysystemctl start v2raysystemctl status v2ray</code></pre></div><p><img src="https://www.z4a.net/images/2021/11/04/7.png" alt="7.png"></p><p>可以看到正在running……</p><div class="hljs code-wrapper"><pre><code class="hljs bash">systemctl stop v2ray</code></pre></div><p>接着进入宝塔面板，进入添加的网站，修改配置文件，在#SSL-END的前变添加如下代码，里面的9999是前面v2ray中配置的端口，必须对应起来：</p><p><img src="https://www.z4a.net/images/2021/11/04/9.png" alt="9.png"></p><div class="hljs code-wrapper"><pre><code class="hljs json">location /ws &#123;        proxy_redirect off;        proxy_pass http://127.0.0.1:9999;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    &#125;</code></pre></div><p>在宝塔面板软件商店-&gt;已安装找到Nginx，重启Nginx：</p><p><img src="https://www.z4a.net/images/2021/11/04/10.png" alt="10.png"></p><p>此时v2ray服务端就算搭建好了，运行<code>systemctl start v2ray</code>开启服务，然后配置客户端，windows上下载v2rayN：<a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></p><p>选择v2rayN-core版本，解压运行v2rayN.exe，然后进行如下配置：</p><p><img src="https://www.z4a.net/images/2021/11/04/12.png" alt="12.png"></p><p><img src="https://www.z4a.net/images/2021/11/04/13.png" alt="13.png"></p><p>上边图中标红的，换成自己的域名和UUID，其他的如果没有变化的就不用改了。然后右键v2rayN.exe运行起来的程序设置：</p><p>​    系统代理-&gt;自动配置系统代理</p><p>​    路由-&gt;绕过大陆</p><p><img src="https://www.z4a.net/images/2021/11/04/14.png" alt="14.png"></p><p>油管测速，还行吧。</p><p>最后记得到cloudflare中把云朵点亮，确保IP被隐藏了：</p><p><img src="https://www.z4a.net/images/2021/11/04/15.png" alt="15.png"></p><p>打开：<a href="https://tool.lu/ip/">https://tool.lu/ip/</a> 对结果进行验证：我们看到域名已经放到cloudfare代理下边了。</p><p><img src="https://www.z4a.net/images/2021/11/04/16.png" alt="16.png"></p><p>使用本方法可以保证网站和v2ray共存，后续还可以在vps上继续搭建网站。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>人生不易，且折腾着吧。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/v2fly/fhs-install-v2ray">fhs-install-v2ray安装v2ray一键脚本</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/56423186">域名解析教程：Cloudflare解析与DNSPod解析</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cloud.tencent.com/document/product/400/50874">宝塔面板 SSL 证书安装部署</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="http://tech.isylar.com/part1/%E5%AE%9D%E5%A1%94%20BT%20%E9%9D%A2%E6%9D%BF%20+%20V2Ray%EF%BC%9A%E5%AE%9E%E7%8E%B0%20Websocket+TLS+Nginx%20%E5%88%86%E6%B5%81.html">宝塔BT面板+v2ray：实现 websocket+TLS+Nginx分流</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.strivefysfxyh.com/%E6%90%AC%E7%93%A6%E5%B7%A5vps%E7%9A%84ip%E8%A2%AB%E5%B0%81-v2raywebsocketwstlsnginx%E7%BD%91%E7%AB%99cloudflare/">搬瓦工vps的ip被封-v2raywebsocketwstlsnginx网站cloudflare</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.fiteen.top/2019/hide-ip">V2Ray + CDN 中转隐藏 IP</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>爱好</tag>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于FRP内网穿透实现plex远程访问</title>
    <link href="/%E5%9F%BA%E4%BA%8EFRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0plex%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <url>/%E5%9F%BA%E4%BA%8EFRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0plex%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>最近折腾了plex电影库，但是不能够远程访问，本着折腾无止境的念头，所以才有了使用frp服务器内网穿透的想法……周末开干。</p><p>使用了digitalocean的vps作为服务器，一个月5刀的费用。好在之前用GitHub education pack白嫖了100刀，可以用一年多免费的~</p><blockquote><p>frp工作原理：简单地说，<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp</a>就是一个<a href="https://www.zhihu.com/question/24723688">反向代理软件</a>，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持HTTP、TCP、UDP等众多协议。</p></blockquote><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><hr><blockquote><p>系统使用Ubuntu 18.04.5 x64，frp客户端和服务端本身同时均支持Linux和Windows，且配置方法一样，请根据实际环境自行测试。</p></blockquote><p>服务器端配置代码：</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载frp文件并进行解压</span>wget https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gztar -zxvf frp_0.22.0_linux_amd64.tar.gzcp -r frp_0.22.0_linux_amd64 frp<span class="hljs-built_in">cd</span> frp &amp;&amp; rm frpc &amp;&amp; rm frpc.ini<span class="hljs-comment"># 修改配置文件</span>vim frps.ini<span class="hljs-comment"># 文件大致格式</span>[common]bind_port = 7000 <span class="hljs-comment"># 默认只有这一行</span>dashboard_port = 7500 <span class="hljs-comment"># 开启dashboard</span>token = 12345678 <span class="hljs-comment"># token为服务器端和客户端的标识</span>dashboard_user = admin <span class="hljs-comment"># dashboard的用户名</span>dashboard_pwd = admin  <span class="hljs-comment"># dashboard的密码</span></code></pre></div><ul><li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li><li>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li><li>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li><li>“dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li></ul><p>运行服务器：</p><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 第一种</span>./frps -c frps.ini  <span class="hljs-comment"># 这样会阻塞住，ctrl+c就会停止</span><span class="hljs-comment"># 第二种</span>nohup ./frps -c frps.ini &amp; <span class="hljs-comment"># 这样就丢到后台去了，通过jobs可以看后台运行的服务。</span></code></pre></div><p>针对上述第二种方案怎么关闭：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -aux|grep frp| grep -v greproot      3600  0.1  0.1 110188  9484 pts/0    Sl   15:04   0:00 ./frpc -c ./frpc.ini<span class="hljs-built_in">kill</span> -9 3600</code></pre></div><p>怎么开机启动：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">vi /etc/systemd/system/frps.service <span class="hljs-comment"># 新建此文件，并写入以下内容，注意frps和frps.ini的位置</span>[Unit]Description=frps daemon[Service]Type=simpleExecStart=/usr/bin/frps -c /etc/frps/frps.ini[Install]WantedBy=multi-user.target<span class="hljs-comment"># 启动并设为开机自启。</span>systemctl start frpssystemctl <span class="hljs-built_in">enable</span> frps</code></pre></div><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><hr><blockquote><p>同样地，根据客户端设备的情况选择相应的frp程序进行<a href="https://github.com/fatedier/frp/releases">下载</a>，Windows下下载和解压等步骤不再描述。<br>假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了D盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。<br>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p></blockquote><div class="hljs code-wrapper"><pre><code class="hljs bash">[common]server_addr = x.x.x.xserver_port = 7000token = 12345678[plex]<span class="hljs-built_in">type</span> = tcplocal_ip = 127.0.0.1           local_port = 32400remote_port = 7001  <span class="hljs-string">&quot;server_addr&quot;</span> 为服务端IP地址，填入即可。<span class="hljs-string">&quot;server_port&quot;</span>为服务器端口，填入你设置的端口号即可，如果未改变就是7000<span class="hljs-string">&quot;token&quot;</span>是你在服务器上设置的连接口令，原样填入即可。</code></pre></div><p>原理图：来源于网络</p><p><img src="https://s2.ax1x.com/2019/01/12/FjUW0x.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1"></p><p>运行：</p><p>cmd命令符窗口进入目录：frpc -c frpc.ini，同样的，会有一个窗口，而且关了就停了。</p><p>后台运行：新建frp.bat，将下述命令放进去，点击frp.bat即可运行。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<span class="hljs-keyword">if</span> <span class="hljs-string">&quot;%1&quot;</span> == <span class="hljs-string">&quot;h&quot;</span> goto beginmshta vbscript:createobject(<span class="hljs-string">&quot;wscript.shell&quot;</span>).run(<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;%~nx0&quot;</span><span class="hljs-string">&quot; h&quot;</span>,0)(window.close)&amp;&amp;<span class="hljs-built_in">exit</span>:beginREMD:<span class="hljs-built_in">cd</span> D:\frpfrpc -c frpc.ini<span class="hljs-built_in">exit</span></code></pre></div><p>关闭：</p><p>之后直接运行这个 .bat 文件即可启动frpc并隐藏窗口（可在任务管理器中退出）。<br>至于开机启动，把这个 .bat 文件直接扔进Windows的开机启动文件夹就好了 :)</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>至此，我们可以通过手机用vps的ip地址加7003端口访问plex服务了，至于怎么绑定域名，还没有折腾明白，先写到这里。</p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>电影</tag>
      
      <tag>爱好</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于QB搜索插件制作聚合搜索工具：以蝴蝶为例</title>
    <link href="/%E5%9F%BA%E4%BA%8EQB%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%EF%BC%9A%E4%BB%A5%E8%9D%B4%E8%9D%B6%E4%B8%BA%E4%BE%8B/"/>
    <url>/%E5%9F%BA%E4%BA%8EQB%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6%E5%88%B6%E4%BD%9C%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%EF%BC%9A%E4%BB%A5%E8%9D%B4%E8%9D%B6%E4%B8%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>昨天看到南洋群里有个脚本可以基于QB搜索插件搜索南洋的种子，似乎可以用于蝴蝶，然后去看了下官方文档，着手写了一个。</p><p>测试环境：qbittorrent4.2.5+win10+python3.6.4</p><p>官方文档：<a href="https://github.com/qbittorrent/search-plugins/wiki/How-to-write-a-search-plugin/#python-class-file-structure">https://github.com/qbittorrent/search-plugins/wiki/How-to-write-a-search-plugin/#python-class-file-structure</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><blockquote><p>First, you must understand that a qBittorrent search engine plugin is actually a Python class file whose task is to contact a search engine website (e.g. <a href="http://www.mininova.org/">Mininova.org</a>), parse the results displayed by the web page and print them on stdout with the following syntax:</p><div class="hljs code-wrapper"><pre><code class="hljs coq">link|<span class="hljs-type">name</span>|<span class="hljs-type">size</span>|<span class="hljs-type">seeds</span>|<span class="hljs-type">leech</span>|<span class="hljs-type">engine_url</span>|<span class="hljs-type">desc_link</span></code></pre></div></blockquote><p>意思是搜索插件就是一个python文件，用来生成搜索结果的，每一条都需要有以上七个字段，然后就可以显示出来了。如：</p><p><img src="https://www.z4a.net/images/2021/10/15/12183641dc8115f19.png" alt="12183641dc8115f19.png"></p><h3 id="制作流程"><a href="#制作流程" class="headerlink" title="制作流程"></a>制作流程</h3><hr><blockquote><p>Your plugin should be named “engine_name.py”, in lowercase and without spaces not any special characters. You’ll also need the other files for the project (<a href="https://github.com/qbittorrent/qBittorrent/tree/master/src/searchengine/nova3">Link</a>)</p></blockquote><p>首先创建一个hudbt.py的文档。然后从上述链接把下面的文档下载下来，测试的时候会用到：</p><div class="hljs code-wrapper"><pre><code class="hljs python">-&gt; nova2.py # the main search engine script which calls the plugins-&gt; nova2dl.py # standalone script called by qBittorrent to download a torrent using a particular search plugin-&gt; helpers.py # contains helper functions you can use in your plugins such as retrieve_url() and download_file()-&gt; novaprinter.py # contains some useful functions like prettyPrint(my_dict) to display your search results-&gt; socks.py # Required by helpers.py. This module provides a standard socket-like interface.</code></pre></div><p>基本的结构如下：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#VERSION: 1.00</span><span class="hljs-comment">#AUTHORS: YOUR_NAME (YOUR_MAIL)</span><span class="hljs-comment"># LICENSING INFORMATION</span><span class="hljs-keyword">from</span> helpers <span class="hljs-keyword">import</span> download_file, retrieve_url<span class="hljs-keyword">from</span> novaprinter <span class="hljs-keyword">import</span> prettyPrinter<span class="hljs-keyword">import</span> sgmllib<span class="hljs-comment"># some other imports if necessary</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">engine_name</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    `url`, `name`, `supported_categories` should be static variables of the engine_name class,</span><span class="hljs-string">     otherwise qbt won&#x27;t install the plugin.</span><span class="hljs-string"></span><span class="hljs-string">    `url`: The URL of the search engine.</span><span class="hljs-string">    `name`: The name of the search engine, spaces and special characters are allowed here.</span><span class="hljs-string">    `supported_categories`: What categories are supported by the search engine and their corresponding id,</span><span class="hljs-string">    possible categories are (&#x27;all&#x27;, &#x27;movies&#x27;, &#x27;tv&#x27;, &#x27;music&#x27;, &#x27;games&#x27;, &#x27;anime&#x27;, &#x27;software&#x27;, &#x27;pictures&#x27;, &#x27;books&#x27;).</span><span class="hljs-string">    &quot;&quot;&quot;</span>    url = <span class="hljs-string">&#x27;http://www.engine-url.org&#x27;</span>    name = <span class="hljs-string">&#x27;Full engine name&#x27;</span>    supported_categories = &#123;<span class="hljs-string">&#x27;all&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;movies&#x27;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;tv&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;music&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;games&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;anime&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;software&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>&#125;    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        some initialization</span><span class="hljs-string">        &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_torrent</span>(<span class="hljs-params">self, info</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Providing this function is optional.</span><span class="hljs-string">        It can however be interesting to provide your own torrent download</span><span class="hljs-string">        implementation in case the search engine in question does not allow</span><span class="hljs-string">        traditional downloads (for example, cookie-based download).</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-built_in">print</span> download_file(info)    <span class="hljs-comment"># DO NOT CHANGE the name and parameters of this function</span>    <span class="hljs-comment"># This function will be the one called by nova2.py</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, what, cat=<span class="hljs-string">&#x27;all&#x27;</span></span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        Here you can do what you want to get the result from the search engine website.</span><span class="hljs-string">        Everytime you parse a result line, store it in a dictionary</span><span class="hljs-string">        and call the prettyPrint(your_dict) function.</span><span class="hljs-string"></span><span class="hljs-string">        `what` is a string with the search tokens, already escaped (e.g. &quot;Ubuntu+Linux&quot;)</span><span class="hljs-string">        `cat` is the name of a search category in (&#x27;all&#x27;, &#x27;movies&#x27;, &#x27;tv&#x27;, &#x27;music&#x27;, &#x27;games&#x27;, &#x27;anime&#x27;, &#x27;software&#x27;, &#x27;pictures&#x27;, &#x27;books&#x27;)</span><span class="hljs-string">        &quot;&quot;&quot;</span></code></pre></div><p>然后hudbt.py需要做的就是吧search函数实现一下，参考了这个搜索引擎来实现：<a href="https://github.com/qbittorrent/search-plugins/blob/master/nova3/engines/limetorrents.py">https://github.com/qbittorrent/search-plugins/blob/master/nova3/engines/limetorrents.py</a></p><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><hr><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># VERSION: 1.0</span><span class="hljs-comment"># AUTHORS: tomorrow505</span><span class="hljs-comment"># CONTRIBUTORS: Lima66 and JJ404</span><span class="hljs-comment"># Reference: https://github.com/qbittorrent/search-plugins/blob/master/nova3/engines/limetorrents.py</span><span class="hljs-keyword">from</span> novaprinter <span class="hljs-keyword">import</span> prettyPrinter<span class="hljs-keyword">from</span> html.parser <span class="hljs-keyword">import</span> HTMLParser<span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requestsPASSKEY = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span> <span class="hljs-comment"># 蝴蝶的秘钥，用于获取下载链接用</span><span class="hljs-comment"># 定义搜索插件的名称</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hudbt</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-comment"># 需要包含以下三个字段，url，名称，支持的分类：所有，电影，电视，音乐，游戏，动漫，软件，图片，书籍</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        `url`, `name`, `supported_categories` should be static variables of the engine_name class,</span><span class="hljs-string">         otherwise qbt won&#x27;t install the plugin.</span><span class="hljs-string"></span><span class="hljs-string">        `url`: The URL of the search engine.</span><span class="hljs-string">        `name`: The name of the search engine, spaces and special characters are allowed here.</span><span class="hljs-string">        `supported_categories`: What categories are supported by the search engine and their corresponding id,</span><span class="hljs-string">        possible categories are (&#x27;all&#x27;, &#x27;movies&#x27;, &#x27;tv&#x27;, &#x27;music&#x27;, &#x27;games&#x27;, &#x27;anime&#x27;, &#x27;software&#x27;, &#x27;pictures&#x27;, &#x27;books&#x27;).</span><span class="hljs-string">    &quot;&quot;&quot;</span>    url = <span class="hljs-string">&#x27;https://hudbt.hust.edu.cn/&#x27;</span>    name = <span class="hljs-string">&#x27;hudbt&#x27;</span>    supported_categories = &#123;        <span class="hljs-string">&#x27;all&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,        <span class="hljs-string">&#x27;movies&#x27;</span>: <span class="hljs-string">&#x27;cat401=1&amp;cat413=1&amp;cat414=1&amp;cat415=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;tv&#x27;</span>: <span class="hljs-string">&#x27;cat402=1&amp;cat417=1&amp;cat416=1&amp;cat418=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;anime&#x27;</span>: <span class="hljs-string">&#x27;cat405=1&amp;cat427=1&amp;cat428=1&amp;429=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;music&#x27;</span>: <span class="hljs-string">&#x27;cat408=1&amp;cat422=1&amp;cat423=1&amp;424=1&amp;cat425=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;books&#x27;</span>: <span class="hljs-string">&#x27;cat432=1&amp;cat=412=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;software&#x27;</span>: <span class="hljs-string">&#x27;cat411=1&amp;&#x27;</span>,        <span class="hljs-string">&#x27;games&#x27;</span>: <span class="hljs-string">&#x27;cat410=1&amp;&#x27;</span>    &#125;    <span class="hljs-comment"># 用于解析页面的子类，就是为了获得上述几个字段，继承HTMLParser并重构下边几个方法</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHtmlParser</span>(<span class="hljs-params">HTMLParser</span>):</span>        <span class="hljs-string">&quot;&quot;&quot; Sub-class for parsing results &quot;&quot;&quot;</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">error</span>(<span class="hljs-params">self, message</span>):</span>            <span class="hljs-keyword">pass</span>        A, TD, TR, HREF = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;td&#x27;</span>, <span class="hljs-string">&#x27;tr&#x27;</span>, <span class="hljs-string">&#x27;href&#x27;</span>)        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, url</span>):</span>            HTMLParser.__init__(self)            self.url = url            self.current_item = &#123;&#125;  <span class="hljs-comment"># dict for found item</span>            self.item_name = <span class="hljs-literal">None</span>  <span class="hljs-comment"># key&#x27;s name in current_item dict</span>                        <span class="hljs-comment"># 记录行号，第0行不是种子</span>            self.current_tr = <span class="hljs-number">0</span>            <span class="hljs-comment"># 记录列号，4-6列解析出来大小，做种者下载者</span>            self.current_td = -<span class="hljs-number">1</span>            self.parser_td = &#123;                <span class="hljs-number">4</span>: <span class="hljs-string">&quot;size&quot;</span>,  <span class="hljs-comment"># td_number</span>                <span class="hljs-number">5</span>: <span class="hljs-string">&quot;seeds&quot;</span>,                <span class="hljs-number">6</span>: <span class="hljs-string">&quot;leech&quot;</span>            &#125;                        <span class="hljs-comment"># 大小单位，默认GB</span>            self.size_data = <span class="hljs-string">&#x27;GiB&#x27;</span>                        <span class="hljs-comment"># 标记是否是一行，也就是一个种子记录</span>            self.inside_tr = <span class="hljs-literal">False</span>                        <span class="hljs-comment"># 标记是否是种子列表，以id=torrents来判断</span>            self.findTable = <span class="hljs-literal">False</span>        <span class="hljs-comment"># 重构方法</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_starttag</span>(<span class="hljs-params">self, tag, attrs</span>):</span>            <span class="hljs-comment"># 判断是否已经遇到了种子表格</span>            params = <span class="hljs-built_in">dict</span>(attrs)            <span class="hljs-keyword">if</span> params.get(<span class="hljs-string">&#x27;id&#x27;</span>) == <span class="hljs-string">&#x27;torrents&#x27;</span>:                self.findTable = <span class="hljs-literal">True</span>            <span class="hljs-comment"># 判断是不是已经到了种子表格的每一行tr</span>            <span class="hljs-keyword">if</span> tag == self.TR <span class="hljs-keyword">and</span> self.findTable:                self.inside_tr = <span class="hljs-literal">True</span>                                <span class="hljs-comment"># 规避第0行</span>                <span class="hljs-keyword">if</span> self.current_tr:                    <span class="hljs-keyword">pass</span>                <span class="hljs-keyword">else</span>:                    self.current_tr += <span class="hljs-number">1</span>                    <span class="hljs-keyword">return</span>                                <span class="hljs-comment"># 清空种子记录</span>                self.current_item = &#123;&#125;                <span class="hljs-comment"># 列号设置为-1</span>                self.current_td = -<span class="hljs-number">1</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.inside_tr:                <span class="hljs-keyword">return</span>                        <span class="hljs-comment"># 种子纪录的列，根据列号获取size，seeds,leech关键字，设置为-1，因为没有的话默认就是-1</span>            <span class="hljs-keyword">if</span> self.inside_tr <span class="hljs-keyword">and</span> tag == self.TD:                self.current_td += <span class="hljs-number">1</span>                self.item_name = self.parser_td.get(self.current_td, <span class="hljs-literal">None</span>)                <span class="hljs-keyword">if</span> self.item_name:                    self.current_item[self.item_name] = -<span class="hljs-number">1</span>                       <span class="hljs-comment"># 判断种子详情页链接，下载页链接</span>            <span class="hljs-keyword">if</span> self.inside_tr <span class="hljs-keyword">and</span> tag == self.A <span class="hljs-keyword">and</span> self.HREF <span class="hljs-keyword">in</span> params:                link = <span class="hljs-string">&quot;https:&quot;</span> + params[<span class="hljs-string">&quot;href&quot;</span>]                <span class="hljs-keyword">if</span> link.endswith(<span class="hljs-string">&quot;&amp;hit=1&quot;</span>):                    self.current_item[<span class="hljs-string">&quot;engine_url&quot;</span>] = self.url                    self.current_item[<span class="hljs-string">&quot;desc_link&quot;</span>] = link                    torrent_id = re.search(<span class="hljs-string">&#x27;id=\d+&#x27;</span>, link).group()                    self.current_item[<span class="hljs-string">&quot;link&quot;</span>] = <span class="hljs-string">&#x27;https://hudbt.hust.edu.cn/download.php?&#123;&#125;&amp;passkey=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(                        torrent_id, PASSKEY                    )                    self.item_name = <span class="hljs-string">&quot;name&quot;</span>        <span class="hljs-comment"># 重构实现数据获取，size，seeds，leech</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_data</span>(<span class="hljs-params">self, data</span>):</span>            <span class="hljs-comment"># 因为size的data分为两部分，直接取只有数字，所以加上一个后缀</span>            <span class="hljs-keyword">try</span>:                <span class="hljs-keyword">if</span> data.endswith(<span class="hljs-string">&#x27;MiB&#x27;</span>) <span class="hljs-keyword">and</span> self.current_item[<span class="hljs-string">&#x27;size&#x27;</span>]:                    self.current_item[<span class="hljs-string">&#x27;size&#x27;</span>] += <span class="hljs-string">&#x27;MB&#x27;</span>                <span class="hljs-keyword">elif</span> data.endswith(<span class="hljs-string">&#x27;GiB&#x27;</span>) <span class="hljs-keyword">and</span> self.current_item[<span class="hljs-string">&#x27;size&#x27;</span>]:                    self.current_item[<span class="hljs-string">&#x27;size&#x27;</span>] += <span class="hljs-string">&#x27;GB&#x27;</span>            <span class="hljs-keyword">except</span> Exception:                <span class="hljs-keyword">pass</span>            <span class="hljs-keyword">if</span> self.inside_tr <span class="hljs-keyword">and</span> self.item_name:                <span class="hljs-keyword">if</span> self.item_name == <span class="hljs-string">&#x27;size&#x27;</span>:                    self.current_item[self.item_name] = data                <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> self.item_name == <span class="hljs-string">&#x27;size&#x27;</span>:                    self.current_item[self.item_name] = data.strip().replace(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)                self.item_name = <span class="hljs-literal">None</span>        <span class="hljs-comment"># 进行数据的处理和部分变量归初始状态操作</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_endtag</span>(<span class="hljs-params">self, tag</span>):</span>            <span class="hljs-keyword">if</span> tag == <span class="hljs-string">&#x27;table&#x27;</span>:                self.findTable = <span class="hljs-literal">False</span>            <span class="hljs-keyword">if</span> self.inside_tr <span class="hljs-keyword">and</span> tag == self.TR:                self.inside_tr = <span class="hljs-literal">False</span>                self.item_name = <span class="hljs-literal">None</span>                array_length = <span class="hljs-built_in">len</span>(self.current_item)                <span class="hljs-keyword">if</span> array_length &lt; <span class="hljs-number">1</span>:                    <span class="hljs-keyword">return</span>                prettyPrinter(self.current_item)                self.current_item = &#123;&#125;    <span class="hljs-comment"># 实现搜索方法</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">self, search_string, cat=<span class="hljs-string">&#x27;all&#x27;</span></span>):</span>        parser = self.MyHtmlParser(self.url) <span class="hljs-comment"># 实例化一个子类</span>                <span class="hljs-comment"># 支持imdb和豆瓣搜索，构造搜索链接</span>        imdb_search_string = re.search(<span class="hljs-string">&#x27;tt\d&#123;5,12&#125;&#x27;</span>, search_string)        douban_search_string = re.search(<span class="hljs-string">&#x27;subject/\d&#123;2,12&#125;&#x27;</span>, search_string)        <span class="hljs-keyword">if</span> imdb_search_string:            search_string = imdb_search_string.group()            query = <span class="hljs-string">&#x27;&#123;0&#125;torrents.php?&amp;&#123;1&#125;&amp;inclbookmarked=0&amp;search_area=4&amp;incldead=1&amp;indate=0&amp;search=&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(                self.url, self.supported_categories[cat.lower()], search_string)        <span class="hljs-keyword">elif</span> douban_search_string:            search_string = douban_search_string.group()            query = <span class="hljs-string">&#x27;&#123;0&#125;torrents.php?&amp;&#123;1&#125;&amp;inclbookmarked=0&amp;search_area=4&amp;incldead=1&amp;indate=0&amp;search=&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(                self.url, self.supported_categories[cat.lower()], search_string)        <span class="hljs-keyword">else</span>:            query = <span class="hljs-string">&#x27;&#123;0&#125;torrents.php?&#123;1&#125;&amp;inclbookmarked=0&amp;search_area=0&amp;incldead=1&amp;indate=0&amp;search=&#123;2&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(                self.url, self.supported_categories[cat.lower()], search_string)                <span class="hljs-comment"># 模拟浏览器请求头，需要hudbt的cookie</span>        user_agent = <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0&#x27;</span>        headers = &#123;            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: user_agent,            <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>        &#125;        html = requests.get(query, headers=headers,verify=<span class="hljs-literal">False</span>).content.decode()        parser.feed(html)        parser.close()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    c = hudbt()    c.search(<span class="hljs-string">&#x27;请以你的名字呼唤我&#x27;</span>)</code></pre></div><p>测试结果展示：</p><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">146462</span>&amp;hit=<span class="hljs-number">1</span>|Call Me by Your Name <span class="hljs-number">2017</span> BluRay <span class="hljs-number">720</span>p x<span class="hljs-number">264</span> AC<span class="hljs-number">3</span>-CMCT|<span class="hljs-number">4939212390</span>|<span class="hljs-number">1</span>|<span class="hljs-number">0</span>|https://hudbt.hust.edu.cn/|https://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">146462</span>&amp;hit=<span class="hljs-number">1</span><span class="hljs-attribute">https</span>://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">145095</span>&amp;hit=<span class="hljs-number">1</span>|Call Me by Your Name <span class="hljs-number">2017</span> Repack <span class="hljs-number">1080</span>p BluRay DTS x<span class="hljs-number">264</span>-Geek|<span class="hljs-number">19993072762</span>|<span class="hljs-number">6</span>|<span class="hljs-number">0</span>|https://hudbt.hust.edu.cn/|https://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">145095</span>&amp;hit=<span class="hljs-number">1</span><span class="hljs-attribute">https</span>://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137637</span>&amp;hit=<span class="hljs-number">1</span>|Call Me by Your Name <span class="hljs-number">2017</span> <span class="hljs-number">1080</span>p BluRay x<span class="hljs-number">264</span> DTS-WiKi|<span class="hljs-number">18146236825</span>|<span class="hljs-number">0</span>|<span class="hljs-number">0</span>|https://hudbt.hust.edu.cn/|https://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137637</span>&amp;hit=<span class="hljs-number">1</span><span class="hljs-attribute">https</span>://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137635</span>&amp;hit=<span class="hljs-number">1</span>|Call Me by Your Name <span class="hljs-number">2017</span> <span class="hljs-number">720</span>p BluRay x<span class="hljs-number">264</span>-WiKi|<span class="hljs-number">8589934592</span>|<span class="hljs-number">0</span>|<span class="hljs-number">0</span>|https://hudbt.hust.edu.cn/|https://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137635</span>&amp;hit=<span class="hljs-number">1</span><span class="hljs-attribute">https</span>://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137266</span>&amp;hit=<span class="hljs-number">1</span>|Call Me By Your Name <span class="hljs-number">2017</span> HD<span class="hljs-number">720</span>P X<span class="hljs-number">264</span> AAC Multilingual CHS MF|<span class="hljs-number">2931315179</span>|<span class="hljs-number">0</span>|<span class="hljs-number">0</span>|https://hudbt.hust.edu.cn/|https://hudbt.hust.edu.cn/details.php?id=<span class="hljs-number">137266</span>&amp;hit=<span class="hljs-number">1</span></code></pre></div><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><hr><ol><li>先在视图里开启搜索引擎视图</li><li>点击搜索，右下角点击搜索插件，左下角点击安装一个新的搜索引擎，选择本地文件，找到hudbt.py.</li></ol><p><img src="https://www.z4a.net/images/2021/10/15/2e9c207ce77e9056d.png" alt="2e9c207ce77e9056d.png"></p><h3 id="搜索显示"><a href="#搜索显示" class="headerlink" title="搜索显示"></a>搜索显示</h3><p>以IMDB号搜，这里写了正则，完整的IMDB链接也没有关系；</p><p><a href="https://www.z4a.net/image/gFdnKI"><img src="https://www.z4a.net/images/2021/10/15/35881cf4c09b1933b.png" alt="35881cf4c09b1933b.png"></a></p><p>以中文搜，跟网站搜索结果一致，但是如果结果过多我们这里只是选择了一页50个结果，所以还有改进的空间；</p><p><a href="https://www.z4a.net/image/gFdIyU"><img src="https://www.z4a.net/images/2021/10/15/4ccda1a6822ec6878.png" alt="4ccda1a6822ec6878.png"></a></p><p>可以根据选择的结果排序然后右键可以看详情页，或者直接根据结果进行下载。</p><p><img src="https://www.z4a.net/images/2021/10/16/5.png" alt="5.png"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr><p>折腾不易，且行且珍惜。如果通过这种方案可以获取到网站的结果，其实获取qbittorrent与之匹配。那么qbittorrentapi研究起来是不是感觉离自动辅种也不远了？而且可以支持内站外站，你想要的都有哦，哈哈~~</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华科羽毛球自动抢订代码解析</title>
    <link href="/%E5%8D%8E%E7%A7%91%E7%BE%BD%E6%AF%9B%E7%90%83%E8%87%AA%E5%8A%A8%E6%8A%A2%E8%AE%A2%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/%E5%8D%8E%E7%A7%91%E7%BE%BD%E6%AF%9B%E7%90%83%E8%87%AA%E5%8A%A8%E6%8A%A2%E8%AE%A2%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前学校光体维修，只剩下西体8个场地，以往的现场预定又改成了网上预订。早上八点开始可以预定后两天的场地……</p><p>羽毛球爱好者太多了，加上8点就起来抢，太困了……</p><p>所以写了一个python程序用来抢订场地。其实思路也很简单，使用windows自带的计划任务定时：如指定日期早上7点56开始运行。用selenium模拟浏览器进入系统执行场地的抢订……</p><p>后来，光体开了，网站也进行了升级，进入系统登录的时候多了个验证码，验证码是动的。就像下面的图一样：</p><p><img src="https://www.z4a.net/images/2021/09/14/code28e4a9aaa555b38e.gif" alt="code28e4a9aaa555b38e.gif"></p><p>羽毛球场地虽然多了，但是紧俏的场地依然不好定，如晚上的8-10点，但是课题组的人貌似下午也接受，下午的场地好像订的人不多。就没有再折腾了。</p><p>贴一下两年前写的代码，当时还不需要验证，所以一切都是那么简单：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Author:tomorrow505</span><span class="hljs-comment"># 用于定时启动</span><span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> datetime<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> json<span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver  <span class="hljs-comment"># 导入浏览器</span><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> Select<span class="hljs-keyword">from</span> selenium.common.exceptions <span class="hljs-keyword">import</span> NoSuchElementException<span class="hljs-comment"># 用于最后判定是否预约成功，如果不成功获取错误消息写入日志</span><span class="hljs-keyword">import</span> traceback<span class="hljs-comment"># 用于关闭谷歌浏览器，如果开着的话</span><span class="hljs-keyword">import</span> psutil<span class="hljs-keyword">import</span> os<span class="hljs-comment"># 用于干掉开着的火狐浏览器</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kill_chrome</span>():</span>    exe = <span class="hljs-string">&#x27;firefox.exe&#x27;</span>    pids = psutil.pids()    <span class="hljs-keyword">for</span> pid <span class="hljs-keyword">in</span> pids:        p = psutil.Process(pid)        <span class="hljs-comment"># print(&#x27;pid-%s,pname-%s&#x27; % (pid, p.name()))</span>        <span class="hljs-keyword">if</span> p.name() == exe:            <span class="hljs-comment"># print(&#x27;pid-%s,pname-%s&#x27; % (pid, p.name()))</span>            cmd = <span class="hljs-string">&#x27;taskkill /F /IM firefox.exe&#x27;</span>            os.system(cmd)            <span class="hljs-keyword">break</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_info</span>()</span>    login_info_ = &#123;&#125;    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;login_user.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> login_file:            login_info_ = json.load(login_file)    <span class="hljs-keyword">except</span> BaseException:        print(<span class="hljs-string">&quot;Json load failed&quot;</span>)    <span class="hljs-keyword">finally</span>:        <span class="hljs-keyword">return</span> login_info_<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">order_play</span>():</span>    login_info = load_info()    <span class="hljs-comment"># 优先时间顺序——对应selector</span>    time_order = login_info[<span class="hljs-string">&#x27;order&#x27;</span>]    time_order = [item + <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> time_order]    <span class="hljs-comment"># 时间的字符串，用于发邮件</span>    time_str = &#123;<span class="hljs-number">3</span>:<span class="hljs-string">&quot;20:00-22:00&quot;</span>, <span class="hljs-number">1</span>:<span class="hljs-string">&quot;16:00-18:00&quot;</span>, <span class="hljs-number">2</span>:<span class="hljs-string">&quot;18:00-20:00&quot;</span>&#125;    <span class="hljs-comment"># 场地优先顺序</span>    order = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]    <span class="hljs-comment"># 存储场地预定信息的xpath，用于寻找是否可以预定</span>    changdi_xpath = []    <span class="hljs-comment"># 添加第7个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[4]/td[3]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第8个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[4]/td[4]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第9个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[4]/td[5]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第10个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[4]/td[6]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第12个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[5]/td[3]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第13个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[5]/td[4]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 添加第14个场地</span>    changdi_xpath.append(        <span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/div[1]/table/tbody/tr[5]/td[5]/div/div/span&#x27;</span>)    <span class="hljs-comment"># 查看是否存在可以预定场地</span>    flag = <span class="hljs-number">0</span>    driver_logo = <span class="hljs-number">0</span>    driver = get_driver(driver_logo)    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;outputlog.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>) <span class="hljs-keyword">as</span> f:        <span class="hljs-comment"># sys.stdout = f   # 输出指向txt文件</span>        write_log(<span class="hljs-string">&#x27;开始记录日志&#x27;</span>)        driver.get(            <span class="hljs-string">&quot;https://pass.hust.edu.cn/cas/login?service=http%3A%2F%2Fpecg.hust.edu.cn%2Fcggl%2Findex1&quot;</span>)        driver.implicitly_wait(<span class="hljs-number">5</span>)        write_log(<span class="hljs-string">&#x27;进入统一身份认证系统&#x27;</span>)        <span class="hljs-comment"># 清空两个框里的东西</span>        driver.find_element_by_id(<span class="hljs-string">&#x27;un&#x27;</span>).clear()        driver.find_element_by_id(<span class="hljs-string">&#x27;pd&#x27;</span>).clear()        <span class="hljs-comment"># 填写账号密码：谷歌浏览器就不用</span>        driver.find_element_by_id(            <span class="hljs-string">&#x27;un&#x27;</span>).send_keys(login_info[<span class="hljs-string">&#x27;no&#x27;</span>])        driver.find_element_by_id(            <span class="hljs-string">&#x27;pd&#x27;</span>).send_keys(login_info[<span class="hljs-string">&#x27;pwd&#x27;</span>])        <span class="hljs-comment"># 点击登录统一认证</span>        driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;index_login_btn&quot;]&#x27;</span>).click()        write_log(<span class="hljs-string">&#x27;成功进入预定界面&#x27;</span>)        <span class="hljs-comment"># 进入场地预约界面</span>        driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;main&#x27;]/ul/li[2]/a&quot;</span>).click()        write_log(<span class="hljs-string">&#x27;进入场地预约界面&#x27;</span>)        <span class="hljs-comment"># 规定8点开始预定</span>        write_log(<span class="hljs-string">&quot;检查是否到达可预订时间……&quot;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            now = datetime.datetime.now()            <span class="hljs-keyword">if</span> (now.hour &gt;= <span class="hljs-number">7</span> <span class="hljs-keyword">and</span> now.minute &gt;= <span class="hljs-number">40</span> <span class="hljs-keyword">and</span> now.second &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> now.hour &gt;= <span class="hljs-number">8</span>:                <span class="hljs-keyword">break</span>            <span class="hljs-comment"># 每隔1秒检查一次</span>            write_log(<span class="hljs-string">&quot;等待系统开启&quot;</span>)            time.sleep(<span class="hljs-number">1</span>)        write_log(<span class="hljs-string">&quot;到达可预约时间点&quot;</span>)        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            <span class="hljs-comment"># 选择光体</span>            driver.find_element_by_xpath(                <span class="hljs-string">&quot;/html/body/div[2]/div/ul/li[1]/div[1]/div[2]/span/a&quot;</span>).click()            <span class="hljs-keyword">try</span>:                element = driver.find_element_by_xpath(                    <span class="hljs-string">&quot;/html/body/div[2]/div[2]/div[2]/div[1]/div[3]&quot;</span>)                <span class="hljs-keyword">break</span>            <span class="hljs-keyword">except</span> NoSuchElementException:                write_log(<span class="hljs-string">&quot;预约系统显示：8：00到24:00才能开始预定，请等待&quot;</span>)                driver.refresh()                write_log(<span class="hljs-string">&quot;刷新中……&quot;</span>)        write_log(<span class="hljs-string">&quot;成功进入光体预约界面&quot;</span>)        <span class="hljs-comment"># 延迟两天，总是订后天的场地</span>        element.click()        driver.find_element_by_xpath(            <span class="hljs-string">&quot;/html/body/div[2]/div[2]/div[2]/div[1]/div[3]&quot;</span>).click()        count = <span class="hljs-number">5</span>        <span class="hljs-keyword">while</span> count &gt;= <span class="hljs-number">0</span>:            count = count - <span class="hljs-number">1</span>            <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(time_order)):                write_log(<span class="hljs-string">&quot;以下是%s的场地预定信息：&quot;</span> % time_str[time_order[ii]-<span class="hljs-number">3</span>])                <span class="hljs-comment"># 1.获取时间Select对象</span>                selector = Select(driver.find_element_by_id(<span class="hljs-string">&quot;starttime&quot;</span>))                <span class="hljs-comment"># 2.选择对应的时间</span>                selector.select_by_index(time_order[ii])                partner = <span class="hljs-string">&#x27;&#x27;</span>                t = threading.Thread(target=input_info, args=(partner, driver))                t.start()                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>):                    info = <span class="hljs-string">&#x27;&#x27;</span>                    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                        info = driver.find_element_by_xpath(changdi_xpath[i]).text                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> info == <span class="hljs-string">&#x27;&#x27;</span>:                            <span class="hljs-keyword">break</span>                    write_log(<span class="hljs-string">&quot;第%d个场地%s------&quot;</span> % (order[i], info))                    <span class="hljs-comment"># 找到可以预约的场地了</span>                    <span class="hljs-keyword">if</span> info == <span class="hljs-string">&quot;可预约&quot;</span>:                        <span class="hljs-comment"># 点击可以预约的场地，变换标志为1代表找到场地</span>                        t.join()                        driver.find_element_by_xpath(changdi_xpath[i]).click()                        flag = <span class="hljs-number">1</span>                        write_log(<span class="hljs-string">&quot;找到可预约的场地&quot;</span>)                        <span class="hljs-keyword">break</span>                <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:                    <span class="hljs-keyword">break</span>            <span class="hljs-comment"># 有场地</span>            <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:                <span class="hljs-comment"># 5、点击预约按钮</span>                driver.find_element_by_xpath(                    <span class="hljs-string">&quot;/html/body/div[2]/div[2]/div[2]/form/div[3]/input[3]&quot;</span>).click()                write_log(<span class="hljs-string">&quot;正在进行预约……&quot;</span>)                <span class="hljs-comment"># 6、进入预约界面点击确定，有钱就扣钱成功了。</span>                <span class="hljs-keyword">try</span>:                    <span class="hljs-comment"># driver.find_element_by_xpath(</span>                    <span class="hljs-comment">#     &quot;/html/body/div[2]/div[2]/form/div/div[3]/input[2]&quot;).click()</span>                    <span class="hljs-comment"># write_log(&quot;正在扣费，等待系统响应……&quot;)</span>                    <span class="hljs-comment"># 根据返还回来的消息判断是否成功预定。</span>                    sleep(<span class="hljs-number">2</span>)                    <span class="hljs-keyword">try</span>:                        order_info = driver.find_element_by_xpath(                            <span class="hljs-string">&quot;/html/body/div[2]/div[2]/form/div/div[1]/table/tbody/tr/td[2]&quot;</span>).text                        judge_str = <span class="hljs-string">&quot;您已预约成功&quot;</span>                        <span class="hljs-keyword">if</span> order_info.find(judge_str) &gt;= <span class="hljs-number">0</span>:                            write_log(<span class="hljs-string">&quot;恭喜预约成功!&quot;</span>)                            <span class="hljs-keyword">break</span>                        <span class="hljs-keyword">else</span>:                            write_log(<span class="hljs-string">&quot;预约失败，账号里是不是没有钱？&quot;</span>)                            <span class="hljs-keyword">break</span>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                        write_log(<span class="hljs-string">&quot;没找到预约成功消息。错误消息提示如下：&quot;</span>)                        exstr = traceback.format_exc()                        write_log(exstr)                        <span class="hljs-keyword">break</span>                <span class="hljs-keyword">except</span>:                    <span class="hljs-keyword">continue</span>            <span class="hljs-keyword">else</span>:                write_log(<span class="hljs-string">&quot;没有找到可以预定的场地&quot;</span>)                <span class="hljs-keyword">break</span>    sleep(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 睡10秒，等待下载完成，这个可以改一下</span>    driver.quit()  <span class="hljs-comment"># 关闭浏览器</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_log</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>    now = datetime.datetime.now()    print(<span class="hljs-string">&#x27;%s----%s&#x27;</span> % (now, <span class="hljs-built_in">str</span>))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">input_info</span>(<span class="hljs-params">partner, driver</span>):</span>    driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[2]/div[2]/div[2]/form/table/tbody/tr[4]/td/input&#x27;</span>).click()    driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/div[3]/div[2]/div/div[2]/table/tbody/tr[2]/td[3]&#x27;</span>).click()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_driver</span>(<span class="hljs-params">driver_num</span>):</span>    options = webdriver.FirefoxOptions()    options.add_argument(<span class="hljs-string">&#x27;--disable-gpu&#x27;</span>)  <span class="hljs-comment"># 这里是禁用GPU加速</span>    driver = webdriver.Firefox(options=options)    <span class="hljs-keyword">return</span> driver<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    order_play()    command = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入任意键退出&gt;&gt;&#x27;</span>)</code></pre></div><h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><hr><p>曾经给PT的小伙伴介绍过这个程序，结果他也是喜欢打羽毛球也需要给实验室定场地的，直接说了一声卧槽。。。。然后他也写了一个GUI版本的，哈哈~~</p><h3 id="再次折腾"><a href="#再次折腾" class="headerlink" title="再次折腾"></a>再次折腾</h3><hr><p>时至今日，好像羽毛球场地又不够用了，大概是因为军训篮球场地被征用，西体也不开。昨天定了一个下午场，课题组的人问能不能抢晚上的场地。所以抱着试试的心态就开始了。</p><p>首先需要了解流程，还是使用selenium，还是使用windows计划，但是验证码怎么破解呢？</p><p>查看源码，验证码对应的是一个链接，每刷新一次就会生成一个动态code：<a href="https://pass.hust.edu.cn/cas/code%E3%80%82">https://pass.hust.edu.cn/cas/code。</a></p><p>所以不能解析地址来下载图片，那么直接截图呢？也不太行，动图是动的，经常一帧下来有的图没有，这样需要截好几张图。那么怎么把动图下载呢？</p><p>暴力直接：右键另存为，下边是部分代码。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<span class="hljs-keyword">import</span> pyautogui<span class="hljs-keyword">import</span> pyperclip<span class="hljs-comment"># 用xpath定位到图片并且移动鼠标到图片上</span>pic = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;codeImage&quot;]&#x27;</span>) action = ActionChains(driver).move_to_element(pic)<span class="hljs-comment"># 右键点击该元素，并敲击v进行保存</span>action.context_click(pic) action.perform()pyautogui.typewrite([<span class="hljs-string">&#x27;v&#x27;</span>])  <span class="hljs-comment"># 敲击V进行保存</span>time.sleep(<span class="hljs-number">1</span>)<span class="hljs-comment"># 为了保存到指定目录，我们先复制目录，然后粘贴到保存窗口</span>pyperclip.copy(code_path)pyautogui.hotkey(<span class="hljs-string">&#x27;ctrlleft&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>)  <span class="hljs-comment"># 粘贴</span><span class="hljs-comment"># 有时候回车不太好使，就写一个循环不停回车~当图片下载下来之后，跳出</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    pyautogui.press(<span class="hljs-string">&#x27;enter&#x27;</span>)    <span class="hljs-keyword">if</span> os.path.exists(code_path):        <span class="hljs-keyword">break</span>        sleep(<span class="hljs-number">1</span>)</code></pre></div><h3 id="图形处理"><a href="#图形处理" class="headerlink" title="图形处理"></a>图形处理</h3><hr><p>下载之后，怎么解析呢？比如上面那张图，方法有很多，但是基本上都会是分而治之的方案。废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_img_from_gif</span>(<span class="hljs-params">self</span>):</span>    im = Image.<span class="hljs-built_in">open</span>(self.origin_path)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:            current = im.tell()            im.save(self.tmp_img_paths[current])            <span class="hljs-comment">#获取下一帧图片</span>            im.seek(current+<span class="hljs-number">1</span>)    <span class="hljs-keyword">except</span> EOFError:   <span class="hljs-keyword">pass</span></code></pre></div><p><img src="https://www.z4a.net/images/2021/09/14/01.png" alt="01.png"></p><p>逐帧另存之后可以发现是四张图片，那么我们需要将这4张图片再度合成一张图，观察到他们每个图片数字对应的位置不会变，只是颜色差异，那么就可以两两比较，选择颜色最深的作为合成图的对应点的颜色。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 图片大小一致，且是单通道图，针对每一个像素，取像素值小的（颜色越深越小）</span><span class="hljs-comment"># 并且根据经验添加一个阈值，180默认为白的，小于180的就是黑的，用于锐化</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_merge_two_imgs_to_one</span>(<span class="hljs-params">self, path1, path2</span>):</span>    img1 = Image.<span class="hljs-built_in">open</span>(path1)    img2 = Image.<span class="hljs-built_in">open</span>(path2)    <span class="hljs-comment"># 单幅图像尺寸</span>    width, height = img1.size    img_new = Image.new(<span class="hljs-string">&#x27;L&#x27;</span>, (width, height))    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):            px1 = img1.getpixel((x, y))            px2 = img2.getpixel((x, y))            r = <span class="hljs-built_in">min</span>(px1, px2)            <span class="hljs-keyword">if</span> r &gt; <span class="hljs-number">180</span>:                r = <span class="hljs-number">255</span>                <span class="hljs-keyword">else</span>:                    r = <span class="hljs-number">0</span>                    img_new.putpixel((x, y), r)                    img_new.save(self.new_img_path)                  <span class="hljs-comment"># 多张合成的思路是两两比较，写一个循环</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_merge_multi_pictures</span>(<span class="hljs-params">self</span>):</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:            self._merge_two_imgs_to_one(self.tmp_img_paths[i], self.tmp_img_paths[i+<span class="hljs-number">1</span>])         <span class="hljs-keyword">else</span>:            self._merge_two_imgs_to_one(self.new_img_path, self.tmp_img_paths[i+<span class="hljs-number">1</span>])</code></pre></div><p><img src="https://www.z4a.net/images/2021/09/14/new.png" alt="new.png"></p><p>这样就把数字给实化了，全黑，有些干扰的圈圈也不是很要紧，接下来就是把这个图再度拆分，然后分别识别为对应数字。经过测试，该图片为90x58的图，可以拆成4个20x22的子图。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_split_2_four_part</span>(<span class="hljs-params">self</span>):</span>    img = Image.<span class="hljs-built_in">open</span>(self.new_img_path)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):        new_img = Image.new(<span class="hljs-string">&#x27;L&#x27;</span>, (<span class="hljs-number">20</span>, <span class="hljs-number">22</span>))        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>):                new_img.putpixel((x,y), img.getpixel((x+<span class="hljs-number">20</span>*i, <span class="hljs-number">18</span>+y)))        new_img.save(self.number_path[i])</code></pre></div><p><img src="https://www.z4a.net/images/2021/09/14/02.png" alt="02.png"></p><p>这样就可以分成四个子图分别对应预测了。由于策略关系，第一个子图比较靠左，第四个子图比较靠右，基本上有两种思路，再度调整或者分组进行匹配。这里我选择了第二种方案。对于每一个位置截取了一组0-9的数字，比如第一个子图对应的0-9和第四个子图的0-9分开存储，分别对比。</p><p><a href="https://www.z4a.net/image/gZ7MNI"><img src="https://www.z4a.net/images/2021/09/14/03.png" alt="03.png"></a><a href="https://www.z4a.net/image/gZ7hBf"><img src="https://www.z4a.net/images/2021/09/14/04.png" alt="04.png"></a></p><p>可以发现形态还是有差异的~</p><p>接下来就是第一个子图如果生成了一个图，怎么计算它是0-9的具体哪一个数呢？</p><h3 id="图形相似度"><a href="#图形相似度" class="headerlink" title="图形相似度"></a>图形相似度</h3><hr><p>图形相似度算法很多，这里用的是最简单的dhash算法。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_dHash</span>(<span class="hljs-params">self, img_path</span>):</span>    hash_str = <span class="hljs-string">&#x27;&#x27;</span>    img = Image.<span class="hljs-built_in">open</span>(img_path)    width, height = img.size    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width-<span class="hljs-number">1</span>):        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):            <span class="hljs-keyword">if</span> img.getpixel((i, j)) &gt; img.getpixel((i+<span class="hljs-number">1</span>, j)):                hash_str += <span class="hljs-string">&#x27;1&#x27;</span>            <span class="hljs-keyword">else</span>:                hash_str += <span class="hljs-string">&#x27;0&#x27;</span>    <span class="hljs-keyword">return</span> hash_str<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_cmpHash</span>(<span class="hljs-params">self, hash1, hash2</span>):</span>    n = <span class="hljs-number">0</span>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(hash1) != <span class="hljs-built_in">len</span>(hash2):        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>        <span class="hljs-comment"># 遍历判断</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(hash1)):        <span class="hljs-comment"># 不相等则n计数+1，n最终为相似度</span>        <span class="hljs-keyword">if</span> hash1[i] != hash2[i]:            n = n + <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> n</code></pre></div><p>这样遍历就可以预测出来了~~</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_predict_code</span>(<span class="hljs-params">self</span>):</span>    predict_number = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):        predict_code = []        hash1 = self._dHash(self.number_path[i])        compare_path = os.path.join(self.img_dir, <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>))        files = os.listdir(compare_path)        <span class="hljs-keyword">for</span> index, file <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(files):            hash2 = self._dHash(os.path.join(compare_path, file))            cmp_hash = self._cmpHash(hash1, hash2)            predict_code.append(cmp_hash)        predict_number += <span class="hljs-built_in">str</span>(predict_code.index(<span class="hljs-built_in">min</span>(predict_code)))    <span class="hljs-keyword">return</span> predict_number<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self</span>):</span>    self._get_img_from_gif()    self._merge_multi_pictures()    self._split_2_four_part()    print(self._predict_code())</code></pre></div><p><img src="https://www.z4a.net/images/2021/09/14/05.png" alt="05.png"></p><p>最后输出3515，成功了。</p><h3 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h3><hr><p>然后就是代码整合一下，在登录页面整合右键下载图片，逐帧转换，锐化合成，拆分子图，相似度对比预测验证码。然后就可以填写进行登录以及后续操作了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>这个例子比较简单的方面是图片的数字位置固定不变，不需要大量的机器学习去预测，只需要计算相似度就可以得到很好地结果，当然了，作为一个抢订羽毛球的小程序，就不扯那么高大上的东西了。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.codeleading.com/article/15774561443/">Python selenium 使用 pyautogui 库实现 右键保存图片 ，并将图片保存到指定文件夹</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.cnblogs.com/easyidea/p/10520354.html">Python将GIF图片转换成png图片帧</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.malaoshi.top/show_1EF49ffVzKm9.html">python读取灰度图（单通道图）、RGB图（三通道图），并转成numpy数组格式</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/68215900">python图像识别———图片相似度计算</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>爱好</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XstreamDL-CLI简单尝试和使用教程</title>
    <link href="/XstreamDL-CLI%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/XstreamDL-CLI%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>群内成员有会抓web-dl的，工具也挺多了，就是下载器如何用盒子下载，有人找了个GitHub地址丢给我，折腾了一晚上，虽说不是很懂，但是环境之类的总算弄好了。记录一下过程。</p><p>链接：<a href="https://github.com/xhlove/XstreamDL-CLI">https://github.com/xhlove/XstreamDL-CLI</a></p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><hr><ol><li>克隆项目到盒子。</li></ol><p><code>git clone https://github.com/xhlove/XstreamDL-CLI.git</code></p><ol start="2"><li>因为工具基于python3.7.4+的，所以得看看当前的python3版本</li></ol><p><code>python3 --version</code></p><ol start="3"><li>如果显示的版本低于3.7.4，那么就需要升级了，本次选择3.7.5版本的。</li></ol><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载python包解压并进入</span>wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgztar zxvf Python-3.7.5.tgz<span class="hljs-built_in">cd</span> Python-3.7.5<span class="hljs-comment"># 配置，编译，安装</span>sudo apt-get install libffi-dev./configure --with-ssl --enable-sharedmakesudo make install<span class="hljs-comment"># 删除旧的软连接</span>sudo rm -rf /usr/bin/python3sudo rm -rf /usr/bin/pip3<span class="hljs-comment"># 添加python3的软链接</span>sudo ln -s /usr/<span class="hljs-built_in">local</span>/bin/python3.7 /usr/bin/python3<span class="hljs-comment"># 添加 pip3 的软链接</span>sudo ln -s /usr/<span class="hljs-built_in">local</span>/bin/pip3.7 /usr/bin/pip3<span class="hljs-comment"># 再度查看版本号</span>python3 --version<span class="hljs-comment"># 如果报错：python3: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory</span>sudo apt-get install libpython3.7<span class="hljs-comment"># 然后就可以看到python3升级成功了</span></code></pre></div><ol start="4"><li>进人XstreamDL-CLI根目录进行环境配置：</li></ol><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install -r requirements.txt<span class="hljs-comment"># 如果报错：subprocess.CalledProcessError: Command &#x27;(&#x27;lsb_release&#x27;, &#x27;-a&#x27;)&#x27; returned non-zero exit status 1.</span>sudo ln -s /usr/share/pyshared/lsb_release.py /usr/<span class="hljs-built_in">local</span>/lib/python3.7/site-packages/lsb_release.py<span class="hljs-comment"># 提示pip版本低</span>ARNING: You are using pip version 19.2.3, however version 21.2.4 is available.You should consider upgrading via the <span class="hljs-string">&#x27;pip install --upgrade pip&#x27;</span> <span class="hljs-built_in">command</span>.<span class="hljs-comment"># 运行下述命令进行升级</span>pip3 install --upgrade pip<span class="hljs-comment"># 然后进行python包的安装</span>pip3 install -r requirements.txt</code></pre></div><ol start="5"><li>pyinstaller打包：由于盒子没有界面，所以选择进行打包丢到/usr/bin目录下作为命令行工具使用。</li></ol><div class="hljs code-wrapper"><pre><code class="hljs bash">pip3 install pyinstallerpyinstaller -i logo.ico -n XstreamDL-CLI_v1.2.9 -F XstreamDL_CLI/__main__.py<span class="hljs-comment"># 如果出现ModuleNotFoundError: No module named &#x27;_ctypes&#x27;</span>sudo apt-get install libffi-dev<span class="hljs-comment"># 然后重新编译安装python3...所以我在后边又把这一句补回去了。。</span><span class="hljs-comment"># 打包完成会提示成功并且在XstreamDL-CLI根目录出现一个dist目录</span>INFO: Building EXE because EXE-00.toc is non existentINFO: Building EXE from EXE-00.tocINFO: Appending archive to ELF section <span class="hljs-keyword">in</span> EXE /home/guai/XstreamDL-CLI/dist/XstreamDL-CLI_v1.2.9INFO: Building EXE from EXE-00.toc completed successfully.<span class="hljs-comment"># dist目录下有一个可执行文件：</span>ls dist/XstreamDL-CLI_v1.2.9<span class="hljs-comment"># 然后把这个文件拷贝到/usr/bin</span>cp ./dist/XstreamDL-CLI_v1.2.9 /usr/bin/XstreamDL-CLI<span class="hljs-comment"># 以后就可以执行该命令行了</span>XstreamDL-CLI，输入Xs可以按tab键补全。</code></pre></div><ol start="6"><li>帮助文档：XstreamDL-CLI -h即可召唤帮助文档</li></ol><div class="hljs code-wrapper"><pre><code class="hljs python">version <span class="hljs-number">1.2</span><span class="hljs-number">.9</span>, A downloader that download the HLS/DASH stream.usage: XstreamDL-CLI [OPTION]... URL/FILE/FOLDER...A downloader that download the HLS/DASH streampositional arguments:  URI                   URL/FILE/FOLDER stringoptional arguments:  -v, --version         Print version <span class="hljs-keyword">and</span> exit  -h, --<span class="hljs-built_in">help</span>            Print <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit  -name NAME, --name NAME                        Specific stream base name  -base BASE_URL, --base-url BASE_URL                        Set base url <span class="hljs-keyword">for</span> Stream  -save-<span class="hljs-built_in">dir</span> SAVE_DIR, --save-<span class="hljs-built_in">dir</span> SAVE_DIR                        Set save <span class="hljs-built_in">dir</span> <span class="hljs-keyword">for</span> Stream  --ffmpeg FFMPEG       Set executable ffmpeg path  --mp4decrypt MP4DECRYPT                        Set executable mp4decrypt path  --select              Show stream to select <span class="hljs-keyword">and</span> download, default <span class="hljs-keyword">is</span> to                        download <span class="hljs-built_in">all</span>  --disable-force-close                        Default make <span class="hljs-built_in">all</span> connections closed securely, but it                        will make DL speed slower  --limit-per-host LIMIT_PER_HOST                        Increase the value <span class="hljs-keyword">if</span> your connection to the stream                        host <span class="hljs-keyword">is</span> poor, suggest &gt;<span class="hljs-number">100</span> <span class="hljs-keyword">for</span> DASH stream  --user-agent USER_AGENT                        <span class="hljs-built_in">set</span> user-agent headers <span class="hljs-keyword">for</span> request  --referer REFERER     <span class="hljs-built_in">set</span> custom referer <span class="hljs-keyword">for</span> request  --headers HEADERS     <span class="hljs-built_in">set</span> custom headers <span class="hljs-keyword">for</span> request, separators <span class="hljs-keyword">is</span> |, e.g.                        <span class="hljs-string">&quot;header1:value1|header2:value2&quot;</span>  --overwrite           Overwrite output files  --raw-concat          Concat content <span class="hljs-keyword">as</span> raw  --disable-auto-concat                        Disable auto-concat  --enable-auto-delete  Enable auto-delete files after concat success  --disable-auto-decrypt                        Disable auto-decrypt segments before dump to disk  --key KEY             &lt;<span class="hljs-built_in">id</span>&gt;:&lt;k&gt;, &lt;<span class="hljs-built_in">id</span>&gt; <span class="hljs-keyword">is</span> either a track ID <span class="hljs-keyword">in</span> decimal <span class="hljs-keyword">or</span> a                        <span class="hljs-number">128</span>-bit KID <span class="hljs-keyword">in</span> <span class="hljs-built_in">hex</span>, &lt;k&gt; <span class="hljs-keyword">is</span> a <span class="hljs-number">128</span>-bit key <span class="hljs-keyword">in</span> <span class="hljs-built_in">hex</span>  --b64key B64KEY       base64 <span class="hljs-built_in">format</span> aes key, only <span class="hljs-keyword">for</span> HLS standard                        AES-<span class="hljs-number">128</span>-CBC encryption  --hexiv HEXIV         <span class="hljs-built_in">hex</span> <span class="hljs-built_in">format</span> aes iv  --proxy PROXY         use http proxy, e.g. http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">1080</span>  --split               Dash option, split one stream to multi sections  --repl                REPL mode</code></pre></div><p><strong>注意点：合并需要先将ffmpeg置于环境变量。</strong></p><ol start="7"><li>使用实例：</li></ol><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 一般用法</span>XstreamDL-CLI --raw-concat --b64key oKi/hwKVuLveo/hISX1PQw== --hexiv b3d5ca56926d49d8e96b70aa5c7b358e --name 第一节总论  --save-dir /home/guai/Downloads/ https://hls.videocc.net/d06ae002cb/2/d06ae002cb4a0bed78fb912c874fdbb2_2.m3u8<span class="hljs-comment"># 其中--raw-concat表示要合并所有的分段， --b64key和 --hexiv参数不是很懂，欢迎大家讨论。-</span><span class="hljs-comment"># -name表示合并之后的视频名称，--save-dir表示下载路径，最后一个是m3u8的链接地址。</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># ISM EXAMPLE</span>XstreamDL-CLI --select --overwrite http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism/Manifest<span class="hljs-comment"># drm ism content</span>XstreamDL-CLI --disable-auto-concat --select --overwrite https://akamaicdn.hbogo.eu/5acb29be-eba0-46b1-8646-0e8354ff9cda_hbo/COMP/140258727_adr_comp_0cc2c364-5dba-4f1c-96f9-5640f98f5bbb_3400000_v2.ism/manifest</code></pre></div><p>其他更多详情请查看GitHub链接，也可以下载exe桌面应用程序。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>你不努力，别人也会催着你努力，加油！！！</p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>油猴脚本碰到ajax如何实现无刷新多次执行</title>
    <link href="/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E7%A2%B0%E5%88%B0ajax%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%88%B7%E6%96%B0%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C/"/>
    <url>/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC%E7%A2%B0%E5%88%B0ajax%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%88%B7%E6%96%B0%E5%A4%9A%E6%AC%A1%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话分两头讲，首先是因为蝴蝶关闭比较久，然后断种比较多，虽然最近IYUU已经开始支持了，但是保种实在是不理想，所以我们希望借鉴其他站点的管理思路，对旧的、断种严重的、续种困难的种子进行清理。</p><p>其次眼看着七万多的种子，每次删一个种子要弄好几次，任谁都迷糊。。。所以，决定写个脚本，一页一页弄~</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><hr><p>首先按照以往的经验，删除如果要点击好几次我就直接把它的请求拉过来，然后重写点击事件完事了~</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name         hudbt-delete</span><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><span class="hljs-comment">// @version      0.1</span><span class="hljs-comment">// @description  try to take over the world!</span><span class="hljs-comment">// @author       You</span><span class="hljs-comment">// @match        https://hudbt.hust.edu.cn/torrents.php?inclbookmarked=0&amp;incldead=1&amp;spstate=0&amp;page=*</span><span class="hljs-comment">// @icon         https://www.google.com/s2/favicons?domain=hust.edu.cn</span><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><span class="hljs-comment">// ==/UserScript==</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">// 首先NP架构下都需要一定权限才会展示删除按钮，所以一般人应该是找不到滴~</span>    $(<span class="hljs-string">&#x27;#torrents&#x27;</span>).find(<span class="hljs-string">&#x27;tr:gt(0)&#x27;</span>).each(<span class="hljs-function">(<span class="hljs-params">index, e</span>)=&gt;</span>&#123;        <span class="hljs-keyword">var</span> id = $(e).find(<span class="hljs-string">&#x27;a.staff-quick-delete&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>).match(<span class="hljs-regexp">/id=(\d+)/</span>)[<span class="hljs-number">1</span>];        <span class="hljs-comment">// 去除跳转按钮，关掉需要点击好几次的面板直接添加点击事件</span>        $(e).find(<span class="hljs-string">&#x27;a.staff-quick-delete&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;            event.preventDefault();            <span class="hljs-comment">//提交请求并解析返回结果</span>            <span class="hljs-keyword">var</span> url = <span class="hljs-string">`https://hudbt.hust.edu.cn/cake/torrents/delete/<span class="hljs-subst">$&#123;id&#125;</span>.json`</span>;            GM_xmlhttpRequest(&#123;                <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>,                <span class="hljs-string">&quot;url&quot;</span>: url,                <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;_method=DELETE&amp;data%5BreasonType%5D=0&amp;data%5BreasonDetail%5D=&#x27;</span>),                <span class="hljs-string">&#x27;headers&#x27;</span>:&#123;                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,                    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>                &#125;,                <span class="hljs-string">&quot;onload&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;                    <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">JSON</span>.parse(res.responseText);                    <span class="hljs-keyword">if</span> (result.success) &#123;                        location.reload();                    &#125; <span class="hljs-keyword">else</span> &#123;                        alert(<span class="hljs-string">&#x27;删种失败！！&#x27;</span>)                    &#125;                &#125;            &#125;);        &#125;);    &#125;);&#125;)();</code></pre></div><p>乍一看，没什么毛病，很简单。但是在跑的过程中，遇到了一些bug，蝴蝶上一页下一页用的是ajax，无刷新页面，内容却换了。我们的脚本就第一次执行，后来出来的内容该点击几次还是点击几次。</p><p>经过几天的搜索尝试：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onhashchange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;  <span class="hljs-built_in">console</span>.log(event);&#125;<span class="hljs-comment">//或者</span><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;hashchange&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;   <span class="hljs-built_in">console</span>.log(event);&#125;)<span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name     _Amazon Search, alter results</span><span class="hljs-comment">// @include  http://www.amazon.com/s/*</span><span class="hljs-comment">// @require  http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js</span><span class="hljs-comment">// @require  https://gist.github.com/raw/2625891/waitForKeyElements.js</span><span class="hljs-comment">// @grant    GM_addStyle</span><span class="hljs-comment">// ==/UserScript==</span><span class="hljs-comment">/*- The @grant directive is needed to work around a design change</span><span class="hljs-comment">    introduced in GM 1.0.   It restores the sandbox.</span><span class="hljs-comment">*/</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addCustomSearchResult</span> (<span class="hljs-params">jNode</span>) </span>&#123;    <span class="hljs-comment">//***** YOUR CODE HERE *****</span>    jNode.prepend (        <span class="hljs-string">&#x27;Buy my stuff, instead!&#x27;</span>    );&#125;waitForKeyElements (<span class="hljs-string">&quot;#atfResults&quot;</span>, addCustomSearchResult);</code></pre></div><p>上述借鉴下来，都不好使，但是明确了一个想法，就是必须要添加事件监听，捕捉到ajax发生了，然后将删除按钮的点击事件覆盖掉。</p><p>猛然间看到一个：document.addEventListener(‘DOMNodeInserted’, function() { alert(‘hi’) }, false); 请注意，该事件将由页面结构中的任何更改触发，因此您必须检查自己是否定位了正确的更改。</p><p>直接试了一下，给我一直反复的输出hi。。。不过也证明有用，因为我要做的就是这个，ajax导致页面改变，我就判断页面改变了，执行一次脚本。那么如何判断呢？也就是页面刷新之后的差异是什么呢？</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name         hudbt-delete</span><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><span class="hljs-comment">// @version      0.2</span><span class="hljs-comment">// @description  try to take over the world!</span><span class="hljs-comment">// @author       tomorrow505</span><span class="hljs-comment">// @match        https://hudbt.hust.edu.cn/torrents.php*</span><span class="hljs-comment">// @icon         https://www.google.com/s2/favicons?domain=hust.edu.cn</span><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><span class="hljs-comment">// ==/UserScript==</span><span class="hljs-comment">//首先将函数封装起来，每次执行就是把页面删除按钮的点击事件覆盖掉</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_click_function</span>(<span class="hljs-params"></span>)</span>&#123;    $(<span class="hljs-string">&#x27;#torrents&#x27;</span>).find(<span class="hljs-string">&#x27;tr:gt(0)&#x27;</span>).each(<span class="hljs-function">(<span class="hljs-params">index, e</span>)=&gt;</span>&#123;        <span class="hljs-keyword">var</span> id = $(e).find(<span class="hljs-string">&quot;a.staff-quick-delete&quot;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>).match(<span class="hljs-regexp">/id=(\d+)/</span>)[<span class="hljs-number">1</span>];        $(e).find(<span class="hljs-string">&#x27;a.staff-quick-delete&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).addClass(<span class="hljs-string">&#x27;select_torrent&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ee</span>)</span>&#123;            ee.preventDefault();            <span class="hljs-keyword">var</span> url = <span class="hljs-string">`https://hudbt.hust.edu.cn/cake/torrents/delete/<span class="hljs-subst">$&#123;id&#125;</span>.json`</span>;            GM_xmlhttpRequest(&#123;                <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>,                <span class="hljs-string">&quot;url&quot;</span>: url,                <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;_method=DELETE&amp;data%5BreasonType%5D=0&amp;data%5BreasonDetail%5D=&#x27;</span>),                <span class="hljs-string">&#x27;headers&#x27;</span>:&#123;                    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,                    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>                &#125;,                <span class="hljs-string">&quot;onload&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;                    <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">JSON</span>.parse(res.responseText);                    <span class="hljs-keyword">if</span> (result.success) &#123;                        location.reload();                    &#125; <span class="hljs-keyword">else</span> &#123;                        alert(<span class="hljs-string">&#x27;删种失败！！&#x27;</span>)                    &#125;                &#125;            &#125;);        &#125;);    &#125;);&#125;<span class="hljs-comment">// 判断什么时候执行？我做了一个设计，就是执行一次我将页面的删除按钮添加一个class，如果没有这个class的元素，我就执行一遍，有了就不执行了。</span><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMNodeInserted&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">if</span>($(<span class="hljs-string">&#x27;.select_torrent&#x27;</span>).length == <span class="hljs-number">0</span>)&#123;        add_click_function();    &#125;&#125;, <span class="hljs-literal">false</span>);</code></pre></div><h3 id="衍生需求"><a href="#衍生需求" class="headerlink" title="衍生需求"></a>衍生需求</h3><hr><p>一次性点击一个删除仿佛不太够，那么我们需要增加批量删除按钮。往上再写一个版本：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ==UserScript==</span><span class="hljs-comment">// @name         hudbt-delete</span><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><span class="hljs-comment">// @version      0.3</span><span class="hljs-comment">// @description  try to take over the world!</span><span class="hljs-comment">// @author       tomorrow505</span><span class="hljs-comment">// @match        https://hudbt.hust.edu.cn/torrents.php*</span><span class="hljs-comment">// @icon         https://www.google.com/s2/favicons?domain=hust.edu.cn</span><span class="hljs-comment">// @grant        GM_xmlhttpRequest</span><span class="hljs-comment">// ==/UserScript==</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-comment">// 页面增加一列，列首删除按钮可以点击进行删种</span>    $(<span class="hljs-string">&#x27;#torrents&#x27;</span>).find(<span class="hljs-string">&#x27;thead&#x27;</span>).find(<span class="hljs-string">&#x27;tr:first&#x27;</span>).append(<span class="hljs-string">`&lt;th class=&quot;unsortable&quot;&gt;&lt;a id=&quot;delete_torrents&quot;&gt;删种&lt;/a&gt;&lt;/th&gt;`</span>);    $(<span class="hljs-string">&#x27;#delete_torrents&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        $(<span class="hljs-string">&#x27;input.select_torrent:checked&#x27;</span>).each(<span class="hljs-function">(<span class="hljs-params">index, e</span>)=&gt;</span>&#123;            <span class="hljs-keyword">var</span> torrent_id = $(e).attr(<span class="hljs-string">&#x27;title&#x27;</span>);            delete_torrent(torrent_id);        &#125;)    &#125;);        <span class="hljs-comment">// 封装删种操作，传入参数为种子id</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete_torrent</span>(<span class="hljs-params">torrent_id</span>) </span>&#123;        <span class="hljs-keyword">var</span> url = <span class="hljs-string">`https://hudbt.hust.edu.cn/cake/torrents/delete/<span class="hljs-subst">$&#123;torrent_id&#125;</span>.json`</span>;        GM_xmlhttpRequest(&#123;            <span class="hljs-string">&quot;method&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>,            <span class="hljs-string">&quot;url&quot;</span>: url,            <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&#x27;_method=DELETE&amp;data%5BreasonType%5D=0&amp;data%5BreasonDetail%5D=&#x27;</span>),            <span class="hljs-string">&#x27;headers&#x27;</span>:&#123;                <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,                <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>            &#125;,            <span class="hljs-string">&quot;onload&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;                <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">JSON</span>.parse(res.responseText);                <span class="hljs-keyword">if</span> (result.success) &#123;                    <span class="hljs-comment">// 执行成功之后将种子id对应的行删除掉</span>                    $(<span class="hljs-string">`input[title=<span class="hljs-subst">$&#123;torrent_id&#125;</span>]`</span>).parent().remove();                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`种子<span class="hljs-subst">$&#123;torrent_id&#125;</span>已经成功删除！！！`</span>);                &#125; <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`种子<span class="hljs-subst">$&#123;torrent_id&#125;</span>删除失败！！！`</span>);                    <span class="hljs-built_in">console</span>.log(result);                &#125;            &#125;        &#125;);    &#125;        <span class="hljs-comment">// 每一行的最后一列增加一个复选框，勾选之后点击删除即执行删除操作</span>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fireOnNewPage</span> (<span class="hljs-params"></span>) </span>&#123;        $(<span class="hljs-string">&#x27;#torrents&#x27;</span>).find(<span class="hljs-string">&#x27;tr:gt(0)&#x27;</span>).each(<span class="hljs-function">(<span class="hljs-params">index, e</span>)=&gt;</span>&#123;            <span class="hljs-keyword">var</span> id = $(e).find(<span class="hljs-string">&#x27;a.staff-quick-delete&#x27;</span>).attr(<span class="hljs-string">&#x27;href&#x27;</span>).match(<span class="hljs-regexp">/id=(\d+)/</span>)[<span class="hljs-number">1</span>];            $(e).append(<span class="hljs-string">`&lt;input type=&quot;checkbox&quot; title=<span class="hljs-subst">$&#123;id&#125;</span> value=&quot;yes&quot; class=&quot;select_torrent&quot; style=&quot;margin-top: 50%;&quot; &gt;`</span>)        &#125;);    &#125;        <span class="hljs-comment">// 页面监听，主要针对ajax来的</span>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMNodeInserted&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span>($(<span class="hljs-string">&#x27;.select_torrent&#x27;</span>).length == <span class="hljs-number">0</span>)&#123;            fireOnNewPage();        &#125;    &#125;, <span class="hljs-literal">false</span>);    &#125;)();</code></pre></div><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><hr><p>如此就实现了一个简单的ajax下，油猴无刷新脚本多次执行了，have fun！！！</p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>油猴</tag>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python+企业微信API实现盒子端deluge完成后自动推送</title>
    <link href="/Python-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1API%E5%AE%9E%E7%8E%B0%E7%9B%92%E5%AD%90%E7%AB%AFdeluge%E5%AE%8C%E6%88%90%E5%90%8E%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/"/>
    <url>/Python-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1API%E5%AE%9E%E7%8E%B0%E7%9B%92%E5%AD%90%E7%AB%AFdeluge%E5%AE%8C%E6%88%90%E5%90%8E%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>因为有部分PTER希望实现下载完成后推送进行抢发的需求，以前写过发邮件的代码，这次想着弄个不一样的，就折腾了一下午+一晚上简单实现了标题的内容。</p><p>主要是定时监控盒子端deluge客户端完成下载之后进行企业微信的推送。话不多说，直接上过程。</p><h3 id="企业微信设置"><a href="#企业微信设置" class="headerlink" title="企业微信设置"></a>企业微信设置</h3><hr><p>网上材料也有蛮多，踩坑也有一些的。一部分基于微信的发送消息，看看网上找到的代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<span class="hljs-keyword">import</span> itchatlog = logging.getLogger(__name__)<span class="hljs-comment"># itchat 微信官方教程：https://itchat.readthedocs.io/zh/latest/</span><span class="hljs-comment"># 微信登录 登录时如果断网，则此程序直接停止 启动热登录，并且生成 命令行 登录二维码</span>itchat.auto_login(hotReload=<span class="hljs-literal">True</span>, enableCmdQR=<span class="hljs-number">2</span>)<span class="hljs-comment"># 保持心跳状态，防止自动退出登录</span>itchat.start_receiving()<span class="hljs-comment"># 获取群聊,注意群 必须保存到通讯录，否则可能会找不到群</span>itchat.get_chatrooms(update=<span class="hljs-literal">True</span>)room = itchat.search_chatrooms(<span class="hljs-string">&#x27;python&#x27;</span>)<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(room) == <span class="hljs-number">0</span>:    log.error(<span class="hljs-string">&#x27;没有找到群信息&#x27;</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-keyword">try</span>:        iRoom = room[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;UserName&#x27;</span>]        <span class="hljs-comment"># 发送消息</span>        result = itchat.send(<span class="hljs-string">&#x27;send message&#x27;</span>, iRoom)        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;BaseResponse&#x27;</span>][<span class="hljs-string">&#x27;ErrMsg&#x27;</span>] == <span class="hljs-string">&#x27;请求成功&#x27;</span>:                log.info(<span class="hljs-string">&#x27;send wechat success&#x27;</span>)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            print(<span class="hljs-string">&#x27;resolve wechat result fail,result is :&#123;&#125;,error is &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(result, e))    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        print(<span class="hljs-string">&#x27;wechat send message fail,reason is :&#123;&#125; &#x27;</span>.<span class="hljs-built_in">format</span>(e))</code></pre></div><p>需要生成命令行登录二维码，如果部署在盒子端，我希望每20秒运行一次，都要获取一次链接扫码登录，基本不现实，所以pass掉了~~~</p><p>所以选择了企业微信的消息推送。操作流程如下：</p><ul><li><p> 先开通企业微信，个人开通即可，但是验证会比较麻烦，写教程的时候并没有验证。申请地址 <a href="https://work.weixin.qq.com/">https://work.weixin.qq.com/</a>  之后从我的企业面板查找企业 id（在获取访问access-token时需要）</p></li><li><p>获取access-token才能通过api发送消息，其中还需要创建一个应用，通过这个应用来给群发消息，如何对应一个企业群的应用呢？ corpsecret。首先在应用与小程序面板创建应用，然后通过手机企业微信（需要管理员）获取corpsecret。</p></li></ul><p>在使用应用进行推送的时候，可以选择群聊，也可以发送给群里的某一个人，在这之前需要将PTER添加进来，然后应用授权。如下选择新建的一个应用PT推送。</p><p><a href="https://www.z4a.net/image/goKaQw"><img src="https://www.z4a.net/images/2021/08/22/100cff34c4fb70a3e.png" alt="100cff34c4fb70a3e.png"></a></p><p><a href="https://www.z4a.net/image/goKD4N"><img src="https://www.z4a.net/images/2021/08/22/27151b3e1ec9c01ee.png" alt="27151b3e1ec9c01ee.png"></a></p><p>点进来有很多有用的信息，如agentid，点击查看secret会知道corpsecret，后边代码都能用到，然后编辑可以选择企业部门或者部门里的人有权限访问PT推送的消息。悬停在用户名称上还可以看到他的用户名，也是后续代码需要用到的。</p><p>充分掌握了上述信息之后，就可以用代码进行自动发送消息给个人了。还是用网上的例子加以说明：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> requests<span class="hljs-comment"># 请求API响应结果</span>result = requests.get(<span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken&quot;</span>,                      params=&#123;<span class="hljs-string">&#x27;corpid&#x27;</span>: <span class="hljs-string">&#x27;fg&#x27;</span>,      <span class="hljs-comment"># 这里替换成自己的企业id</span>                              <span class="hljs-string">&#x27;corpsecret&#x27;</span>: <span class="hljs-string">&#x27;45&#x27;</span>&#125;) <span class="hljs-comment"># 企业应用的secret</span>access_token = <span class="hljs-literal">None</span><span class="hljs-keyword">if</span> result.status_code != <span class="hljs-number">200</span>:    print(<span class="hljs-string">&#x27;连接到服务器失败&#x27;</span>)<span class="hljs-keyword">else</span>:    result_json = json.loads(result.text)    <span class="hljs-keyword">if</span> result_json[<span class="hljs-string">&#x27;errcode&#x27;</span>] != <span class="hljs-number">0</span>:        print(<span class="hljs-string">&#x27;响应结果不正确&#x27;</span>)    <span class="hljs-keyword">else</span>:        access_token = result_json[<span class="hljs-string">&#x27;access_token&#x27;</span>]        print(access_token)</code></pre></div><p>这一段是用来请求API获取access_token的，那么我们如果想要知道这个token具体包含哪些信息的话，可以上网页上查询：</p><p>网址：<a href="https://open.work.weixin.qq.com/devtool/query">https://open.work.weixin.qq.com/devtool/query</a></p><p><a href="https://www.z4a.net/image/goKKVk"><img src="https://www.z4a.net/images/2021/08/22/36022b6025acc03a8.png" alt="36022b6025acc03a8.png"></a></p><p>大概就是之前我们获取到的信息了。然后我们开始给个人发消息测试：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 发送个人消息，content为发送的内容</span>result = requests.post(<span class="hljs-string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(access_token),                       data=json.dumps(&#123;                           <span class="hljs-string">&quot;touser&quot;</span>: <span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-comment"># 替换成为你刚才获取到的成员ID，单单给某一个人发送</span>                           <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,                           <span class="hljs-string">&quot;agentid&quot;</span>: <span class="hljs-number">23</span>,                           <span class="hljs-string">&quot;text&quot;</span>: &#123;                               <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;你的快递已到，请携带工卡前往邮件中心领取&quot;</span>                           &#125;,                           <span class="hljs-string">&quot;safe&quot;</span>: <span class="hljs-number">0</span>                       &#125;                       ))print(result.text)</code></pre></div><p>经过测试，企业微信的消息应该已经发送了，支持页面内部HTML标签。我们也可以设计一下发送的内容~</p><h3 id="盒子端"><a href="#盒子端" class="headerlink" title="盒子端"></a>盒子端</h3><hr><p>准备工作：首先使用python3运行脚本，模块使用了requests</p><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install python3-pippip3 install requests</code></pre></div><p>既然知道了怎么发送消息，那么我们怎么实时监控deluge的下载状况并且实时的发送消息呢？</p><p>下面给一个网页介绍deluge的相关命令：<a href="https://whatbox.ca/wiki/Deluge_Console_Documentation">https://whatbox.ca/wiki/Deluge_Console_Documentation</a></p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;deluge-console &quot;connect 127.0.0.1:&#123;port&#125; &#123;name&#125; &#123;pwd&#125;; info -v --sort=seeding_time; exit&quot;&#x27;</span></code></pre></div><p>我们用到的就是这样一条。然后就可以通过python调用系统命令获取输出进行正则获取种子详情。我们看看正常输出大概是什么样子：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">Name: 木棘证人.The.Witness.2021.4K.WEB-DL.H265.AAC-PTerWEBID: 82a6804b1e6b57be0de56fed5c4f1f19cffd8a92State: Seeding Up Speed: 0.0 K/sSeeds: 0 (39) Peers: 0 (1) Availability: 1.00 Seed Rank: 51Size: 34.9 G Downloaded: 0 B Uploaded: 1.1 T Share Ratio: 32.80ETA: - Seeding: 2d 10h Active: 1d 19hLast Transfer: 6h 29m Complete Seen: 08/21/2021Tracker: pterclub.comTracker status: Announce OKDownload Folder: /home/guai/deluge/downloadName: 机智的上半场.Ji.Zhi.De.Shang.Ban.Chang.2021.E05-E07.WEB-DL.4K.H265.AAC-PTerWEBID: 35d93424deb5c52da944839f1bb26bba46ca809cState: Seeding Up Speed: 743.8 K/sSeeds: 0 (59) Peers: 2 (2) Availability: 1.94 Seed Rank: 50Size: 4.7 G Downloaded: 0 B Uploaded: 84.9 G Share Ratio: 18.05ETA: - Seeding: 22h 31m Active: 6h 16mLast Transfer: 1s Complete Seen: 08/21/2021Tracker: pterclub.comTracker status: Announce OKDownload Folder: /home/guai/deluge/download</code></pre></div><p>其中最重要的当属seeding_time了，原理就是每N秒看一次，如果某个种子做种时间不超过N秒，那么它就是刚刚完成的种子，当然了，也可以使用一个缓存记录hash之类的，这个可以自己去想。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">_user_info</span>):</span>    post_data = []    command = <span class="hljs-string">&#x27;deluge-console &quot;connect 127.0.0.1:&#123;port&#125; &#123;name&#125; &#123;pwd&#125;; info -v --sort=seeding_time; exit&quot;&#x27;</span>.<span class="hljs-built_in">format</span>(        port=_user_info[<span class="hljs-string">&#x27;port&#x27;</span>],        name=_user_info[<span class="hljs-string">&#x27;name&#x27;</span>],        pwd=_user_info[<span class="hljs-string">&#x27;pwd&#x27;</span>],    )        <span class="hljs-comment"># 调用subprogress模块进行获取输出</span>    data = subprocess.Popen(command, shell=<span class="hljs-literal">True</span>, stdin=subprocess.PIPE,                            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)    <span class="hljs-comment"># 进行种子识别，获取所有种子数量</span>    torrents = <span class="hljs-built_in">str</span>(data.stdout.read().decode()).split(<span class="hljs-string">&#x27;\n\n&#x27;</span>)    logger.info(<span class="hljs-string">&#x27;下载器中有&#123;&#125;个种子！！！&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(torrents)))        <span class="hljs-comment"># 因为我们对种子进行了排序，按照做种时间排序之后做种时间长的在后边</span>    seeding_too_long = <span class="hljs-literal">False</span>    <span class="hljs-keyword">for</span> torrent <span class="hljs-keyword">in</span> torrents:        <span class="hljs-comment"># 发现种子已经做种超过1分钟，就忽略后边的了，节约时间</span>        <span class="hljs-keyword">if</span> seeding_too_long:            <span class="hljs-keyword">break</span>        infos = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, torrent.split(<span class="hljs-string">&#x27;\n&#x27;</span>)))        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> infos:            <span class="hljs-keyword">if</span> info.startswith(<span class="hljs-string">&#x27;ETA:&#x27;</span>):                seeding_time = re.search(<span class="hljs-string">&#x27;Seeding: (.*)Active:&#x27;</span>, info).group(<span class="hljs-number">1</span>)                <span class="hljs-comment"># 判断做种时间在秒级的</span>                <span class="hljs-keyword">if</span> seeding_time.find(<span class="hljs-string">&#x27;d&#x27;</span>) &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> seeding_time.find(<span class="hljs-string">&#x27;m&#x27;</span>) &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> seeding_time.find(<span class="hljs-string">&#x27;s&#x27;</span>) &gt;= <span class="hljs-number">0</span>:                    seeding_time = <span class="hljs-built_in">int</span>(re.search(<span class="hljs-string">&#x27;(\d+)s&#x27;</span>, seeding_time).group(<span class="hljs-number">1</span>))                    <span class="hljs-keyword">if</span> seeding_time &lt;= <span class="hljs-built_in">int</span>(_user_info[<span class="hljs-string">&#x27;time&#x27;</span>]):                        logger.info(<span class="hljs-string">&#x27;&#123;&#125;\n已经下载完成了，请留意！！！&#x27;</span>.<span class="hljs-built_in">format</span>(infos[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&#x27;Name: &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)))                        post_data.append(<span class="hljs-string">&#x27;&#123;&#125;\n已经下载完成了，请留意！！！&#x27;</span>.<span class="hljs-built_in">format</span>(infos[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&#x27;Name: &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)))                <span class="hljs-keyword">else</span>:                    <span class="hljs-keyword">if</span> seeding_time.find(<span class="hljs-string">&#x27;-&#x27;</span>) &lt; <span class="hljs-number">0</span>:                    seeding_too_long = <span class="hljs-literal">True</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(post_data)</code></pre></div><p>上边这个函数通过调用一次deluge-console命令获取到了做种时间在规定时间内的种子进行返回。接下来就可以进行推送了~</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_data</span>(<span class="hljs-params">raw_data, _user_info</span>):</span>    logger.info(<span class="hljs-string">&#x27;获取access-token……&#x27;</span>)    result = requests.get(<span class="hljs-string">&quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken&quot;</span>,                          params=&#123;<span class="hljs-string">&#x27;corpid&#x27;</span>: _user_info[<span class="hljs-string">&#x27;corpid&#x27;</span>],                                  <span class="hljs-string">&#x27;corpsecret&#x27;</span>: _user_info[<span class="hljs-string">&#x27;corpsecret&#x27;</span>]&#125;)    access_token = <span class="hljs-literal">None</span>    <span class="hljs-keyword">if</span> result.status_code != <span class="hljs-number">200</span>:        logger.info(<span class="hljs-string">&#x27;连接到服务器失败&#x27;</span>)    <span class="hljs-keyword">else</span>:        result_json = json.loads(result.text)        <span class="hljs-keyword">if</span> result_json[<span class="hljs-string">&#x27;errcode&#x27;</span>] != <span class="hljs-number">0</span>:            logger.info(<span class="hljs-string">&#x27;响应结果不正确&#x27;</span>)        <span class="hljs-keyword">else</span>:            access_token = result_json[<span class="hljs-string">&#x27;access_token&#x27;</span>]    <span class="hljs-keyword">if</span> access_token:        logger.info(<span class="hljs-string">&#x27;获取access-token成功！！！！&#x27;</span>)        result = requests.post(<span class="hljs-string">&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(access_token),                               data=json.dumps(&#123;                                   <span class="hljs-string">&quot;touser&quot;</span>: _user_info[<span class="hljs-string">&#x27;user&#x27;</span>],                                   <span class="hljs-string">&quot;msgtype&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,                                   <span class="hljs-string">&quot;agentid&quot;</span>: _user_info[<span class="hljs-string">&#x27;agentid&#x27;</span>],                                   <span class="hljs-string">&quot;text&quot;</span>: &#123;                                       <span class="hljs-string">&quot;content&quot;</span>: raw_data,                                   &#125;,                                   <span class="hljs-string">&quot;safe&quot;</span>: <span class="hljs-number">0</span>,                                   <span class="hljs-string">&quot;debug&quot;</span>: <span class="hljs-number">1</span>                               &#125;                               ))        logger.info(result.text)</code></pre></div><p>整个代码我们把所有的配置文件放在了一个json里，方便直接配置，上述的user_info就是配置文件里的内容：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_config</span>():</span>    config_path = os.path.join(base_path, <span class="hljs-string">&#x27;config.json&#x27;</span>)    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(config_path):        logger.info(<span class="hljs-string">&#x27;请确定存在配置文件！！！&#x27;</span>)        <span class="hljs-keyword">return</span> &#123;&#125;    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(config_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:        data = json.loads(f.read())    <span class="hljs-keyword">return</span> data</code></pre></div><p>config.json里边的内容如下：端口，用户名和密码是deluge的信息，时间20，数量级是秒。公司和应用secret以及发送信息接收用户id，部门id之类信息。</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;port&quot;</span>:  <span class="hljs-string">&quot;58846&quot;</span>,      <span class="hljs-attr">&quot;name&quot;</span>:  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-attr">&quot;pwd&quot;</span>:  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-attr">&quot;time&quot;</span>:  <span class="hljs-number">20</span>,     <span class="hljs-attr">&quot;corpid&quot;</span>:  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-attr">&quot;corpsecret&quot;</span>:  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-attr">&quot;user&quot;</span>:  <span class="hljs-string">&quot;&quot;</span>,     <span class="hljs-attr">&quot;agentid&quot;</span>:  <span class="hljs-number">1000002</span>&#125;</code></pre></div><h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><hr><p>上边解决了一次性的运行结果，那么我们如何进行自动化部署呢？这里需要搭配上述配置文件里的时间，20秒的话我希望20秒运行一次，linux下用crontab就好了。直接crontab -e：在最后一行加入：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">* * * * * PYTHONIOENCODING=utf-8 python3 /home/deluge/push_pt_info.py* * * * * ( sleep 20 ; PYTHONIOENCODING=utf-8 python3 /home/deluge/push_pt_info.py )* * * * * ( sleep 40 ; PYTHONIOENCODING=utf-8 python3 /home/deluge/push_pt_info.py )</code></pre></div><ol><li><p><code>* * * * *</code> 表示每分钟执行一次，为了保证20秒一次，我需要一分钟执行三次，所以后边两行代码分别休眠20秒和40秒。</p></li><li><p>PYTHONIOENCODING=utf-8是为了解决python3脚本运行过程中出现的编码问题，这个困扰了我一晚上。详见：<a href="https://blog.csdn.net/TH_NUM/article/details/80685389">https://blog.csdn.net/TH_NUM/article/details/80685389</a></p></li><li><p>在写的时候最后一个路径为脚本的绝对路径。</p></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><hr><p>如果想要使用，找本人获取源代码。将代码和config.json配置好放到固定目录，crontab -e添加即可。</p><p>附上一个效果截图：</p><p><a href="https://www.z4a.net/image/goRAjj"><img src="https://www.z4a.net/images/2021/08/22/4.md.png" alt="4.md.png"></a></p><h3 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h3><hr><p>成员AAA发现可以使用企业微信插件，扫码之后就可以实现微信接收消息，不用下载企业微信了~~~，具体方案直接百度。。妙哉。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>折腾不易，且行且珍惜。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1449326">python发送微信及企业微信消息</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://work.weixin.qq.com/api/doc/90000/90135/90236">发送应用消息</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/TH_NUM/article/details/80685389">Python3中遇到UnicodeEncodeError: ‘ascii’ codec can’t encode characters in ordinal not in range(128)</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://whatbox.ca/wiki/Deluge_Console_Documentation">Deluge Console DocumentationStart the console interface</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/xqt15538076006/article/details/91555885">crontab 每10秒 执行一次脚本</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clash配置自定义规则</title>
    <link href="/clash%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/"/>
    <url>/clash%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%84%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p>由于经常要科学上网，同时为了避免折腾，选择了CFW（（Clash for Windows：Clash 的 Windows 图形客户端）来进行代理。但是在进行分流的时候遇到了一些困难。之前习惯了SS或者SSR的朋友都知道，更新pac文件可以加入哪些站点使用代理之类的，哪些网站直接访问就行了。但是clash不一样，通过rule来细分，是一个节点群组织起来的。</p><p>一开始自己摸索在profile的edit rule那里自己添加直连规则，可是经常过一天就被覆盖了。所以谷歌了一下才知道需要改动的地方~</p><h3 id="参考流程"><a href="#参考流程" class="headerlink" title="参考流程"></a>参考流程</h3><hr><p>点击软件Setting，找到Profiles（配置文件下）的Parsers。点击Edit （整个文档编写符合yaml语法规范）：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">parsers:</span> <span class="hljs-comment"># array</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">https://xxxxxxx.ini</span>    <span class="hljs-attr">yaml:</span>      <span class="hljs-attr">prepend-rules:</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-SUFFIX,hdbits.org,🎯</span> <span class="hljs-string">国内网络</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-SUFFIX,xthor.tk,🎯</span> <span class="hljs-string">国内网络</span>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-SUFFIX,filelist.io,🎯</span> <span class="hljs-string">国内网络</span></code></pre></div><p>对照上述模板进行修改，其中url为订阅地址，不知道的同学可以在CFW的profiles面板选择订阅点击change infomation进行查看.</p><p>prepend-rules为预定义分流规则，“- DOMAIN-SUFFIX,hdbits.org,🎯 国内网络” 解释为域名匹配海德堡时，直接使用国内网络连接。</p><p>还有其他的订阅规则：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">DOMAIN-SUFFIX：域名后缀匹配</span><span class="hljs-string">DOMAIN：域名匹配</span><span class="hljs-string">DOMAIN-KEYWORD：域名关键字匹配</span><span class="hljs-string">IP-CIDR：IP段匹配</span><span class="hljs-string">SRC-IP-CIDR：源IP段匹配</span><span class="hljs-string">GEOIP：GEOIP数据库（国家代码）匹配</span><span class="hljs-string">DST-PORT：目标端口匹配</span><span class="hljs-string">SRC-PORT：源端口匹配</span><span class="hljs-string">PROCESS-NAME：源进程名匹配</span><span class="hljs-string">RULE-SET：Rule</span> <span class="hljs-string">Provider规则匹配</span><span class="hljs-string">MATCH：全匹配</span></code></pre></div><p>自定义规则的第二部分 值根据规则类型和需求进行填写，自定义规则的第三部分就是代理策略，在这里可以填写代理节点或者策略，有哪一些代理和策略可供选择可以通过Clash进行查看，点击Profiles，选择你的订阅，点击Edit rules进入规则编辑界面，点击Add, 下拉即可看到所有的可选节点或策略。 </p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/read/cv10989428">使用配置文件预处理防止自定义规则被覆盖</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://yattazen.com/tutorial/clash-custom-config.html">简易教程 | Clash | 自定义在线分流规则策略组</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>不借助第三方自己实现cookie备份恢复登录</title>
    <link href="/%E4%B8%8D%E5%80%9F%E5%8A%A9%E7%AC%AC%E4%B8%89%E6%96%B9%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0cookie%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E7%99%BB%E5%BD%95/"/>
    <url>/%E4%B8%8D%E5%80%9F%E5%8A%A9%E7%AC%AC%E4%B8%89%E6%96%B9%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0cookie%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>经常会有备份cookie的需求，第三方软件什么的很多了，这里仅仅演示如何使用js脚本实现简单的cookie备份和转移。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><hr><p>首先得知道怎么查看一个站点的cookie，F12或者开发者工具查看network，这个网上有就不提了。废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> get_cookie = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cookie</span>)</span>&#123;    cookie = cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>);    <span class="hljs-keyword">var</span> info = <span class="hljs-string">``</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cookie.length; i++)&#123;        <span class="hljs-keyword">var</span> key = cookie[i].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>].trim();        <span class="hljs-keyword">var</span> value = cookie[i].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>].trim();        info += <span class="hljs-string">`document.cookie=&quot;<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>&quot;\n`</span>;    &#125;    <span class="hljs-built_in">console</span>.log(info);&#125;cookie=<span class="hljs-built_in">document</span>.cookie;get_cookie(cookie);</code></pre></div><p>接着说一个怎么快速进控制台的快捷键：ctrl+shift+i</p><p>我们拿猫站试验一下：首先拿已经登录的猫站（谷歌浏览器）在console里输入上边的代码，下方输出一堆东西</p><p><a href="https://www.z4a.net/image/gxeNCC"><img src="https://www.z4a.net/images/2021/04/16/28fde1cb1c6988343.png" alt="28fde1cb1c6988343.png"></a></p><p>接着我们打开一个火狐（未登录过的）：输入<code>https://pterclub.com/</code>自动跳转到登录页面，然鹅就出现下面的页面：</p><p><a href="https://www.z4a.net/image/gxequN"><img src="https://www.z4a.net/images/2021/04/16/3593be8d2b0f93e46.png" alt="3593be8d2b0f93e46.png"></a></p><p>我们ctrl+shift+i进入控制台，输入刚才获取的那一段(这里使用到了cookie信息，所以做了处理，请自我备份这里的代码)：</p><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;c_secure_uid=NDU3Nxxxxxxxxxx&quot;</span><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;c_secure_pass=0d50bf1xxxxxxxxxxx937c3681a19b94&quot;</span><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;c_secure_ssl=eWVhxxxxxxx3D%3D&quot;</span><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;c_secure_tracker_ssl=eWVhxxxxxxxD%3D&quot;</span><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;c_secure_login=bm9wZxxxxxxx%3D&quot;</span><span class="hljs-attr">document.cookie</span>=<span class="hljs-string">&quot;PHPSESSID=0g97l21913vi7xxxxxxxxxh3272&quot;</span></code></pre></div><p><a href="https://www.z4a.net/image/gxTjnh"><img src="https://www.z4a.net/images/2021/04/16/4154ec70860649fbb.png" alt="4154ec70860649fbb.png"></a></p><p>接着再次输入<code>https://pterclub.com/</code>，就已经是登录状态了。</p><p><a href="https://www.z4a.net/image/gxTyS2"><img src="https://www.z4a.net/images/2021/04/16/57f3e31f88a6ccb55.png" alt="57f3e31f88a6ccb55.png"></a></p><p>是不是还挺简单呢？</p><h3 id="馒头"><a href="#馒头" class="headerlink" title="馒头"></a>馒头</h3><hr><p>测试了馒头，貌似直接用document.cookie不太好使。那就得自己找到之后再稍微改一改代码：</p><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">var</span> get_cookie = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">cookie</span>)</span>&#123;    cookie = cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>);    <span class="hljs-keyword">var</span> info = <span class="hljs-string">``</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cookie.length; i++)&#123;        <span class="hljs-keyword">var</span> key = cookie[i].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>].trim();        <span class="hljs-keyword">var</span> value = cookie[i].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>].trim();        info += <span class="hljs-string">`document.cookie=&quot;<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;value&#125;</span>&quot;\n`</span>;    &#125;    <span class="hljs-built_in">console</span>.log(info);&#125;cookie=<span class="hljs-built_in">document</span>.cookie; <span class="hljs-comment">//这里的document.cookie也可以直接写一个自己获取的字符串的。</span>get_cookie(cookie);</code></pre></div><p><a href="https://www.z4a.net/image/gxTQ1U"><img src="https://www.z4a.net/images/2021/04/16/65ab837af275def07.png" alt="65ab837af275def07.png"></a></p><p><a href="https://www.z4a.net/image/gxTkRf"><img src="https://www.z4a.net/images/2021/04/16/7bfa88451f7ade524.png" alt="7bfa88451f7ade524.png"></a></p><p>馒头不存在什么游客访问啥的，这里仅仅做一个演示。。cookie输入进去直接就可以登录了。。</p><p><a href="https://www.z4a.net/image/gxTAHE"><img src="https://www.z4a.net/images/2021/04/16/88dbdb7cf5b2001ca.png" alt="88dbdb7cf5b2001ca.png"></a></p><h3 id="瓷器"><a href="#瓷器" class="headerlink" title="瓷器"></a>瓷器</h3><hr><p>看见吧友说瓷器阻断，及时备份很有必要：</p><p><a href="https://www.z4a.net/image/gxTtpO"><img src="https://www.z4a.net/images/2021/04/16/9a0dc1a83a22b8a8b.png" alt="9a0dc1a83a22b8a8b.png"></a></p><p>冰冷无情的阻断页面–&gt;又回来了~~~</p><p><a href="https://www.z4a.net/image/gxTP10"><img src="https://www.z4a.net/images/2021/04/16/10c8cbbf7de5793c4d.png" alt="10c8cbbf7de5793c4d.png"></a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>总有很多不适用的情况，这里做了一些测试而已，如果不适用请使用第三方的工具备份。</p><p>本脚本输出结果请自己保存，因为一旦退出了这个方案也就不适用了。</p><p>春节期间TTG阻断就是用这个方案复活的，至于cookie是自己无意间在种鸡里备份了的~</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fluid博客添加网易云背景音乐</title>
    <link href="/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/"/>
    <url>/Hexo-Fluid%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>看到别人的博客都有音乐插件，我也想要，结果这个主题下好像没有，需要自己折腾一下子。我就做个最简单的好了~</p><h3 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h3><hr><p>首先就是网易云比较简单，只要生成一首歌或者是歌单的外链就可以了。将下述的代码添加到footer对应的content里，因为想要把它的位置固定在左下角。</p><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;music_div&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: fixed; bottom: 0px; left: 30px;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">330</span> <span class="hljs-attr">height</span>=<span class="hljs-string">110</span> </span><span class="hljs-tag">    <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=0&amp;id=919444742&amp;auto=1&amp;height=90&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/musicshow.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><p>然后引入了jQuery，hexo g之后这样就可以看到左下角有一个音乐框，我们可以使用iframe参数控制其显示大小。</p><p>但是当首页的时候会比较违和，所以我们引入一个musicshow.js控制一下，如果页面是首页的话下拉多少的时候音乐框显示，小于多少就隐藏。</p><p>在主题的source目录js目录里边新建一个musicshow.js文件：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123;     <span class="hljs-comment">//简单判断首页，因为我的域名是tomorrow50.xyz，所以首页就会触发</span><span class="hljs-keyword">if</span> (location.href.match(<span class="hljs-regexp">/xyz.&#123;0,1&#125;$/</span>))&#123;         <span class="hljs-comment">//直接把音乐框隐藏</span>$(<span class="hljs-string">&quot;#music_div&quot;</span>).attr(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:none;&quot;</span>);         <span class="hljs-comment">//滚动条事件</span>$(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//获取滚动条的滑动距离</span><span class="hljs-keyword">var</span> scroH = $(<span class="hljs-built_in">this</span>).scrollTop();<span class="hljs-comment">//滚动条的滑动距离大于120，就显示，反之就隐藏</span><span class="hljs-keyword">if</span>(scroH &gt;= <span class="hljs-number">120</span>)&#123;$(<span class="hljs-string">&quot;#music_div&quot;</span>).attr(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:block;position:fixed;bottom:0px;left:30px;&quot;</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scroH &lt; <span class="hljs-number">120</span>)&#123;$(<span class="hljs-string">&quot;#music_div&quot;</span>).attr(<span class="hljs-string">&quot;style&quot;</span>,<span class="hljs-string">&quot;display:none;&quot;</span>);&#125; &#125;)&#125;  &#125;  show();&#125;)();</code></pre></div><p>这样的话就大功告成了~~看看效果：</p><p><img src="https://www.z4a.net/images/2021/04/09/f872b5a47c9ee5daf6fe7da5810d6853.png" alt="f872b5a47c9ee5daf6fe7da5810d6853.png"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr><p>无非就是自己想要做的事，折腾一下总是能够有办法的！！</p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转载--国内外PT站小组收录【待更新】</title>
    <link href="/%E8%BD%AC%E8%BD%BD--%E5%9B%BD%E5%86%85%E5%A4%96PT%E7%AB%99%E5%B0%8F%E7%BB%84%E6%94%B6%E5%BD%95%E3%80%90%E5%BE%85%E6%9B%B4%E6%96%B0%E3%80%91/"/>
    <url>/%E8%BD%AC%E8%BD%BD--%E5%9B%BD%E5%86%85%E5%A4%96PT%E7%AB%99%E5%B0%8F%E7%BB%84%E6%94%B6%E5%BD%95%E3%80%90%E5%BE%85%E6%9B%B4%E6%96%B0%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>初接触PT都会觉得迷惑，那些资源怎么甄别或者那些个小组的作品有什么差别呢？后来在一个站点看到了一些总结，可能很久没有更新了，这里放出来，国内国外的都有。</p><table>    <tr>        <td>站点名称</td>        <td>小组名称</td>        <td style="width:120px">备注</td>    </tr>    <tr>        <td>Awesome-HD</td>        <td>BMF, decibeL, D-Z0N3, HiFi, NCmt, TDD, TeeHee</td>        <td>已关站</td>    </tr>    <tr>        <td>ArabicSource</td>        <td>Taxfour, Titanic, Rosum, Zezoo, HunterX, Barcelona, Zorro, Thering</td>        <td></td>    </tr>    <tr>        <td>AsianCinema</td>        <td>ARiN, KAWAiREMUX, iZON3</td>        <td></td>    </tr>    <tr>        <td>AvistaZ</td>        <td>AppleTor</td>        <td></td>    </tr>    <tr>        <td>Asgaard</td>        <td>QUARK, PANDEMONiUM, Xor06</td>        <td></td>    </tr>    <tr>        <td>ArabScene</td>        <td>HDMOVIE, Rosum ,monsifdx, Khaled94, OSN Team, ABOURINED, BRANCO, djomati, HaGraS, IICaeSarII, KimoHD, klashinkov, MR.KEY.HD, SALAHHD, scoot , ShimalHD, YosefJoo, BoOoOoDa , Gad, JamesBond, MiDo007</td>        <td></td>    </tr>    <tr>        <td>Arab-Torrents</td>        <td>Excellence, yasser540, YasTon, clouds, cdhaty, EMPEROR, JaGUaR, HighQualityModyAdmin, Miro, WamaEgypT, djomati, Monster, BAFADEM, JamesBond, SaSa, comanda, GHELBO, marotheking</td>        <td></td>    </tr>    <tr>        <td>AfrBits</td>        <td>Prodji RG</td>        <td></td>    </tr>    <tr>        <td>BeyondHD</td>        <td>BHDStudio, BeyondHD, FraMeSToR, iFT, iROBOT, Legacy, MKVULTRA, RPG, ZR, BMF, decibeL, D-Z0N3, HiFi, NCmt, TDD, TeeHee</td>        <td></td>    </tr>    <tr>        <td>Bit-HDTV</td>        <td>BitHD, LoRD</td>        <td></td>    </tr>    <tr>        <td>BlueTigers</td>        <td>ASPHiXiAS, TeamSuW</td>        <td></td>    </tr>    <tr>        <td>Blu-bits</td>        <td>BluHD, 3DNORD, PrimeHD, RealHD</td>        <td></td>    </tr>    <tr>        <td>Blu-Evolution</td>        <td>BluEvo, Jack, Ruxi, Jem</td>        <td></td>    </tr>    <tr>        <td>BTgigs (TorrentGigs)</td>        <td>inTGrity, TVM4iN</td>        <td></td>    </tr>    <tr>        <td>BTN</td>        <td>NTb, HiSD</td>        <td></td>    </tr>    <tr>        <td>Bithorlo</td>        <td>BHO</td>        <td></td>    </tr>    <tr>        <td>BitHumen</td>        <td>No1, TRiNiTY</td>        <td></td>    </tr>    <tr>        <td>BalkanElite</td>        <td>CROwn</td>        <td></td>    </tr>    <tr>        <td>Blu-Torrents</td>        <td>BluRG</td>        <td></td>    </tr>    <tr>        <td>BluTopia</td>        <td>BLURANiUM, BLUTONiUM, WiLDCAT, CultFilms™, ReCult</td>        <td></td>    </tr>    <tr>        <td>BwTracker</td>        <td>IcTv, DUS</td>        <td></td>    </tr>    <tr>        <td>CHDBits</td>        <td>CHDBits, SGNB, CHDTV, CHPAD, CHWEB, CHDHKTV, StBOX, OneHD</td>        <td></td>    </tr>    <tr>        <td>CN</td>        <td>TBH</td>        <td></td>    </tr>    <tr>        <td>CZteamTtracker</td>        <td>CzT</td>        <td></td>    </tr>    <tr>        <td>d4ever.cc</td>        <td>d4EUTeAm,GMT4U Team,Silver Bullet Upload Team (S.B.U.T)</td>        <td></td>    </tr>    <tr>        <td>Desi-Torrents</td>        <td>DDR, DrC, DUS, ExDR, IcTv, M2Tv, TmG, TeamTolly, TDBB, xDM</td>        <td></td>    </tr>    <tr>        <td>DanishBits</td>        <td>UNiTY, UNiTYSERiER</td>        <td></td>    </tr>    <tr>        <td>Elite-pirates</td>        <td>AQOS</td>        <td></td>    </tr>    <tr>        <td>eStone</td>        <td>eStone</td>        <td></td>    </tr>    <tr>        <td>Filelist</td>        <td>playHD, playTV, playMUSIC, playON, playMB, playSD, playBD</td>        <td></td>    </tr>    <tr>        <td>Feedurneed</td>        <td>FooKaS, ACAB</td>        <td></td>    </tr>    <tr>        <td>Grtorrentt</td>        <td>Show Addicts Team</td>        <td></td>    </tr>    <tr>        <td>Greekleech.info</td>        <td>GLTeam,Unique Team,NetCrawlers</td>        <td></td>    </tr>    <tr>        <td>Greek-Team.cc</td>        <td>GrLTv, GLM, MyToG, GTRD</td>        <td></td>    </tr>    <tr>        <td>HD-Bits.com</td>        <td>PLRVRTX, HDBriSe, BobOki</td>        <td></td>    </tr>    <tr>        <td>HD-Space</td>        <td>RightSiZE ,SpaceHD, Boss, BluPanther, CRiSPY, HDSpace, HDCLUB</td>        <td></td>    </tr>    <tr>        <td>HD-Torrents</td>        <td>557953 (inactive), BaggerInc, BiZKiT, BluDragon, DopeHD (inactive), DownRev (inactive), E.N.D, gc04 (inactive), HB (inactive), HDBS (inactive), HiDt (inactive), HDMaNiAcS (inactive), HDVN, JM, JustHD, KRaLiMaRKo, LoRD, POH, SD (inactive), Slbenfica, StillChoosing (inactive) ,SumVision, uRaMeSHi (inactive), ViSTA (inactive) and ViSUALHD (inactive).</td>        <td></td>    </tr>    <tr>        <td>HDAhoy</td>        <td>YoHo</td>        <td></td>    </tr>    <tr>        <td>HDArea</td>        <td>HDArea, EPiC, HDApad, HDATV</td>        <td></td>    </tr>    <tr>        <td>HDCN</td>        <td>HDCN</td>        <td></td>    </tr>    <tr>        <td>HDBiger</td>        <td>HDBiger, HDBigerTV</td>        <td></td>    </tr>    <tr>        <td>HDBits.org</td>        <td>(C)Z, AE, AJ8, AJP, Arucard, AtZLIT, AW, Azul, BBW, BG,  BoK, Cache, Chotab, CJ, CRiSC, Cristi, Crow, CtrlHD, CyCR0, D4,  DChighdef, DeblocKING, DiGG, DiR, DiRTY, disc, DBO, DON, DoNOLi, EA,  EbP, Eby, ESiR, ETH, EucHD, ExY, FANDANGO, fLAMEhd, FSK, Ft4U, fty, Funner,  GMoRK, GoLDSToNE, Green, greenHD, H2, h264iRMU, HALYNA, HDB,  HDC, HDBiRD, HDL, HDxT, H@M, hymen, HZ, IDE , iCO, iLL, IMDTHS, iNFLiKTED, iNK, iOZO, J4F, JAVLiU, JCH, jTV, k2, KASHMiR , KolHD, Krispy, KTN, KweeK,  Lesnick, LiNG, LolHD, lulz, M794, madoff, MAGiC, martic, McFly, MCR,  MdM, MDR, MeDDlER, MiBr, MMI, Moshy, Mojo, NaRB, NiP, NiX, nmd, NorTV, NTb,  NWO, OAS, ONYX, pB, PerfectionHD,  PHiN, PiNG, PiMP, PiPicK, Positive, Prestige, Prime, PXE, QDP, quaz,  QXE, RDK123, Redµx, REPTiLE, RightSiZE, RuDE, RZF, S26, SbR, SG, sJR,  SK, Skazhutin, SLO, SMoKeR, somedouches, SbY, SrS, SSG, SuBHD, TayTO,  tBit, ThD, THORA, tK, TM, toho, Tree, TrollHD, tRuAVC, tRuEHD, TSE, TsH, UioP, UxO, V, VanRay, VietHD, ViNYL, WESTSiDE, WiHD, XSHD, yadong1985, YanY, Z, Zim'D , ZQ ,</td>        <td></td>    </tr>    <tr>        <td>HDCenter</td>        <td>HDC, NERDS, Tvr</td>        <td></td>    </tr>    <tr>        <td>HDChina (HDWinG)</td>        <td>HDWinG, HDWTV, HDCTV, iHD, HDChina, KiSHD, OpenMV, HDC, CrsS, LU9998, NGB, CMCT, JOMA, beAst, KHQ, DIY, TAiCHi</td>        <td></td>    </tr>    <tr>        <td>HDCity</td>        <td>NoVA, NoPA, TLF</td>        <td></td>    </tr>    <tr>        <td>HDME</td>        <td>HDme, INTL, iCandy, FourGHD, Ruxi</td>        <td></td>    </tr>    <tr>        <td>HDLeech</td>        <td>MeRCuRY, DGN, HDL</td>        <td></td>    </tr>    <tr>        <td>HDQueen</td>        <td>PHD, HDQueen</td>        <td></td>    </tr>    <tr>        <td>HDRoad</td>        <td>MySilu, HDROAD</td>        <td></td>    </tr>    <tr>        <td>HDStar</td>        <td>HDS, HDSTAR, HDSPAD</td>        <td></td>    </tr>    <tr>        <td>HD-Only</td>        <td>Only, 4HDO, MLN, PHOENiX, DBHD, KiKi, ONLY, PEWE</td>        <td></td>    </tr>    <tr>        <td>HD-Spain</td>        <td>GrupoHDS</td>        <td></td>    </tr>    <tr>        <td>HDPter</td>        <td>EPiC, HDPter, Pbk, HDPad, HDPTV, HDPterOST</td>        <td></td>    </tr>    <tr>        <td>HD4Free</td>        <td>LEGi0N, MarGe, GF44</td>        <td></td>    </tr>    <tr>        <td>HD4FANS</td>        <td>beAst</td>        <td></td>    </tr>    <tr>        <td>HD-Unit3d</td>        <td>GHiA, Archmage, HDU, DeamoN, JoN, Soltu</td>        <td></td>    </tr>    <tr>        <td>Hon3yHD</td>        <td>Hon3y</td>        <td></td>    </tr>    <tr>        <td>HQMusic</td>        <td>HQM, MRHQ, OwL</td>        <td></td>    </tr>    <tr>        <td>HDBytes</td>        <td>all encodes are internal</td>        <td></td>    </tr>    <tr>        <td>HDtime</td>        <td>HDTime</td>        <td></td>    </tr>    <tr>        <td>HQSource</td>        <td>ELiTE, R2D2</td>        <td></td>    </tr>    <tr>        <td>HDSky</td>        <td>HDS, HDSPad, HDSTV, HDSWEB</td>        <td></td>    </tr>    <tr>        <td>HD-SportBits</td>        <td>Reborn4HD</td>        <td></td>    </tr>    <tr>        <td>HDRush</td>        <td>PSYPHER, PHDR, HDRush, TheVortex , JsR, BluPanther, MZ0N3</td>        <td></td>    </tr>    <tr>        <td>Hyperay</td>        <td>Geek, Tron Hyper, PureTV, TronTV, iMusic, Neon, Original, Classic HyPad</td>        <td></td>    </tr>    <tr>        <td>Kapaki.info</td>        <td>VisualArt Team, IMT Team, Xtreme Team, Kefalos Team, Ft4U Team</td>        <td></td>    </tr>    <tr>        <td>LinkToTheInter.net</td>        <td>LTTi, Vendetta, Kuryu, QalesYa</td>        <td></td>    </tr>    <tr>        <td>inTheShadow</td>        <td>QOS</td>        <td></td>    </tr>    <tr>        <td>IceTorrents</td>        <td>SubZero, iREAL</td>        <td></td>    </tr>    <tr>        <td>JoyHD</td>        <td>JoyHD</td>        <td></td>    </tr>    <tr>        <td>LeechTurk</td>        <td>LTRG</td>        <td></td>    </tr>    <tr>        <td>LeechAccess</td>        <td>LCC</td>        <td></td>    </tr>    <tr>        <td>Majomparade</td>        <td>Gepont</td>        <td></td>    </tr>    <tr>        <td>M-Team.cc</td>        <td>M-Team, KiSHD, BMDru, HDStar, HDTime, Pack, CNHK, KiSHD (inactive), MPAD, MTeamTV, OneHD, R2HD (inactive), StBOX and TnP (inactive).</td>        <td></td>    </tr>    <tr>        <td>Morethan.tv</td>        <td>Dracula, VLAD, TEPES, SOIL</td>        <td></td>    </tr>    <tr>        <td>Movie-Torrentz</td>        <td>ViP3R, m2g</td>        <td></td>    </tr>    <tr>        <td>OurBits</td>        <td>OurBits, OurTV, OurPad, PbK, HosT,</td>        <td></td>    </tr>    <tr>        <td>OpenCD</td>        <td>OpenCD, LLM, KHQ</td>        <td></td>    </tr>    <tr>        <td>PixelHD</td>        <td>PxHD, PxEHD, Px3D, PxHD-Mobies</td>        <td></td>    </tr>    <tr>        <td>PolishTracker</td>        <td>PTRG,PT, d00mEr, WPRF, NiNa, KiKO, VV, NTK,</td>        <td></td>    </tr>    <tr>        <td>PolishSource</td>        <td>PSiG, AtM, presa, FARNA, pawel2006, DeiX, FGHJ, SliMDiCK, iNTERnet</td>        <td></td>    </tr>    <tr>        <td>PrivateHD</td>        <td>Epsilon, UTR-HD, HDBEE, SiGMA, Absinth</td>        <td></td>    </tr>    <tr>        <td>PTN</td>        <td>SKALiWAGZ , TTO</td>        <td></td>    </tr>    <tr>        <td>PTP</td>        <td>TBB, HANDJOB, HRiP</td>        <td></td>    </tr>    <tr>        <td>Ransackedcrew.info</td>        <td>CrEwSaDe</td>        <td></td>    </tr>    <tr>        <td>ReleaseZone</td>        <td>RZ-RG</td>        <td></td>    </tr>    <tr>        <td>redemption</td>        <td>RESEVIL</td>        <td></td>    </tr>    <tr>        <td>RGU.life</td>        <td>Regents</td>        <td></td>    </tr>    <tr>        <td>RipThe.net</td>        <td>menace II Society</td>        <td></td>    </tr>    <tr>        <td>Scene-Rush</td>        <td>NextForce Team (NFT), PTpOWeR.TEAM (PTP)</td>        <td></td>    </tr>    <tr>        <td>SceneHD</td>        <td>None!</td>        <td></td>    </tr>    <tr>        <td>SDbits</td>        <td>CtrlSD, RR, MMI, HYPE</td>        <td></td>    </tr>    <tr>        <td>ScienceHD</td>        <td>CalibeR , hPLuS</td>        <td></td>    </tr>    <tr>        <td>SpeedApp</td>        <td>FZHD , FZBD , FZ4K , NViDiON , EShare ,PiPS , CRC , 41RGB , iREAL , MOO , SubZero , HDMAN , ANDRONIKA , FZWEB , FZSD , SPBD , SPHD , SPSD , SPWEB , SPDVD , SPTV , SP4K</td>        <td></td>    </tr>    <tr>        <td>ScanBytes</td>        <td>ScanExclusive</td>        <td></td>    </tr>    <tr>        <td>SceneXpress</td>        <td>CiNEMANiA, GENESIS , CONFiDENT, XPRESS</td>        <td></td>    </tr>    <tr>        <td>Simpledevelopment</td>        <td>SiMPLE</td>        <td></td>    </tr>    <tr>        <td>Speed.cd</td>        <td>diversity, scott24</td>        <td></td>    </tr>    <tr>        <td>TTG</td>        <td>WiKi, NGB, DoA, BDClub, OoKU</td>        <td></td>    </tr>    <tr>        <td>The1st.be</td>        <td>1st Release Team</td>        <td></td>    </tr>    <tr>        <td>Torviet</td>        <td>VietHD, KiD , EPiK , EbP</td>        <td></td>    </tr>    <tr>        <td>TeamTPTB</td>        <td>TPTB</td>        <td></td>    </tr>    <tr>        <td>TeraCod</td>        <td>BaKeR, YRP, NoGrp, TERACOD, KuKaS, Yoshi, HuN-vetike, Hun-Gege</td>        <td></td>    </tr>    <tr>        <td>TNTracker</td>        <td>DEFUSED,Mayday,POE , LoC</td>        <td></td>    </tr>    <tr>        <td>TorrentLand</td>        <td>EmlHDTeam,Eml Team , Castellano</td>        <td></td>    </tr>    <tr>        <td>TrackerHD</td>        <td>TRCKHD</td>        <td></td>    </tr>    <tr>        <td>TehConnection</td>        <td>HaB</td>        <td></td>    </tr>    <tr>        <td>UHDBits</td>        <td>DON, ExREN, HaB, HDVN, iFT, JM, LoRD, KASHMiR, LEGi0N, MKVTeamZQ, PIS, POH, PRiMaLHD, TayTO, UHDRemux (DKT, EEEEE, GoNeHD, KHu, LDX, LHD, LiquidHD, $a!nt, TCO, VoLT</td>        <td>越南堡, 可入</td>    </tr>    <tr>        <td>World-In-HD</td>        <td>PULSE, TMB, GAIA, WiHD, FURAX, LFN, HGR</td>        <td></td>    </tr>    <tr>        <td>x264</td>        <td>XTSF, DiRTY, ViKAT, Bunny, Chotab, VaAr3, Soul, Nero9, Green, JENC, tRuEHD, IJR, LSHD, JeM, RedJohn, kkp, incarnation, GreyWolf</td>        <td></td>    </tr>    <tr>        <td>xThor</td>        <td>JUSTFORFUN, CARPEDiEM, A3L, BlackFlag, BOUQUINE, Giorgy, NLX5, LiBE RTAD, Poney, ReBot, ViKINGS, FRATERNiTY, WEEDS, GHZ, NEO, SCiTiS, BSD, MYSTERiON, NLX5, ReBoT, RiPiT, DELiCiOUS, CherryCoke, DEMON, iXTHOR, QWERTZ, LOOKSMAX, SpiriTus, A3L, DZ, DavidGoodenough (inactive), Tokuchi, (inactive), Yn1D (inactive), QUALiTY (inactive), LEGi (inactive)</td>        <td>法国站, 保种即可</td>    </tr>    <tr>        <td>XtremeZone</td>        <td>XtremeHD &amp;  Werip</td>        <td></td>    </tr>    <tr>        <td>BroadCity</td>        <td>BDC</td>        <td>更新很快, 猫可入</td>    </tr>    <tr>        <td>Turktorrent</td>        <td>TURG</td>        <td></td>    </tr></table><h3 id="Scene和P2P："><a href="#Scene和P2P：" class="headerlink" title="Scene和P2P："></a>Scene和P2P：</h3><hr><p>其实我自己一开始也不是很懂，但是时间久了大概知道一些两者的区别，Scene组类似于地下组织，他们很快拥有一手资源，然后破解啊什么的，总之就是快，P2P更多是精心压制的小组。比如葡萄皮可能会接收两个版本，一个是scene版，一个是PTP版。</p><p>一些Scene组：</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">10801920</span>, <span class="hljs-number">2</span>HD, <span class="hljs-number">4</span>F, <span class="hljs-number">7</span>SiNS, <span class="hljs-number">850105</span>, aAF, aBD, ADHD, AERO, ALLiANCE, AMBiTiOUS, AMIABLE, ANGELiC, ASAP, AVCHD, AVS720, <span class="hljs-keyword">BAJSKORV, </span><span class="hljs-keyword">BALLS, </span><span class="hljs-keyword">BARGE, </span><span class="hljs-keyword">BAWLS, </span><span class="hljs-keyword">BestHD, </span><span class="hljs-keyword">BiA, </span><span class="hljs-keyword">BLOW, </span><span class="hljs-keyword">BLUEYES, </span><span class="hljs-keyword">BRICKSQUaD, </span><span class="hljs-keyword">BRiGHT, </span><span class="hljs-keyword">BRMP, </span><span class="hljs-keyword">BWB, </span>c0nFuSed, C4TV, CBGB, CDDHD, CiNEFiLE, CLASSiC, COMPULSiON, CRiMSON, CROSSBOW, D3Si, DAH, DEFiNiTE, DEPRAViTY, DHD, <span class="hljs-keyword">DiFFERENT, </span><span class="hljs-keyword">DIMENSION, </span><span class="hljs-keyword">DiVERGE, </span>DRHD, DUPLI, <span class="hljs-keyword">EiTheL, </span>ENCOUNTERS, ETHOS, euHD, EUSTASS, FAIRPLAY, FaNSuB, FCC, Felony, FHD, FilmHD, FKKTV, FoV, FQM, FRIGGHD, FSiHD, FTP, GTVG, H2, haggis, HAiDEAF, HALCYON, HCA, HD1080, HD4U, HDEX, HDX, HiGHTiMES, HILSWALTB, HUBRIS, HV, HYBRiS, iBEX, iGNiTiON, IMMERSE, iMSORNY, iND, iNFAMOUS, iNGOT, iNVANDRAREN, <span class="hljs-keyword">Japhson, </span><span class="hljs-keyword">JMT, </span>KaKa, KYR, LCHD, LEVERAGE, LMAO, LOL, LOST, MACHD, MACK4, MAGiCAL, MAGiCViBE, MELiTE, MeTH, METiS, MHQ, MiNDTHEGAP, MiSFiTS, MOAB, MOMENTUM, MSE, NERDHD, NGCHD, NODLABS, NOHD, NVA, OEM, OEM1080, OMiCRON, <span class="hljs-keyword">ORENJI, </span>P0W4, PELLUCiD, PFa, PREMiER, PSV, PURE, PUZZLE, QCF, QSP, RAP, REFiNED, REMAX, REWARD, RiVER, RTA, SAiMORNY, SECTOR7, SEMTEX, SEVENTWENTY, SFM, <span class="hljs-keyword">SHDXXX, </span><span class="hljs-keyword">SHORTBREHD, </span>SIBV, SiNNERS, SiTiN, sPHD, SSF, SUN, SUNSPOT, <span class="hljs-keyword">SWAGGERHD, </span>SYS, TASTETV, TENEIGHTY, TERRA, THENiGHTMAREiNHD, THUGLiNE, TiMELORDS, TiMTY, TiTANS, TLA, TUSAHD, TVP, TWiZTED, URTV, VAMPS, ViD, ViLD, W<span class="hljs-symbol">4F</span>, WASTE, WAVEY, WEST, WHEELS, WiKi, WLM, WPi, XPERT_HD, XSTREEM, XLF, YesTV, ZMG, ZZGtv</code></pre></div><p>一些P2P组：</p><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">3</span>LTON, AFG, AHD, ALeSiO, aXXo, <span class="hljs-keyword">BDClub, </span><span class="hljs-keyword">Blu-bits, </span><span class="hljs-keyword">BlueBird, </span><span class="hljs-keyword">BluWave, </span><span class="hljs-keyword">BRrip, </span><span class="hljs-keyword">BTT, </span>CHD, CHDBits, CrEwSaDe, CtrlHD, D-Z0N3, de[<span class="hljs-number">42</span>], decibeL, DEViSE, DON, EbP, <span class="hljs-keyword">EiMi, </span>ESiR, EuReKA, FASM, FLAWL3SS(retired), FoRM, FraMeSToR, FTW-HD, FZHD, GAGE, Gazdi, george.c, Gogeta, GoLDSToNE,HD2DVD, HDBT, HDClub, HDLiTE, HDMaNiAcS, HDME, HDmonSK, HDR, HDxT, HiDt, HiFi, HoodBag, iLL, INtL, KingBen, KiNGS, KLAXXON, LTRG, mHD, mSD, NhaNc3, nHD, nSD, PerfectionHD, PRODJi, RUDOS, SANTi, <span class="hljs-keyword">Shadowman, </span>SiC, Softfeng, TorrenTGui, TRASH, TrollHD, ViPER, ViSiON, WHiiZz, xander, YellowBeast, YoHo,HDVid , HQMi , <span class="hljs-keyword">BLiNK </span>, DrSi</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>上述一些站点虽然进了，但是外站实在是玩不太转，所以不是很了解，如果对于上述站点有什么要补充的或者是增加或者减少的，可以留言~</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PT发布之一键转载脚本使用指南(2)</title>
    <link href="/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-2/"/>
    <url>/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-2/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>接<a href="https://tomorrow505.xyz/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">上一篇教程</a>，之前一直被防盗链困扰，最近也有很多豆瓣图床说看不见。由于自己时间不多发种很少了，但是还是有很多人有这样的需求，也就是图床转存。之前也一直考虑说似的脚本能够实现这样的需求。无奈精力有限，没有研究，最近铂金家一位大佬说有这样的脚本可以转存PTPIMG，那么既然已经有人造好了轮子，我就想能不能实现一下，所以就动手了~</p><p>同时，有人在上一篇教程中说设置能不能保存不要每次更新都需要替换，这个以前也想做，但是自己很懒，就拖着了……在这个版本的实现过程中，借用了NP的个人设置版块把这两个功能实现了一下。</p><div class="note note-primary">            <p><font size="3px">项目托管在Github上，欢迎Star：</font><iframe src="https://ghbtns.com/github-btn.html?user=tomorrow505&amp;repo=auto_feed_js&amp;type=star&amp;count=true&amp;size=large" frameborder="0" scrolling="0" width="170" height="30" title="GitHub" style="vertical-align: bottom"></iframe></p>          </div><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><hr><p><font color=Blue><strong>图片转存</strong></font>：手动转存图床麻烦之处在于需要下载，那么能够通过url上传，由服务器进行下载存储岂不是很好？当然了，还得图床有提供开放的API可以使用。所以在这一周的时间里找到了以下几个图床：</p><ul><li>PTPIMG：需要皮或者红的账号绑定，脚本需要用到API-KEY，直接打开图床首页就可以看到了，但是没有缩略图</li><li>IMGbb：注册就可以打开其API页面获取key值和API的使用流程</li><li>Gifyu：这个API-KEY好像不太好找，是由猫站一个大佬提供的，缺点就是不存在你的账号里，后续使用或者管理不是很方便</li><li>Freeimg：这个在以前就留意过有开放API，不过一直没有收到验证邮件，可是竟然能够直接使用，注册打开API页面获取key</li><li>PIXhost：这个很强大的一个图床，可以一次上传多次图片，脚本主要设定为批量转存防盗链的几个站点的特定图床</li><li>Pstorage：也是开放注册登录即可获取API-KEY值的一个图床</li></ul><p><strong>最后我的设定是PTPIMG用来转存海报之类的大图；PIXhost转存多张防盗链图，其他的都可以使用，但是一次只能一张，好在提供了大图小图之类的。</strong></p><p><font color=Blue><strong>脚本设置</strong></font>：这一块其实没什么好说的了，主要是根据GM_getvalue和GM_setvalue结合一些点击事件来进行的。</p><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><hr><p>首先说一下<strong>设置页面</strong>，这个页面不单独存在于某一个页面，而是依托NP架构的个人设定页面，目前为了广泛性，支持了：**猫站、柠檬、杜比、春天、铂金、我堡、他吹风、北洋园以及天空。默认使用猫站页面~**设定成功以后，就不用每次更新都要更改了。</p><p><strong>由于个人失误，导致脚本设置页面404，建议清除一下后边提到的数据，保留一对花括号{}即可。然后更新脚本。或者直接打开 <a href="https://pterclub.com/usercp.php?action=personal#setting">https://pterclub.com/usercp.php?action=personal#setting</a></strong></p><p><strong>然后设置【选择脚本设置站点(默认猫站)】为其他站点。</strong></p><ol><li>我们先打开看一下初始化的界面，所有支持的脚本都在，自定义的快速搜索也都在~</li></ol><p><a href="https://www.z4a.net/image/gmkPMf"><img src="https://www.z4a.net/images/2021/04/02/1fb29928a83adb456.png" alt="1fb29928a83adb456.png"></a></p><ol start="2"><li>我们需要精简一下，脚本设置页面点进去，跳转到猫站的个人设定页面，多了一些元素</li></ol><p><a href="https://www.z4a.net/image/gmkXvE"><img src="https://www.z4a.net/images/2021/04/02/24b21f4de1b1f1fa3.png" alt="24b21f4de1b1f1fa3.png"></a></p><p><strong>转发站点设置</strong>：支持了如上一些站点，但是有一些我们肯定用不到，我们可以取消勾选，然后点击保存。</p><p><a href="https://www.z4a.net/image/gmk9rr"><img src="https://www.z4a.net/images/2021/04/02/32776ac0a79cc2f2f.png" alt="32776ac0a79cc2f2f.png"></a></p><p><strong>常用站点设置</strong>：这时候常用站点设置以及缩小为上边选择的站点了，常用站点适用于一次性打开多个站点发布页面的，这里举例选了6个。每一个站点第一次点击常用都会出现一个拦截窗口，点击始终允许就可以一次性打开多个发布页了。下边放一个三个站的动图效果（可能需要右键新标签页中打开）：</p><p><a href="https://gifyu.com/image/rOJi"><img src="https://s4.gifyu.com/images/1234ca82f4501e1c2e13.gif" alt="1234ca82f4501e1c2e13.gif"></a></p><p><font color=red>注意：如果没有出现动图里的标记，看解释说明直接设置试试。<a href="https://support.google.com/chrome/answer/95472?co=GENIE.Platform=Desktop&hl=zh-Hans">阻止或允许在 Chrome 中显示弹出式窗口</a>。</font></p><p><strong>脚本设置站点</strong>：这个就看每个人喜欢用哪个站点来跳转了，NP架构下大同小异，为了能够覆盖多数人选择，这里支持了好几个站点。<strong>如果没有猫站可以在脚本最开始改default_setting_host这一个值，具体操作看脚本说明</strong>。</p><p><strong>是否在种子页面开启快捷搜索功能：</strong>主要是之前为了方便查询是否重复，支持了几个外站直接搜索的功能，如下图，在有IMDB的前提下可以直接搜索：</p><p><a href="https://www.z4a.net/image/gmIeX5"><img src="https://www.z4a.net/images/2021/04/04/18.png" alt="18.png"></a></p><p><strong>快速搜索站点</strong>：这个还是跟之前一样，能够快速搜索查询其他站点是否有对应的资源，我们用{}中间插入变量名用于后续替换搜索，如{imdbid}后期替换为imdb的编号tt1234567之类的，{search_name}替换为影视名称用于搜索。按照格式一行一个即可~也可以进行删除。</p><p>另外脚本默认开启了豆瓣搜索的小功能，搜索的站点是上面设置的一些站点：</p><p><a href="https://www.z4a.net/image/gmITGh"><img src="https://www.z4a.net/images/2021/04/04/19.png" alt="19.png"></a></p><p><strong>是否匿名</strong>：很简单了，就是想不想匿名发布资源。</p><hr><p>上述是基本上都会用到的功能，下边几个key值简单介绍一下：</p><blockquote><p>PTPimg的key值输入保存以后种子页面会多一个转存PTP选项，就是将海报等之类的大图转存PTPIMG</p><p>TMDB的key值用于需要输入TMDB的编号的站点使用，可以自己网上搜索或者注册一个</p><p>四个图床的API-KEY值，基本上都需要注册之后获取，用于单张图片转存，不方便的就是说要一张一张进行</p></blockquote><p><strong>单图转存</strong>：配置好上述几个key之后就可以点击种子页面的单图转存进入同一个页面进行操作，好处是不用管到底是什么架构可以依托于国内NP页面进行操作，可以移植到国内大部分NP站点不用更新代码，也可以覆盖大多数人群。</p><p><a href="https://www.z4a.net/image/gmkJQJ"><img src="https://www.z4a.net/images/2021/04/02/4.png" alt="4.png"></a></p><h3 id="示范一例（单图到PTP）"><a href="#示范一例（单图到PTP）" class="headerlink" title="示范一例（单图到PTP）"></a>示范一例（单图到PTP）</h3><hr><p><a href="https://www.z4a.net/image/gmk19O"><img src="https://www.z4a.net/images/2021/04/02/5.png" alt="5.png"></a></p><p>我自己配置好的一个示范，转存PTP就是用于将一些不需要缩略图的图片转存到PTPIMG。由于点击之后会要求我们输入图片地址，所以我们先复制一个图片地址再进行点击：<a href="http://img.cmct.xyz/2021/03/30/.Golden.Orchestra.2016.BluRay.1080p.x264.DTS-CMCT_s.jpg">http://img.cmct.xyz/2021/03/30/.Golden.Orchestra.2016.BluRay.1080p.x264.DTS-CMCT_s.jpg</a></p><p><a href="https://www.z4a.net/image/gmkiV0"><img src="https://www.z4a.net/images/2021/04/02/6.png" alt="6.png"></a></p><p><a href="https://www.z4a.net/image/gmk8Pj"><img src="https://www.z4a.net/images/2021/04/02/7.png" alt="7.png"></a></p><p>粘贴得到如下代码：<code>[img]https://ptpimg.me/9l89dg.jpg[/img]</code>, 然后我们看看图片是什么样的：</p><p><img src="https://ptpimg.me/9l89dg.jpg" alt="ptpimg"></p><p>没错，就是想要转存的那张图片了……</p><h3 id="示范一例（多图到PIXhost）"><a href="#示范一例（多图到PIXhost）" class="headerlink" title="示范一例（多图到PIXhost）"></a>示范一例（多图到PIXhost）</h3><hr><p>前边已经讲解了，是为了防盗链的多图一起转，所以现在使用还是有一点局限性。<strong>只适用于FL/TTG/HDC/LemonHD/AVZ/PHD的部分图床的图片。</strong></p><p>我们仅仅以AVZ的图片作为讲解：</p><p><a href="https://www.z4a.net/image/gmkf7P"><img src="https://www.z4a.net/images/2021/04/02/8.png" alt="8.png"></a></p><p>比以往多了一个转存截图，然后我们给截图加了一个可以选择的属性，选中截图之后点击转存截图就会有信息显示到下边的框框里。AVZ截图很多我们不需要那么多，所以依次选择自己想要的截图：</p><p><a href="https://www.z4a.net/image/gmkviv"><img src="https://www.z4a.net/images/2021/04/02/9.png" alt="9.png"></a></p><p>依上图，我们选择了6张，然后点击转存截图：稍等片刻，正在处理……然后处理成功！！为了支持外站，大小设置成了350px…</p><p><a href="https://www.z4a.net/image/gmkKPL"><img src="https://www.z4a.net/images/2021/04/02/10.png" alt="10.png"></a></p><p>有可能转载之前会用到获取豆瓣的功能，所以我在这里留了一个空行。</p><p>放到种子描述里看看效果：</p><p><a href="https://www.z4a.net/image/gmkNz5"><img src="https://www.z4a.net/images/2021/04/02/14.png" alt="14.png"></a></p><h3 id="示范一例（单图转载）"><a href="#示范一例（单图转载）" class="headerlink" title="示范一例（单图转载）"></a>示范一例（单图转载）</h3><hr><p>这次我们以Filelis的一张防盗图作为示例：<a href="https://yes.ilikeshots.club/images/2021/04/02/8747ff431876b843b1fdd2f01358b38a.png">https://yes.ilikeshots.club/images/2021/04/02/8747ff431876b843b1fdd2f01358b38a.png</a></p><p>如果没搞错的话，应该是防盗的，哈哈~~~</p><p><a href="https://www.z4a.net/image/gmkR3k"><img src="https://www.z4a.net/images/2021/04/02/11.png" alt="11.png"></a></p><p>让子弹飞一会儿~~</p><p><a href="https://www.z4a.net/image/gmkl7b"><img src="https://www.z4a.net/images/2021/04/02/12.png" alt="12.png"></a></p><p>我们将bbcode防盗一个种子描述里看看效果：</p><p><a href="https://www.z4a.net/image/gmkz8H"><img src="https://www.z4a.net/images/2021/04/02/13.png" alt="13.png"></a></p><p>这里我们选择的bbcode是中等大小图或者是原图，我觉得可以加一个缩略的bbcode代码。当你使用的时候我大概已经加上了，哈哈~~</p><h3 id="补充-如何转移配置呢"><a href="#补充-如何转移配置呢" class="headerlink" title="补充(如何转移配置呢)"></a>补充(如何转移配置呢)</h3><hr><p>有时候可能需要备份和转移，那么我们的配置到底存在哪里呢？</p><p>打开油猴，由于备份存储数据需要打开一个高级面板，我们设置通用配置模式为高级：</p><p><a href="https://www.z4a.net/image/gmu1YH"><img src="https://www.z4a.net/images/2021/04/03/15.png" alt="15.png"></a></p><p><a href="https://www.z4a.net/image/gmu3ef"><img src="https://www.z4a.net/images/2021/04/03/16.png" alt="16.png"></a></p><p>然后发现脚本编辑页面多了一个存储选项，我们需要做的就是把里边的东西拷贝出来，用作备份，想要还原就覆盖好了。</p><h3 id="禁转提示2021-04-10（1-7-2）"><a href="#禁转提示2021-04-10（1-7-2）" class="headerlink" title="禁转提示2021.04.10（1.7.2）"></a>禁转提示2021.04.10（1.7.2）</h3><hr><p>贴吧有人说禁转加个提示什么的，想想也是，之前有次从别的站搜索到岛的资源，还得退出去搜一些是否独占。。。这可就不妥了~</p><p>开整（动了一部分代码，可能伴随部分bug，欢迎反馈），看图：</p><p><a href="https://www.z4a.net/image/gwIOOa"><img src="https://www.z4a.net/images/2021/04/11/20.png" alt="20.png"></a><br><a href="https://www.z4a.net/image/gwIQ4P"><img src="https://www.z4a.net/images/2021/04/11/21.png" alt="21.png"></a><br><a href="https://www.z4a.net/image/gwIk5T"><img src="https://www.z4a.net/images/2021/04/11/22.png" alt="22.png"></a></p><p>分成了三类资源，独占-限转-一般。限转的话看一下日期是否达到7天，是的话就可以点击确定了~</p><p>其他站的一些禁转也加了判断，但是我一个人测试或者站点不全什么的，有什么要增加的可以留言。</p><h3 id="支持站点排序（1-7-3）"><a href="#支持站点排序（1-7-3）" class="headerlink" title="支持站点排序（1.7.3）"></a>支持站点排序（1.7.3）</h3><hr><p>默认排序有时候不能满足所有人需求，所以接着整，弄一个支持手动拖拽排序的版本。废话不多说，看动图：</p><p><a href="https://gifyu.com/image/rOJM"><img src="https://s4.gifyu.com/images/1233ea6c7bfb8339bec.gif" alt="1233ea6c7bfb8339bec.gif"></a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>折腾不易，总算是弄好了，哈哈~~</p><p>如果你有什么好的建议，欢迎留言~</p><p>如果你有什么bug反馈，欢迎留言~</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text3 激活过程（2021）</title>
    <link href="/Sublime-Text3-%E6%BF%80%E6%B4%BB%E8%BF%87%E7%A8%8B%EF%BC%882021%EF%BC%89/"/>
    <url>/Sublime-Text3-%E6%BF%80%E6%B4%BB%E8%BF%87%E7%A8%8B%EF%BC%882021%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>一直都在用 sublime text3 编写js代码，这几天一直说注册码invalid，然后删除掉之后显示未注册，未注册也能用，但是经常会弹窗叫购买。。</p><p>所以在网上找了一番：</p><div class="hljs code-wrapper"><pre><code class="hljs dns">----- BEGIN LICENSE -----Member J2TeaMSingle User LicenseEA7E-<span class="hljs-number">1011316</span>D7DA350E <span class="hljs-number">1B8B0760</span> <span class="hljs-number">972F8B60</span> F<span class="hljs-number">3E64036</span>B<span class="hljs-number">9B4E234</span> F356F38F <span class="hljs-number">0</span>AD1E3B7 <span class="hljs-number">0</span>E9C5FADFA0A2ABE <span class="hljs-number">25</span>F65BD8 D<span class="hljs-number">51458E5</span> <span class="hljs-number">3923</span>CE80<span class="hljs-number">87428428</span> <span class="hljs-number">79079A01</span> AA69F319 A1AF29A4A684C2DC <span class="hljs-number">0B1583D4</span> <span class="hljs-number">19</span>CBD290 <span class="hljs-number">217618</span>CD<span class="hljs-number">5653E0A0</span> BACE3948 BB2EE45E <span class="hljs-number">422D2C87</span>DD9AF44B <span class="hljs-number">99C49590</span> D2DBDEE1 <span class="hljs-number">75860</span>FD2<span class="hljs-number">8</span>C8BB2AD B2ECE5A4 EFC08AF2 <span class="hljs-number">25A9B864</span>------ END LICENSE ------</code></pre></div><p>搞不好哪天又用不了了，哭~~</p><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><hr><p>即使注册码能用，也一会就失效了，所以还是为了万全改一个host：</p><div class="hljs code-wrapper"><pre><code class="hljs accesslog"># sublimetext<span class="hljs-number">0.0.0.0</span> license.sublimehq.com<span class="hljs-number">0.0.0.0</span> <span class="hljs-number">45</span>.<span class="hljs-number">55</span>.<span class="hljs-number">255</span>.<span class="hljs-number">55</span><span class="hljs-number">0.0.0.0</span> <span class="hljs-number">45</span>.<span class="hljs-number">55</span>.<span class="hljs-number">41</span>.<span class="hljs-number">223</span><span class="hljs-number">127.0.0.1</span> www.sublimetext.com<span class="hljs-number">127.0.0.1</span> sublimetext.com<span class="hljs-number">127.0.0.1</span> sublimehq.com<span class="hljs-number">127.0.0.1</span> telemetry.sublimehq.com</code></pre></div><p>用了一阵子了，没有移除注册码了，应该是已经成功了。</p><p><a href="https://imgtu.com/i/c92pY6"><img src="https://z3.ax1x.com/2021/03/29/c92pY6.png" alt="c92pY6.png"></a></p><p>记录一下。后期看看还有没有有用的注册码。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python操作种子文件的几点心得</title>
    <link href="/python%E6%93%8D%E4%BD%9C%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%82%B9%E5%BF%83%E5%BE%97/"/>
    <url>/python%E6%93%8D%E4%BD%9C%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%82%B9%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前在写种鸡的时候，免不了要对种子进行操作，python相对第三方库比较完备，所以整理一篇看看我们能够用python实现哪些功能，也欢迎大家补充。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><hr><ol><li>获取种子hash值</li></ol><p>一般来说，我们需要根据hash值获取客户端内的种子信息，或者在做备份或者更换种子路径的时候就需要比对。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> bencode  <span class="hljs-comment"># 注意安装的模块名叫bencode.py</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params">filename</span>):</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:        torrent_data = f.read()        metainfo = bencode.bdecode(torrent_data)        info = metainfo[<span class="hljs-string">&#x27;info&#x27;</span>]        <span class="hljs-keyword">return</span> hashlib.sha1(bencode.bencode(info)).hexdigest()<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:    print(get_hash(<span class="hljs-string">r&quot;J:\PTP种子\[OpenCD].蔡琴 - 常青树 (2008) FLAC.torrent&quot;</span>))</code></pre></div><ol start="2"><li>解析种子内部</li></ol><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torrent_parser <span class="hljs-keyword">as</span> tptorrent_path = <span class="hljs-string">r&quot;E:\PTP种子\[NPUBits].Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv.torrent&quot;</span>data = tp.parse_torrent_file(torrent_path)print(data)</code></pre></div><p>输出结果（单文件）：</p><div class="hljs code-wrapper"><pre><code class="hljs prolog">&#123;  <span class="hljs-string">&#x27;announce&#x27;</span>: <span class="hljs-string">&#x27;http://6.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,  <span class="hljs-string">&#x27;announce-list&#x27;</span>: [    [      <span class="hljs-string">&#x27;http://6.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>    ],    [      <span class="hljs-string">&#x27;http://4.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>    ]  ],  <span class="hljs-string">&#x27;comment&#x27;</span>: <span class="hljs-string">&#x27;http://passthepopcorn.me/torrents.php?id=207584&amp;torrentid=734627&#x27;</span>,  <span class="hljs-string">&#x27;created by&#x27;</span>: <span class="hljs-string">&#x27;qBittorrent v4.1.9.1&#x27;</span>,  <span class="hljs-string">&#x27;creation date&#x27;</span>: <span class="hljs-number">1576502187</span>,  <span class="hljs-string">&#x27;info&#x27;</span>: &#123;    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">19108558519</span>,    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv&#x27;</span>,    <span class="hljs-string">&#x27;piece length&#x27;</span>: <span class="hljs-number">8388608</span>,    <span class="hljs-string">&#x27;pieces&#x27;</span>: [],    <span class="hljs-string">&#x27;private&#x27;</span>: <span class="hljs-number">1</span>,    <span class="hljs-string">&#x27;source&#x27;</span>: <span class="hljs-string">&#x27;[npupt.com] 蒲公英PT站&#x27;</span>  &#125;&#125;</code></pre></div><p>多文件的其实也差不多，我们可以解析出来的东西包括tracker，种子制作时间，制作工具，文件大小，块的数量，以及source和comment字段。同时还可以解析出文件的结构。</p><ol start="3"><li>清洗种子</li></ol><p>其实也是使用上边的torrent_parse模块，比如我们需要更换trcker。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torrent_parser <span class="hljs-keyword">as</span> tptorrent_path = <span class="hljs-string">r&quot;E:\PTP种子\[NPUBits].Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv.torrent&quot;</span>data = tp.parse_torrent_file(torrent_path)data[<span class="hljs-string">&#x27;announce&#x27;</span>] = <span class="hljs-string">&#x27;what you want here&#x27;</span>new_torrent_path = <span class="hljs-string">&#x27;./test.torrent&#x27;</span>tp.create_torrent_file(new_torrent_path, data)</code></pre></div><p>这样就把tracker换了，友情提示，貌似换了tracker也不能改变种子的hash，可以尝试改改source字段或者新增字段等等。</p><ol start="4"><li>制作种子</li></ol><p>有的时候源种子文件有一些图片，字幕，我们不想要，由于pieces字段极长，我们也不太清楚其内部生成机理，所以还是重新制作种子比较方便。比如种鸡在遇到FileList内部含有字幕文件的时候就得重新制作了：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torrentool.torrent <span class="hljs-keyword">import</span> Torrent<span class="hljs-keyword">import</span> ostarget_path = <span class="hljs-string">&quot;the dir you want to bencode&quot;</span><span class="hljs-keyword">if</span> os.path.isdir(target_path): <span class="hljs-comment"># 判断是不是目录</span>    files = os.listdir(target_path)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([item.endswith(<span class="hljs-string">&#x27;.srt&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> files]): <span class="hljs-comment"># 目录中有字幕文件就重新制作，当然也可以解析种子源文件</span>        <span class="hljs-comment"># 进行重新制作，一般还比较花时间的~</span>        file_data = Torrent.create_from(target_path)         file_data.announce_urls = [<span class="hljs-string">b&#x27;https://hudbt.hust.edu.cn/announce.php&#x27;</span>] <span class="hljs-comment"># 写入你自己想要填写的tracer</span>        file_data.to_file(origin_torrent_path)</code></pre></div><p>由于Torrent制作的时候如果碰到是文件夹，不会判断里边是不是有字幕文件等等，所以我们修改一下Torrent.py的源代码</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_target_files_info</span>(<span class="hljs-params">cls, src_path: Path</span>) -&gt; Tuple[List[Tuple[str, int, List[str]]], int]:</span>        is_dir = src_path.is_dir()        src_path = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;src_path&#125;</span>&#x27;</span>  <span class="hljs-comment"># Force walk() to return unicode names.</span>        target_files = []        <span class="hljs-keyword">if</span> is_dir:            <span class="hljs-keyword">for</span> base, _, files <span class="hljs-keyword">in</span> walk(src_path):                <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:                    <span class="hljs-keyword">if</span> file.endswith((<span class="hljs-string">&#x27;srt&#x27;</span>, <span class="hljs-string">&#x27;ass&#x27;</span>, <span class="hljs-string">&#x27;ssa&#x27;</span>)):  <span class="hljs-comment"># 这里我们把字幕文件移除了，当然也可以自己设定，或者改写函数传递一个filter更加合理</span>                        files.remove(file)                target_files.extend([join(base, fname) <span class="hljs-keyword">for</span> fname <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(files)])        <span class="hljs-keyword">else</span>:            target_files.append(src_path)        target_files_ = []        total_size = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> fpath <span class="hljs-keyword">in</span> target_files:            file_size = getsize(fpath)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_size:                <span class="hljs-keyword">continue</span>            target_files_.append((fpath, file_size, normpath(fpath.replace(src_path, <span class="hljs-string">&#x27;&#x27;</span>)).strip(sep).split(sep)))            total_size += file_size        <span class="hljs-keyword">return</span> target_files_, total_size</code></pre></div><ol start="5"><li>顺带说一下qb下的fastresume文件解析</li></ol><p>经常qb会突然崩溃，然后种子文件啥的都还在就是需要重新校验。我们可以找到Back_Up下的种子和fastresume，解析fastresume找到保存路径，直接用qbittorrent-api重新加载种子并且跳过校验。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bencoderpath = <span class="hljs-string">r&quot;J:\BT_backup\000e17466dc95393df0dd92193955310597ac8db.fastresume&quot;</span>f = <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>)d = bencoder.decode(f.read())<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> d.items():    print(item)</code></pre></div><p>输出结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs python">(<span class="hljs-string">b&#x27;active_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;added_time&#x27;</span>, <span class="hljs-number">1599093382</span>)(<span class="hljs-string">b&#x27;allocation&#x27;</span>, <span class="hljs-string">b&#x27;sparse&#x27;</span>)(<span class="hljs-string">b&#x27;auto_managed&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;completed_time&#x27;</span>, <span class="hljs-number">1599093382</span>)(<span class="hljs-string">b&#x27;download_rate_limit&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;file-format&#x27;</span>, <span class="hljs-string">b&#x27;libtorrent resume file&#x27;</span>)(<span class="hljs-string">b&#x27;file-version&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;finished_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;httpseeds&#x27;</span>, [])(<span class="hljs-string">b&#x27;info-hash&#x27;</span>, <span class="hljs-string">b&#x27;\x00\x0e\x17Fm\xc9S\x93\xdf\r\xd9!\x93\x95S\x10Yz\xc8\xdb&#x27;</span>)(<span class="hljs-string">b&#x27;last_download&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;last_seen_complete&#x27;</span>, <span class="hljs-number">1599205887</span>)(<span class="hljs-string">b&#x27;last_upload&#x27;</span>, <span class="hljs-number">1793133</span>)(<span class="hljs-string">b&#x27;libtorrent-version&#x27;</span>, <span class="hljs-string">b&#x27;1.2.6.0&#x27;</span>)(<span class="hljs-string">b&#x27;max_connections&#x27;</span>, <span class="hljs-number">100</span>)(<span class="hljs-string">b&#x27;max_uploads&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;num_complete&#x27;</span>, <span class="hljs-number">4</span>)(<span class="hljs-string">b&#x27;num_downloaded&#x27;</span>, <span class="hljs-number">16777215</span>)(<span class="hljs-string">b&#x27;num_incomplete&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;paused&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;peers&#x27;</span>, <span class="hljs-string">b&#x27;\xb7\xb2\xc5g\x86\x88p0F\\\xc78\xdd\xe8\xba\x1cA\xf2&#x27;</span>)(<span class="hljs-string">b&#x27;peers6&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;pieces&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-category&#x27;</span>, <span class="hljs-string">b&#x27;\xe7\x94\xb5\xe5\xbd\xb1&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-hasRootFolder&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;qBt-name&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-queuePosition&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;qBt-ratioLimit&#x27;</span>, -<span class="hljs-number">2000</span>)(<span class="hljs-string">b&#x27;qBt-savePath&#x27;</span>, <span class="hljs-string">b&#x27;W:\\HUDBT-2019-06-09\\&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-seedStatus&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;qBt-seedingTimeLimit&#x27;</span>, -<span class="hljs-number">2</span>)(<span class="hljs-string">b&#x27;qBt-tags&#x27;</span>, [])(<span class="hljs-string">b&#x27;qBt-tempPathDisabled&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;save_path&#x27;</span>, <span class="hljs-string">b&#x27;W:\\HUDBT-2019-06-09\\&#x27;</span>)(<span class="hljs-string">b&#x27;seed_mode&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;seeding_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;sequential_download&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;stop_when_ready&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;super_seeding&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;total_downloaded&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;total_uploaded&#x27;</span>, <span class="hljs-number">15383212222</span>)(<span class="hljs-string">b&#x27;trackers&#x27;</span>, [[<span class="hljs-string">b&#x27;https://www.hddolby.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>]])(<span class="hljs-string">b&#x27;upload_rate_limit&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;url-list&#x27;</span>, [])</code></pre></div><p>好吧，今天的内容就到这里结束了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>都是第三方包的应用，只要善于搜索尝试总结，就可以掌握了。</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PT发布之一键转载脚本使用指南</title>
    <link href="/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>正如自己所想的，现在正在逐步公开脚本，搭建的GitHub项目在10个月前就已经存在了——<a href="https://github.com/tomorrow505/auto_feed_js">auto_feed_js</a>。无奈当时过于低调，没有什么反响，现在再次公开，并在这里附上一点使用指南。现在已经将最新的版本1.6.8上传过去了。</p><p><strong>注意：由于版本更新，最新版本需要参照<a href="https://tomorrow505.xyz/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97-2/">PT发布之一键转载脚本使用指南(2)</a>使用。</strong></p><div class="note note-primary">            <p>为了使用方便，现将脚本更新至<a href="https://greasyfork.org/zh-CN/scripts/424132-auto-feed">greasyfork.org</a>，最新版本仍旧为1.6.8。请通过此方式安装，以后更新可以直接安装更新。</p><p><font size="3px">项目托管在Github上，欢迎Star：</font><iframe src="https://ghbtns.com/github-btn.html?user=tomorrow505&amp;repo=auto_feed_js&amp;type=star&amp;count=true&amp;size=large" frameborder="0" scrolling="0" width="170" height="30" title="GitHub" style="vertical-align: bottom"></iframe></p>          </div><h3 id="2021-3-23补充"><a href="#2021-3-23补充" class="headerlink" title="2021.3.23补充"></a>2021.3.23补充</h3><hr><p>看到有人说不会用，那就再补一点基础知识好了。首先这是基于油猴的一个脚本，所以需要油猴插件，我自己用chrome，火狐、edge等都有，所以首先需要安装这个插件。链接：<a href="https://www.tampermonkey.net/%E3%80%82">https://www.tampermonkey.net/。</a></p><p><strong>如果被墙的话，自行搜索离线安装方案。</strong></p><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><hr><ol><li>安装好之后会自动启用，扩展区域会出现相应扩展图标，点击打开之后选择打开管理面板&gt;&gt;</li></ol><p><img src="https://pic2.zhimg.com/80/v2-682dc75260f519287a7a75fc653b0b35_720w.jpg" alt="油猴面板"></p><p>然后，点击最左边加号选择新建一个脚本，将GitHub页面里的auto_feed_js里的内容替换新建脚本里的内容，ctrl+s保存。</p><p><img src="https://pic1.zhimg.com/80/v2-6a9a3d2f344a8981b2d52c7f4e3b96f4_720w.jpg" alt="新建"></p><p>再次打开auto_feed进行编辑，按照后续的使用配置配置个人的站点即可。</p><ol start="2"><li>直接打开<a href="https://greasyfork.org/zh-CN/scripts/424132-auto-feed">greasyfork.org</a>，会显示安装按钮，安装即可。以后更新的话也直接打开该页面，进行更新即可。</li></ol><h4 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h4><hr><p>在脚本中划分了几个部分，最开始就是用户配置的部分，也就是用户需要了解的部分，接下来分别来讲它们的作用。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*******************************************************************************************************************</span><span class="hljs-comment">*                                          part 0 用户变量层                                                        *</span><span class="hljs-comment">********************************************************************************************************************/</span><span class="hljs-comment">//提供可用的获取豆瓣信息两个api，从0-1选择。主要应用于外站，</span><span class="hljs-keyword">const</span> apis = [<span class="hljs-string">&#x27;https://ptgen.rhilip.info&#x27;</span>, <span class="hljs-string">&#x27;https://api.rhilip.info/tool/movieinfo/gen&#x27;</span>];<span class="hljs-keyword">const</span> api_chosen = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> if_uplver = <span class="hljs-number">1</span>; <span class="hljs-comment">//是否匿名，默认匿名，不匿名改成0</span><span class="hljs-keyword">const</span> tmdb_key = <span class="hljs-string">&#x27;0f79586eb9d92afa2b7266f7928b055c&#x27;</span>; <span class="hljs-comment">//TMDB API-KEY，用于发布需要TMDB编号的站点，这里提供一个key,如果使用不了了请自行申请</span><span class="hljs-comment">//欧美国家列表，可以酌情添加</span><span class="hljs-keyword">const</span> us_ue = [<span class="hljs-string">&#x27;挪威|丹麦|瑞典|芬兰|英国|爱尔兰|荷兰|比利时|卢森堡|法国|西班牙|葡萄牙|德国|奥地利|瑞士|美国|加拿大|澳大利亚|意大利|波兰|新西兰&#x27;</span>];<span class="hljs-comment">//是否在PTP/HDB/HDT/UHD种子列表显示搜索跳转功能，1表示显示，0表示隐藏</span><span class="hljs-keyword">const</span> SHOW_PTP_SEARCH_URLS = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> SHOW_HDB_SEARCH_URLS = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> SHOW_HDT_SEARCH_URLS = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> SHOW_UHD_SEARCH_URLS = <span class="hljs-number">0</span>;</code></pre></div><p>上述这一部分主要主要功能参见注释部分，可能基本上都不用改，就是匿名那里看自己想不想匿名。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> site_info = &#123;    <span class="hljs-comment">// &#x27;1PTBA&#x27;: &#x27;https://1ptba.com/&#x27;,   </span>    <span class="hljs-comment">// &#x27;52PT&#x27;: &#x27;https://52pt.site/&#x27;,</span>    <span class="hljs-comment">// &#x27;BHD&#x27; : &#x27;https://beyond-hd.me/&#x27;,</span>    <span class="hljs-comment">// &#x27;BLU&#x27;: &quot;https://blutopia.xyz/&quot;,</span>    <span class="hljs-comment">// &#x27;BTSchool&#x27;: &#x27;https://pt.btschool.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;CCF&#x27;: &#x27;http://ccfbits.org/&#x27;,</span>    <span class="hljs-string">&#x27;CMCT&#x27;</span>: <span class="hljs-string">&quot;https://springsunday.net/&quot;</span>,    <span class="hljs-string">&#x27;CHDBits&#x27;</span>: <span class="hljs-string">&quot;https://chdbits.co/&quot;</span>,    <span class="hljs-comment">// &#x27;DiscFan&#x27;: &#x27;https://discfan.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;Dragon&#x27;: &#x27;https://www.dragonhd.xyz/&#x27;,</span>    <span class="hljs-comment">// &#x27;HaiDan&#x27;: &#x27;https://www.haidan.video/&#x27;,</span>    <span class="hljs-string">&#x27;HD4FANS&#x27;</span>: <span class="hljs-string">&#x27;https://pt.hd4fans.org/&#x27;</span>,    <span class="hljs-comment">// &#x27;HDArea&#x27;: &#x27;https://www.hdarea.co/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDAtmos&#x27; : &#x27;https://hdatmos.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDB&#x27;: &#x27;https://hdbits.org/&#x27;,</span>    <span class="hljs-string">&#x27;HDChina&#x27;</span>: <span class="hljs-string">&quot;https://hdchina.org/&quot;</span>,    <span class="hljs-comment">// &#x27;HDCity&#x27;: &#x27;https://hdcity.city/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDDolby&#x27;: &#x27;https://www.hddolby.com/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDfans&#x27;: &#x27;http://hdfans.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDHome&#x27;: &quot;https://hdhome.org/&quot;,</span>    <span class="hljs-string">&#x27;HDPost&#x27;</span>: <span class="hljs-string">&#x27;https://pt.hdpost.top/&#x27;</span>,    <span class="hljs-comment">// &#x27;HDRoute&#x27;: &#x27;http://hdroute.org/&#x27;,</span>    <span class="hljs-string">&#x27;HDSky&#x27;</span>: <span class="hljs-string">&quot;https://hdsky.me/&quot;</span>,    <span class="hljs-comment">// &#x27;HDSpace&#x27;: &#x27;https://hd-space.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDT&#x27;: &#x27;https://hd-torrents.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDTime&#x27;: &#x27;https://hdtime.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDU&#x27;: &#x27;https://pt.hdupt.com/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDZone&#x27;: &#x27;https://hdzone.me/&#x27;,</span>    <span class="hljs-comment">// &#x27;HITPT&#x27;: &#x27;https://www.hitpt.com/&#x27;,</span>    <span class="hljs-string">&#x27;HUDBT&#x27;</span>: <span class="hljs-string">&#x27;https://hudbt.hust.edu.cn/&#x27;</span>,    <span class="hljs-comment">// &#x27;iTS&#x27;: &#x27;https://shadowthein.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;JoyHD&#x27;: &#x27;https://www.joyhd.net/&#x27;,</span>    <span class="hljs-string">&#x27;LemonHD&#x27;</span>: <span class="hljs-string">&quot;https://lemonhd.org/&quot;</span>,    <span class="hljs-string">&#x27;MTeam&#x27;</span>: <span class="hljs-string">&quot;https://kp.m-team.cc/&quot;</span>,    <span class="hljs-comment">// &#x27;NanYang&#x27;: &quot;https://nanyangpt.com/&quot;,</span>    <span class="hljs-comment">// &#x27;Oshen&#x27;: &#x27;http://www.oshen.win/&#x27;,</span>    <span class="hljs-string">&#x27;OurBits&#x27;</span>: <span class="hljs-string">&quot;https://ourbits.club/&quot;</span>,    <span class="hljs-string">&#x27;PTer&#x27;</span>: <span class="hljs-string">&quot;https://pterclub.com/&quot;</span>,    <span class="hljs-string">&#x27;PThome&#x27;</span>: <span class="hljs-string">&quot;https://www.pthome.net/&quot;</span>,    <span class="hljs-comment">// &#x27;PTMSG&#x27;: &#x27;https://pt.msg.vg/&#x27;,</span>    <span class="hljs-comment">// &#x27;PTNIC&#x27;: &#x27;https://www.ptnic.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;ptsbao&#x27;: &#x27;https://ptsbao.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;PTT&#x27;: &#x27;https://www.pttime.org/&#x27;,</span>    <span class="hljs-string">&#x27;PuTao&#x27;</span>: <span class="hljs-string">&quot;https://pt.sjtu.edu.cn/&quot;</span>,    <span class="hljs-comment">// &#x27;SoulVoice&#x27;: &#x27;https://pt.soulvoice.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;TCCF&#x27;: &#x27;https://et8.org/&#x27;,</span>    <span class="hljs-string">&#x27;TJUPT&#x27;</span>: <span class="hljs-string">&#x27;https://www.tjupt.org/&#x27;</span>,    <span class="hljs-string">&#x27;TLFbits&#x27;</span>: <span class="hljs-string">&quot;http://pt.eastgame.org/&quot;</span>,    <span class="hljs-string">&#x27;TTG&#x27;</span>: <span class="hljs-string">&quot;https://totheglory.im/&quot;</span>,    <span class="hljs-comment">// &#x27;UHD&#x27;: &#x27;https://uhdbits.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;YDY&#x27; :&#x27;https://pt.hdbd.us/&#x27;,</span>&#125;;</code></pre></div><p>这里罗列了脚本支持转发的站点，50个左右，前边有双斜线代表注释掉了，也就是不开启转发到这里。如果想要脚本显示转发图标，将上边的代码对应位置取消注释即可。</p><p><code>// &#39;UHD&#39;: &#39;https://uhdbits.org/&#39;, -&gt; &#39;UHD&#39;: &#39;https://uhdbits.org/&#39;,</code> 表示开启支持转发到UHD。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//支持快速搜索的站点列表，可自行添加或注释，举例：imdbid表示tt123456, imdbno表示123456，search_name表示the big bang thoery</span><span class="hljs-keyword">const</span> site_search_list = [    <span class="hljs-string">`&lt;a href=&quot;https://passthepopcorn.me/torrents.php?searchstr=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;PTP&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://broadcasthe.net/torrents.php?action=advanced&amp;imdb=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;BTN&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://hdbits.org/browse.php?search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;HDB&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://karagarga.in/browse.php?search=&#123;imdbid&#125;&amp;search_type=imdb&quot; target=&quot;_blank&quot;&gt;KG&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;http://cinemageddon.net/browse.php?search=&#123;imdbid&#125;&amp;proj=0&amp;descr=1&quot; target=&quot;_blank&quot;&gt;CG&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://filelist.io/browse.php?search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;FileList&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://beyond-hd.me/torrents?imdb=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;BHD&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://blutopia.xyz/torrents?imdb=&#123;imdbid&#125;#page/1&quot; target=&quot;_blank&quot;&gt;BLU&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://pt.hdpost.top/torrents?imdb=&#123;imdbid&#125;#page/1&quot; target=&quot;_blank&quot;&gt;HDPost&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://hd-torrents.org/torrents.php?&amp;search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;HDT&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://hd-space.org/index.php?page=torrents&amp;search=&#123;imdbno&#125;&amp;active=1&amp;options=2&quot; target=&quot;_blank&quot;&gt;HDSpace&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;http://hdroute.org/browse.php?action=s&amp;imdb=&#123;imdbno&#125;&quot; target=&quot;_blank&quot;&gt;HDR&lt;/a&gt;`,</span>    <span class="hljs-comment">// `&lt;a href=&quot;https://hdf.world/torrents.php?searchstr=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;HDF&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://privatehd.to/torrents?in=1&amp;search=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;PHD&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://avistaz.to/torrents?in=1&amp;search=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;AVZ&lt;/a&gt;`,</span>    <span class="hljs-comment">// `&lt;a href=&quot;https://xthor.tk/browse.php?sch=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;xTHOR&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://lemonhd.org/torrents.php?search=&#123;imdbid&#125;&amp;search_area=imdb&amp;suggest=4&quot; target=&quot;_blank&quot;&gt;Lemon&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://lemonhd.org/torrents.php?search=&#123;search_name&#125;&amp;search_area=0&quot; target=&quot;_blank&quot;&gt;Lemon2&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://uhdbits.org/torrents.php?searchstr=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;UHD&lt;/a&gt;`</span>];</code></pre></div><p>这里对应后图的快速搜索，即根据IMDB或名称查找站点是否有对应的资源，跟上边一样，注释掉了就不会显示。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//常用站点列表，这里只是举例说明，可以替换成自己想要的站点名称即可</span><span class="hljs-keyword">const</span> common_sites = [<span class="hljs-string">&#x27;HDPost&#x27;</span>, <span class="hljs-string">&#x27;TTG&#x27;</span>, <span class="hljs-string">&#x27;CMCT&#x27;</span>, <span class="hljs-string">&#x27;HUDBT&#x27;</span>, <span class="hljs-string">&#x27;LemonHD&#x27;</span>, <span class="hljs-string">&#x27;Pter&#x27;</span>];<span class="hljs-comment">//这部分是属于官种名称匹配，用于声明感谢，可自定义匹配正则以及感谢bbcode</span><span class="hljs-keyword">const</span> reg_team_name = &#123;    <span class="hljs-string">&#x27;MTeam&#x27;</span>: <span class="hljs-regexp">/-(.*mteam|mpad|tnp|BMDru)/i</span>,    <span class="hljs-string">&#x27;CMCT&#x27;</span>: <span class="hljs-regexp">/-(CMCT|cmctv)/i</span>,    <span class="hljs-string">&#x27;HDSky&#x27;</span>: <span class="hljs-regexp">/-(hds|.*@HDSky)/i</span>,    <span class="hljs-string">&#x27;CHDBits&#x27;</span>: <span class="hljs-regexp">/-(CHD|.*@CHDBits)/i</span>,    <span class="hljs-string">&#x27;OurBits&#x27;</span>: <span class="hljs-regexp">/(-Ao|-.*OurBits|-FLTTH|-IloveTV)/i</span>,    <span class="hljs-string">&#x27;TTG&#x27;</span>: <span class="hljs-regexp">/-(WiKi|DoA|.*TTG|NGB|ARiN)/i</span>,    <span class="hljs-string">&#x27;HDChina&#x27;</span>: <span class="hljs-regexp">/-(HDC)/i</span>,    <span class="hljs-string">&#x27;PTer&#x27;</span>: <span class="hljs-regexp">/-(Pter|.*Pter)/i</span>,    <span class="hljs-string">&#x27;LemonHD&#x27;</span>: <span class="hljs-regexp">/-(LHD|i18n|League.*)/i</span>,    <span class="hljs-string">&#x27;HDHome&#x27;</span>: <span class="hljs-regexp">/-hdh/i</span>,    <span class="hljs-string">&#x27;PThome&#x27;</span>: <span class="hljs-regexp">/(-pthome|-pth|.*@pth)/i</span>,    <span class="hljs-string">&#x27;PuTao&#x27;</span>: <span class="hljs-regexp">/-putao/i</span>,    <span class="hljs-string">&#x27;NanYang&#x27;</span>: <span class="hljs-regexp">/-nytv/i</span>,    <span class="hljs-string">&#x27;TLFbits&#x27;</span>: <span class="hljs-regexp">/-tlf/i</span>,    <span class="hljs-string">&#x27;HDDolby&#x27;</span>: <span class="hljs-regexp">/-DBTV/i</span>,    <span class="hljs-string">&#x27;FRDS&#x27;</span>: <span class="hljs-regexp">/-FRDS|@FRDS/i</span>,    <span class="hljs-string">&#x27;BeiTai&#x27;</span>: <span class="hljs-regexp">/-BeiTai/i</span>&#125;;<span class="hljs-keyword">const</span> thanks_str = <span class="hljs-string">&quot;[quote][b][color=Blue]转自&#123;site&#125;，感谢原制作者发布。[/color][/b][/quote]\n\n&#123;descr&#125;&quot;</span>;</code></pre></div><p>上边那个常用站点列表对应的是一键转发打开多个站点长传页面，可以对照样式添加想要发布的站点。另外的那部分是声明判断官种来感谢的，基本上不用管。</p><p>基本上只要设置这一部分就够了，如果自己不需要魔改的话。支持大概转发到50多个站点，上方设置开启了10来个而已，源站点没有具体计算。大概是国内NP架构都会有部分支持~</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><hr><p>以蝴蝶、FL、BLU、UHD为例，打开种子详情页面：</p><p><a href="https://imgtu.com/i/6TpgOJ"><img src="https://z3.ax1x.com/2021/03/22/6TpgOJ.png" alt="6TpgOJ.png"></a></p><p>典型的NP架构，内站无需多言，直接转发即可。</p><p><a href="https://imgtu.com/i/6TpRm9"><img src="https://z3.ax1x.com/2021/03/22/6TpRm9.png" alt="6TpRm9.png"></a></p><p><a href="https://imgtu.com/i/6Tpcy4"><img src="https://z3.ax1x.com/2021/03/22/6Tpcy4.png" alt="6Tpcy4.png"></a></p><p><a href="https://imgtu.com/i/6T9A7n"><img src="https://z3.ax1x.com/2021/03/22/6T9A7n.png" alt="6T9A7n.png"></a></p><p>FL表格不明显，自己单独写了一个表格，BLU和UHD分属于不同的外网架构。</p><h3 id="存在的问题及解决思路"><a href="#存在的问题及解决思路" class="headerlink" title="存在的问题及解决思路"></a>存在的问题及解决思路</h3><hr><p>它们转内站最大的问题就是：</p><ul><li>图片防外链：所以博客里边讲解了一些自动截图上传的python脚本。</li><li>缺失豆瓣信息：多是IMDB，所以使用了PTGen的API（感谢R酱）用于获取，博客里也有其他的一些API和实现方案。</li></ul><p>所以基本上就是点击获取就可以得到豆瓣信息，之后点击转发就可以了。<br><a href="https://imgtu.com/i/6T9740"><img src="https://z3.ax1x.com/2021/03/22/6T9740.md.png" alt="6T9740.md.png"></a><br><a href="https://imgtu.com/i/6TCVDH"><img src="https://z3.ax1x.com/2021/03/22/6TCVDH.md.png" alt="6TCVDH.md.png"></a></p><p>以上是电影的直接解决方案，但是一旦碰到剧集就傻眼了，因为国外的剧集基本上都是第一季的imdb。所以在不是第一季的前提下，又弄出了两种替代备选方案。</p><ul><li>点击选中API，会有一个隐藏的textare下拉出来，此时点击检索名称，会有一些检索结果，选中合适的资源对应的豆瓣链接，点击获取，成功后再次点击转发，已经OK了</li></ul><p><a href="https://imgtu.com/i/6TPpLQ"><img src="https://z3.ax1x.com/2021/03/22/6TPpLQ.md.png" alt="6TPpLQ.md.png"></a></p><p><a href="https://imgtu.com/i/6TPvkR"><img src="https://z3.ax1x.com/2021/03/22/6TPvkR.md.png" alt="6TPvkR.md.png"></a></p><ul><li>实在是没有搜索出来的，取消选中API，直接搜索名称会跳转到豆瓣，将获取到的豆瓣链接替换输入框里的imdb链接，再次点击获取即可，过程我就不演示了。</li></ul><p>至于脚本还拥有的其他功能，只能靠大家慢慢去探索了，总而言之，无论内站外站，都有了比较成熟的解决方案。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>世界上本没有路，走的人多了，也便成了路。（本篇文章所用截图均保存于路过图床，希望不会有事，哈哈~~~）</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动上传图片到路过图床</title>
    <link href="/Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E8%B7%AF%E8%BF%87%E5%9B%BE%E5%BA%8A/"/>
    <url>/Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E8%B7%AF%E8%BF%87%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前介绍了上传图片到imgbox，使用了第三方模块，那么我们现在用requests实现怎么上传图片到路过图床。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><hr><p>首先我们先访问<a href="https://imgtu.com/">路过网站</a>注册一个新的账号，然后登陆。F12获取登陆的cookie，用于填充在以下的代码中：</p><p>至于要提交什么数据其实使用Fiddler就可以了，但是这个不是我们今天讨论的重点。我们先来看看python是怎么实现的。</p><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-comment"># 上传图片到路过图床</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_luguo</span>(<span class="hljs-params">img_loc=<span class="hljs-literal">None</span></span>):</span>    <span class="hljs-comment"># 提交的数据为multi-part,一部分是文件，一部分是数据</span>        <span class="hljs-comment">## 打开文件二进制流，命名为source，抓取到的，类型为image/jpeg</span>    img = <span class="hljs-built_in">open</span>(img_loc, <span class="hljs-string">&quot;rb&quot;</span>)    files = [(<span class="hljs-string">&#x27;source&#x27;</span>, (img_loc.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>], img, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>))]        <span class="hljs-comment">## 提交的数据中有一个重要的字符串为auth_token，基本上会定时变，所以在上传之前我们先访问一次页面获取一下 </span>    auth_token = get_auth_token()    data = &#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;file&#x27;</span>,        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;upload&#x27;</span>,        <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-built_in">int</span>(time.time()) * <span class="hljs-number">1000</span>,        <span class="hljs-string">&#x27;auth_token&#x27;</span>: auth_token,        <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&quot;0&quot;</span>    &#125;    <span class="hljs-comment">## 请求的地址</span>    des_url = <span class="hljs-string">&#x27;https://imgtu.com/json&#x27;</span>        <span class="hljs-comment">## 提交数据和文件，cookies也是转换好的</span>    <span class="hljs-keyword">try</span>:        des_post = requests.post(            url=des_url,            data=data,            files=files,            cookies=luguo_cookies)        response = des_post.content.decode()        data = json.loads(response)        print(data)        <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;url&#x27;</span>]    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(<span class="hljs-string">&#x27;截图上传失败……%s&#x27;</span> % exc)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 上传之前先访问一次页面获取auth_token</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_auth_token</span>():</span>    url = <span class="hljs-string">&#x27;https://imgtu.com/&#x27;</span>    response = requests.get(url, cookies=luguo_cookies)    html = response.content.decode()    token = re.search(<span class="hljs-string">&#x27;auth_token=[a-z0-9]*&#x27;</span>, html).group()    token = token.split(<span class="hljs-string">&#x27;=&#x27;</span>)[-<span class="hljs-number">1</span>].strip()    <span class="hljs-keyword">return</span> token<span class="hljs-comment">## 将cookie字符串转换成字典的形式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cookies_raw2jar</span>(<span class="hljs-params">raw: <span class="hljs-built_in">str</span></span>) -&gt; dict:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Arrange Cookies from raw using SimpleCookies</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> raw:        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The Cookies is not allowed to be empty.&quot;</span>)    <span class="hljs-keyword">from</span> http.cookies <span class="hljs-keyword">import</span> SimpleCookie    cookie = SimpleCookie(raw)    <span class="hljs-keyword">return</span> &#123;key: morsel.value <span class="hljs-keyword">for</span> key, morsel <span class="hljs-keyword">in</span> cookie.items()&#125;<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    luguo_cookie_raw = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 登录后获取到的cookie字符串</span>    luguo_cookies = cookies_raw2jar(luguo_cookie_raw) <span class="hljs-comment"># 转换成字典</span>    img_path = <span class="hljs-string">r&quot;E:\HUDBT\imgs\Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&quot;</span> <span class="hljs-comment"># 测试的图片链接</span>    send_luguo(img_path, auth_token) <span class="hljs-comment"># 上传返回的是图片的地址</span></code></pre></div><p>输出结果(隐去了一部分不重要的个人信息)：</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;  <span class="hljs-string">&#x27;status_code&#x27;</span>: <span class="hljs-number">200</span>,  <span class="hljs-string">&#x27;success&#x27;</span>: &#123;    <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;image uploaded&#x27;</span>,    <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>  &#125;,  <span class="hljs-string">&#x27;image&#x27;</span>: &#123;    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,    <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">195587</span>,    <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-string">&#x27;1216&#x27;</span>,    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;1055&#x27;</span>,    <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 19:57:12&#x27;</span>,    <span class="hljs-string">&#x27;date_gmt&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 11:57:12&#x27;</span>,    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB DL.DDP5.1.x264 MZABI.mkv&#x27;</span>,    <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;storage_mode&#x27;</span>: <span class="hljs-string">&#x27;datefolder&#x27;</span>,    <span class="hljs-string">&#x27;md5&#x27;</span>: <span class="hljs-string">&#x27;7cf830075aff82dd6a8bb32d5ad565d7&#x27;</span>,    <span class="hljs-string">&#x27;original_filename&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&#x27;</span>,    <span class="hljs-string">&#x27;original_exifdata&#x27;</span>: <span class="hljs-string">&#x27;&#123;&quot;FileName&quot;:&quot;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&quot;,&quot;FileDateTime&quot;:&quot;1616414232&quot;,&quot;FileSize&quot;:&quot;195587&quot;,&quot;FileType&quot;:&quot;2&quot;,&quot;MimeType&quot;:&quot;image\\/jpeg&quot;,&quot;SectionsFound&quot;:&quot;&quot;,&quot;COMPUTED&quot;:&#123;&quot;html&quot;:&quot;width=\\&quot;1216\\&quot; height=\\&quot;1055\\&quot;&quot;,&quot;Height&quot;:&quot;1055&quot;,&quot;Width&quot;:&quot;1216&quot;,&quot;IsColor&quot;:&quot;1&quot;&#125;&#125;&#x27;</span>,    <span class="hljs-string">&#x27;views&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;category_id&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;chain&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>,    <span class="hljs-string">&#x27;thumb_size&#x27;</span>: <span class="hljs-string">&#x27;12273&#x27;</span>,    <span class="hljs-string">&#x27;medium_size&#x27;</span>: <span class="hljs-string">&#x27;118214&#x27;</span>,    <span class="hljs-string">&#x27;expiration_date_gmt&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;is_animated&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;source_md5&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;is_approved&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,    <span class="hljs-string">&#x27;file&#x27;</span>: &#123;      <span class="hljs-string">&#x27;resource&#x27;</span>: &#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;url&#x27;</span>      &#125;    &#125;,    <span class="hljs-string">&#x27;id_encoded&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.jpg&#x27;</span>,    <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.jpg&#x27;</span>,    <span class="hljs-string">&#x27;ratio&#x27;</span>: <span class="hljs-number">1.15260663507109</span>,    <span class="hljs-string">&#x27;size_formatted&#x27;</span>: <span class="hljs-string">&#x27;195.6 KB&#x27;</span>,    <span class="hljs-string">&#x27;url_viewer&#x27;</span>: <span class="hljs-string">&#x27;https://imgtu.com/i/6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;url_short&#x27;</span>: <span class="hljs-string">&#x27;https://imgtu.com/i/6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;image&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">195587</span>    &#125;,    <span class="hljs-string">&#x27;thumb&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.th.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.th&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.th.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-string">&#x27;12273&#x27;</span>    &#125;,    <span class="hljs-string">&#x27;medium&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.md.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.md&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.md.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-string">&#x27;118214&#x27;</span>    &#125;,    <span class="hljs-string">&#x27;display_url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.md.jpg&#x27;</span>,    <span class="hljs-string">&#x27;display_width&#x27;</span>: <span class="hljs-string">&#x27;680&#x27;</span>,    <span class="hljs-string">&#x27;display_height&#x27;</span>: <span class="hljs-number">590</span>,    <span class="hljs-string">&#x27;views_label&#x27;</span>: <span class="hljs-string">&#x27;次浏览&#x27;</span>,    <span class="hljs-string">&#x27;likes_label&#x27;</span>: <span class="hljs-string">&#x27;喜欢&#x27;</span>,    <span class="hljs-string">&#x27;how_long_ago&#x27;</span>: <span class="hljs-string">&#x27;2 秒 前&#x27;</span>,    <span class="hljs-string">&#x27;date_fixed_peer&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 19:57:12&#x27;</span>,    <span class="hljs-string">&#x27;title_truncated&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War....&#x27;</span>,    <span class="hljs-string">&#x27;title_truncated_html&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War....&#x27;</span>,    <span class="hljs-string">&#x27;is_use_loader&#x27;</span>: <span class="hljs-literal">False</span>  &#125;,  <span class="hljs-string">&#x27;request&#x27;</span>: &#123;    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;file&#x27;</span>,    <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;upload&#x27;</span>,    <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-string">&#x27;1616414181000&#x27;</span>,    <span class="hljs-string">&#x27;auth_token&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>  &#125;,  <span class="hljs-string">&#x27;status_txt&#x27;</span>: <span class="hljs-string">&#x27;OK&#x27;</span>&#125;</code></pre></div><p>测试图片：</p><p><img src="https://z3.ax1x.com/2021/03/22/6oOpND.jpg" alt="测试图片"></p><p>其实发现提供的数据还是挺多的，不仅包括图片链接，还有缩略小图和中等大小的图片。国内很多图床都是这种架构，那么只需要更改部分代码就可以实现上传图片到其他图床了，但是——请不要滥用。</p><p>本文只做技术探讨，不鼓励存放过多无意义的图片。本文属于原创作品，如果你喜欢这篇文章请收藏转发，或者给作者一定的打赏支持吧。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器的一点总结</title>
    <link href="/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>学习python也有一段时间了，用了也有一段时间了，但是有些东西不用就老会忘，索性写一点总结，备忘。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><blockquote><p>装饰器本质上是一个<strong>Python函数</strong>，它可以让其他函数在不需要做任何代码变动的前提下<strong>增加额外功能</strong>，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。<strong>装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</strong></p></blockquote><p>个人听到比较有趣的一个用处是：已经交付的产品，如果想要打补丁，别人已经在你的基础上开发了，你如果想要更改函数名称已经不太现实了，那么这个时候可以为原来的函数创建一个装饰器用来补救。</p><h3 id="分类及形式"><a href="#分类及形式" class="headerlink" title="分类及形式"></a>分类及形式</h3><hr><p>python装饰器的4种类型：函数装饰函数、函数装饰类、类装饰函数、类装饰类</p><p>废话不多说，先上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------函数装饰函数-------------------------#</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapFun</span>(<span class="hljs-params">func</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">a, b</span>):</span>        print(<span class="hljs-string">&#x27;function name:&#x27;</span>, func.__name__)        r = func(a, b)        <span class="hljs-keyword">return</span> r    <span class="hljs-keyword">return</span> inner<span class="hljs-meta">@wrapFun</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myadd</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> a + bprint(myadd(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))print(myadd.__name__)</code></pre></div><p>输出结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs python">function name: myadd<span class="hljs-number">5</span>inner</code></pre></div><p>个人理解：</p><ul><li><p>首先myadd函数定义的时候开辟了一个内存空间，可以进行加法运算；</p></li><li><p>@是装饰器的关键字，上面的例子就是说myadd外层包裹一个wrapFun，将myadd作为参数传递给了wrapFun，叫做func，指向一开始的内存空间；</p></li><li><p>同时在wrapFunc内部定义了一个函数inner，里边的执行过程包含了func那部分过程，同时将内部函数返回（并未调用），而此时myadd已经变成了inner，执行myadd(2, 3)等同于执行inner(2,3)。</p></li><li><p>约等于：myadd = wrapFun(myadd) -&gt; inner；此时myadd已经换了一个内存空间了，再调用就是inner的全过程了。</p></li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------函数装饰类-------------------------#</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapClass</span>(<span class="hljs-params">cls</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">a</span>):</span>        print(<span class="hljs-string">&#x27;class name:&#x27;</span>, cls.__name__)        cls.foo()        <span class="hljs-keyword">return</span> cls(a)    <span class="hljs-keyword">return</span> inner<span class="hljs-meta">@wrapClass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>():</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a</span>):</span>        self.a = a<span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">cls</span>):</span>        print(<span class="hljs-string">&#x27;Do sth at this time&#x27;</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">self</span>):</span>        print(<span class="hljs-string">&#x27;self.a =&#x27;</span>, self.a)m = Foo(<span class="hljs-string">&#x27;xiemanR&#x27;</span>)print(Foo.__name__)print(<span class="hljs-built_in">type</span>(m))m.fun()</code></pre></div><p>输出结果：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span>:</span> FooDo sth at this timeinner&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">Foo</span>&#x27;&gt;</span>self.a = xiemanR</code></pre></div><p>与上边的大同小异，这里就不再分析了……</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------类装饰函数-------------------------#</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowFunName</span>():</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, func</span>):</span>        self._func = func    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, a</span>):</span>        print(<span class="hljs-string">&#x27;function name:&#x27;</span>, self._func.__name__)        <span class="hljs-keyword">return</span> self._func(a)<span class="hljs-meta">@ShowFunName</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Bar</span>(<span class="hljs-params">a</span>):</span>    <span class="hljs-keyword">return</span> aprint(Bar(<span class="hljs-string">&#x27;xiemanR&#x27;</span>))</code></pre></div><p>输出结果：约等于 Bar = ShowFunName(Bar)， Bar的内存空间传递给了Bar._func，然后默认执行<code>__call__</code>函数。</p><div class="hljs code-wrapper"><pre><code class="hljs python">function name: BarxiemanR</code></pre></div><p>最后一类：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------类装饰类-------------------------#</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowClassName</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cls</span>):</span>        self._cls = cls    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, a</span>):</span>        print(<span class="hljs-string">&#x27;class name:&#x27;</span>, self._cls.__name__)        <span class="hljs-keyword">return</span> self._cls(a)<span class="hljs-meta">@ShowClassName</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foobar</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a</span>):</span>        self.value = a    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">self</span>):</span>        print(self.value)a = Foobar(<span class="hljs-string">&#x27;xiemanR&#x27;</span>)print(<span class="hljs-built_in">type</span>(a))a.fun()</code></pre></div><p>输出结果：相当于Foobar = ShowClassName(Foobar)，Foobar.cls 指向Foobar之前的内存空间，然后调用<code>__call__</code>函数返回了Foobar，Foobar绕了一圈，就是为了执行<code>__call__</code>返回Foobar之前的那部分代码。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span>:</span> Foobar&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">Foobar</span>&#x27;&gt;</span><span class="hljs-class"><span class="hljs-title">xiemanR</span></span></code></pre></div><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><ul><li>装饰带不定长度参数的函数： 通常装饰器不只装饰一个函数，每个函数参数的个数也不相同，这个时候使用不定长参数*args,**kwargs</li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clothes</span>(<span class="hljs-params">func</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wear</span>(<span class="hljs-params">*args, **kwargs</span>):</span>        print(<span class="hljs-string">&#x27;Buy clothes!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(func.__name__))        <span class="hljs-keyword">return</span> func(*args, **kwargs)    <span class="hljs-keyword">return</span> wear<span class="hljs-meta">@clothes</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">body</span>(<span class="hljs-params">part</span>):</span>    print(<span class="hljs-string">&#x27;The body feels could!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(part))<span class="hljs-meta">@clothes</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">head</span>(<span class="hljs-params">head_wear, num=<span class="hljs-number">2</span></span>):</span>    print(<span class="hljs-string">&#x27;The head need buy &#123;&#125; &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(num, head_wear))body(<span class="hljs-string">&#x27;hands&#x27;</span>)head(<span class="hljs-string">&#x27;headdress&#x27;</span>)<span class="hljs-comment"># 输出结果为：</span>Buy clothes!bodyThe body feels could!handsBuy clothes!headThe head need buy <span class="hljs-number">2</span> headdress!</code></pre></div><ul><li><strong>装饰器带参数</strong>：</li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 把装饰器再包装，实现了seasons传递装饰器参数。</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">seasons</span>(<span class="hljs-params">season_type</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clothes</span>(<span class="hljs-params">func</span>):</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wear</span>(<span class="hljs-params">*args, **kwargs</span>):</span>            <span class="hljs-keyword">if</span> season_type == <span class="hljs-number">1</span>:                s = <span class="hljs-string">&#x27;spring&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">2</span>:                s = <span class="hljs-string">&#x27;summer&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">3</span>:                s = <span class="hljs-string">&#x27;autumn&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">4</span>:                s = <span class="hljs-string">&#x27;winter&#x27;</span>            <span class="hljs-keyword">else</span>:                print(<span class="hljs-string">&#x27;The args is error!&#x27;</span>)                <span class="hljs-keyword">return</span> func(*args, **kwargs)            print(<span class="hljs-string">&#x27;The season is &#123;&#125;!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s, func.__name__))            <span class="hljs-keyword">return</span> func(*args, **kwargs)        <span class="hljs-keyword">return</span> wear    <span class="hljs-keyword">return</span> clothes<span class="hljs-meta">@seasons(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">children</span>():</span>    print(<span class="hljs-string">&#x27;i am children&#x27;</span>)children()print(children.__name__)<span class="hljs-comment"># 输出结果为：</span>The season <span class="hljs-keyword">is</span> summer!childreni am childrenwear</code></pre></div><p>这个就稍微复杂一点，又需要再嵌套一层，我们先看seasons接收了装饰器传递进去的参数，是一个数字2，然后season返回了一个clothes函数，这个函数接收参数children，返回一个wear函数，此时children已经变成了wear函数了，wear最后执行的是最最开始children内存空间里的代码，打印了i am children。</p><p>整理一下思路：children -&gt; clothese(2)(children) - &gt; wear；最后执行wear()。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><hr><p>语法糖博大精深，还需要努力学习，然后应用于实战。</p><p>举例说一下我之前写代码遇到的一个问题：我在一个主线程写了一个子线程，每隔一段时间从网络上爬取RSS的数据，结果呢有时候可能是因为网络原因卡死。那就设置一个超时的装饰器，等它超过时间没有返回结果就干掉重开。</p><blockquote><p>线程卡死的地方大多数都是在io或者http请求那。</p></blockquote><p>function_timeout这个模块便是处理这类问题的，废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> func_timeout <span class="hljs-keyword">import</span> func_set_timeout<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> func_timeout<span class="hljs-meta">@func_set_timeout(<span class="hljs-params"><span class="hljs-number">1</span></span>) </span><span class="hljs-comment"># 封装好的装饰器，只要task运行时间超过传进去的1秒，就会报出FunctionTimedOut的异常</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">task</span>():</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        print(<span class="hljs-string">&#x27;hello world&#x27;</span>)        time.sleep(<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-keyword">try</span>:        task()    <span class="hljs-keyword">except</span> func_timeout.exceptions.FunctionTimedOut:        print(<span class="hljs-string">&#x27;task func_timeout&#x27;</span>)</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>这类应用应该会有很多，发散思维多想想就会有收获的。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><p>[1] <a href="https://blog.csdn.net/xiemanR/article/details/72510885">python装饰器的4种类型：函数装饰函数、函数装饰类、类装饰函数、类装饰类</a></p><p>[2] <a href="https://blog.51cto.com/yishi/2354752">Python装饰器高级版—Python类内定义装饰器并传递self参数</a></p><p>[3] <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p04_define_decorator_that_takes_arguments.html">定义一个带参数的装饰器</a></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python使用IMDBID获取豆瓣信息</title>
    <link href="/Pythonh%E4%BD%BF%E7%94%A8IMDBID%E8%8E%B7%E5%8F%96%E8%B1%86%E7%93%A3%E4%BF%A1%E6%81%AF/"/>
    <url>/Pythonh%E4%BD%BF%E7%94%A8IMDBID%E8%8E%B7%E5%8F%96%E8%B1%86%E7%93%A3%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>上一篇说到了用API获取豆瓣信息，使用的都是豆瓣链接，这一次我们介绍一个API用于直接使用IMDB号获取豆瓣信息。还是那句话，API说不定哪天就不好使了，且用且珍惜。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><hr><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info_from_imdb</span>(<span class="hljs-params">url</span>):</span>    api_url = <span class="hljs-string">&#x27;https://omit.mkrobot.org/movie/infos/&#x27;</span>    imdb_id = re.search(<span class="hljs-string">r&quot;tt(\d+)&quot;</span>, url).group()    req_url = api_url + imdb_id    data = requests.get(req_url).json()    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    imdb_url = <span class="hljs-string">&#x27;https://www.imdb.com/title/tt5109280/&#x27;</span>    get_douban_info_from_imdb(imdb_url)</code></pre></div><p>显示结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;data&#x27;: &#123;    &#x27;title&#x27;: &#x27;寻龙传说 Raya and The Last Dragon&#x27;,    &#x27;image&#x27;: &#x27;https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2633531206.jpg&#x27;,    &#x27;director&#x27;: &#x27;唐·霍尔 / 卡洛斯·洛佩斯·埃斯特拉达 / 保罗·布里格斯 / 约翰·瑞帕&#x27;,    &#x27;scenarist&#x27;: &#x27;阮基 / 阿黛勒·林 / 保罗·布里格斯 / 唐·霍尔 / 卡洛斯·洛佩斯·埃斯特拉达 / 基尔·默里 / 约翰·瑞帕 / 迪恩·威林斯&#x27;,    &#x27;cast&#x27;: &#x27;凯莉·玛丽·陈 / 奥卡菲娜 / 嘉玛·陈 / 金大贤 / 吴珊卓 / 本尼迪克特·王 / 伊扎克·王 / 塔莉娅·陈 / 艾伦·图代克 / 迪辰·拉克曼 / 帕蒂·哈里森 / 姜成镐 / 罗斯·巴特勒 / 乔娜·肖 / 宋静秀 / 弗朗克西斯·周 / 保罗·扬 / 丽莎·德尔·门多 / 塔妮亚·古纳迪 / 珍妮·关 / 卢锡安·佩雷兹 / 文森特·罗德里格兹三世&#x27;,    &#x27;genre&#x27;: &#x27;动画 / 奇幻 / 冒险&#x27;,    &#x27;region&#x27;: &#x27;美国&#x27;,    &#x27;language&#x27;: &#x27;英语&#x27;,    &#x27;releaseDate&#x27;: &#x27;2021-03-05(中国大陆/美国)&#x27;,    &#x27;runtime&#x27;: &#x27;108分钟&#x27;,    &#x27;aka&#x27;: &#x27;魔龙王国(港) / 寻龙使者：拉雅(台) / 瑞亚和最后一条龙 / 拉雅和最后的龙&#x27;,    &#x27;originalTitle&#x27;: &#x27;Raya and The Last Dragon&#x27;,    &#x27;imdbId&#x27;: &#x27;tt5109280&#x27;,    &#x27;average&#x27;: &#x27;7.3&#x27;,    &#x27;votes&#x27;: &#x27;59109&#x27;,    &#x27;year&#x27;: &#x27;2021&#x27;,    &#x27;summary&#x27;: &#x27;很久以前，在充满奇幻色彩的龙佑之邦，人类和龙和谐地生活在一起。但当一股邪恶的力量袭来，龙牺牲了自己来拯救人类。500年后，同样的邪恶力量卷土重来，只有一个孤独的战士拉雅（凯莉·玛丽·陈 配音）承担重任，追踪传说中的最后一条龙，以修复这块破碎的土地，团结分裂的人民。在她的旅程中，她也会逐渐了解到拯救世界不仅仅需要一条龙，还需要信任和团队合作。&#x27;,    &#x27;link&#x27;: &#x27;https://movie.douban.com/subject/34804147/&#x27;,    &#x27;id&#x27;: &#x27;34804147&#x27;,    &#x27;updateTime&#x27;: 1616231860574  &#125;&#125;</code></pre></div><p>感谢那些无私奉献弄出这些API服务器的人~~~</p><h3 id="2021-03-22：补充"><a href="#2021-03-22：补充" class="headerlink" title="2021.03.22：补充"></a>2021.03.22：补充</h3><hr><p>还有一个API，据说都是豆瓣官方的API，可以直接转换imdbid到豆瓣id，算是一个补充吧。</p><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_id_from_imdb_id</span>(<span class="hljs-params">url</span>):</span>    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span>                      <span class="hljs-string">&#x27;537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span>    &#125;    api_url = <span class="hljs-string">&quot;https://movie.douban.com/j/subject_suggest?q=&quot;</span>    imdb_id = re.search(<span class="hljs-string">r&quot;tt(\d+)&quot;</span>, url).group()    req_url = api_url + imdb_id    data = requests.get(req_url, headers=headers).json()[<span class="hljs-number">0</span>] <span class="hljs-comment"># 这里得加上headers模拟浏览器，否则没结果，然后返回的是一个列表</span>    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    imdb_url = <span class="hljs-string">&#x27;https://www.imdb.com/title/tt5109280/&#x27;</span>    get_douban_id_from_imdb_id(imdb_url)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[&#123;<span class="hljs-string">&quot;episode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-string">&quot;https://img9.doubanio.com\/view\/photo\/s_ratio_poster\/public\/p2633531206.jpg&quot;</span>,<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;寻龙传说&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;https:\/\/movie.douban.com\/subject\/34804147\/?suggest=tt5109280&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;movie&quot;</span>,<span class="hljs-string">&quot;year&quot;</span>:<span class="hljs-string">&quot;2021&quot;</span>,<span class="hljs-string">&quot;sub_title&quot;</span>:<span class="hljs-string">&quot;Raya and The Last Dragon&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;34804147&quot;</span>&#125;]</code></pre></div><p>可以看到id字段就是豆瓣id了，还有豆瓣的海报图片，那么就可以根据豆瓣id做一些抓取的工作了，好了，就到这里吧。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>没有什么好总结了，再见！！</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬取豆瓣电影信息</title>
    <link href="/Pythonh%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF/"/>
    <url>/Pythonh%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>前人如R酱很多都有开发豆瓣获取的API，但是可能不知道哪天就用不上了，所以自己写一个python版本留存好了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><hr><p>需要一点bs4的基础，request及json的基本使用，话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> json<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info</span>(<span class="hljs-params">url</span>):</span>    <span class="hljs-comment"># 自定义一个请求头</span>    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span>                      <span class="hljs-string">&#x27;537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span>    &#125;    session = requests.session() <span class="hljs-comment"># 开启一个session</span>    session.keep_alive = <span class="hljs-literal">False</span>    session.headers = headers    <span class="hljs-keyword">try</span>:        response = session.get(url)        html = response.text        soup = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)        json_value = soup.select(<span class="hljs-string">&#x27;script[type=&quot;application/ld+json&quot;]&#x27;</span>)[<span class="hljs-number">0</span>].getText()        douban_info = json.loads(json_value)        print(douban_info)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(exc)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    douban_url = <span class="hljs-string">&quot;https://movie.douban.com/subject/30458949/&quot;</span> <span class="hljs-comment"># 用于测试的豆瓣链接</span>    get_douban_info(douban_url)</code></pre></div><p>运行结果输出的是json，通过格式化一下输出结果展示：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;@context&#x27;: &#x27;http://schema.org&#x27;,  &#x27;name&#x27;: &#x27;无依之地 Nomadland&#x27;,  &#x27;url&#x27;: &#x27;/subject/30458949/&#x27;,  &#x27;image&#x27;: &#x27;https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2630453887.jpg&#x27;,  &#x27;director&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1349079/&#x27;,      &#x27;name&#x27;: &#x27;赵婷 Chloé Zhao&#x27;    &#125;  ],  &#x27;author&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1349079/&#x27;,      &#x27;name&#x27;: &#x27;赵婷 Chloé Zhao&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444467/&#x27;,      &#x27;name&#x27;: &#x27;杰西卡·布鲁德 Jessica Bruder&#x27;    &#125;  ],  &#x27;actor&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1010548/&#x27;,      &#x27;name&#x27;: &#x27;弗兰西斯·麦克多蒙德 Frances McDormand&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1007009/&#x27;,      &#x27;name&#x27;: &#x27;大卫·斯特雷泽恩 David Strathairn&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384822/&#x27;,      &#x27;name&#x27;: &#x27;德里克·贾尼斯 Derrick Janis&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1148827/&#x27;,      &#x27;name&#x27;: &#x27;泰·斯特雷泽恩 Tay Strathairn&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384817/&#x27;,      &#x27;name&#x27;: &#x27;卡特·克利福德 Cat Clifford&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384767/&#x27;,      &#x27;name&#x27;: &#x27;彼得·斯皮尔斯 Peter Spears&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444468/&#x27;,      &#x27;name&#x27;: &#x27;盖伊·德福雷斯特 Gay DeForest&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444469/&#x27;,      &#x27;name&#x27;: &#x27;帕特里夏·格里尔 Patricia Grier&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444470/&#x27;,      &#x27;name&#x27;: &#x27;琳达·梅 Linda May&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444471/&#x27;,      &#x27;name&#x27;: &#x27;安吉拉·雷耶斯 Angela Reyes&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444472/&#x27;,      &#x27;name&#x27;: &#x27;卡尔·R·休斯 Carl R. Hughes&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444473/&#x27;,      &#x27;name&#x27;: &#x27;道格拉斯·G·苏尔 Douglas G. Soul&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444474/&#x27;,      &#x27;name&#x27;: &#x27;瑞安·阿基诺 Ryan Aquino&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444475/&#x27;,      &#x27;name&#x27;: &#x27;特蕾莎·布坎南 Teresa Buchanan&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444476/&#x27;,      &#x27;name&#x27;: &#x27;凯莉·林恩·麦克德莫特·怀尔德 Karie Lynn McDermott Wilder&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444477/&#x27;,      &#x27;name&#x27;: &#x27;布兰迪·威尔伯 Brandy Wilber&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444478/&#x27;,      &#x27;name&#x27;: &#x27;马克西·埃切维里 Makenzie Etcheverry&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444479/&#x27;,      &#x27;name&#x27;: &#x27;鲍勃·威尔斯 Bob Wells&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444480/&#x27;,      &#x27;name&#x27;: &#x27;安妮特·威尔斯 Annette Wells&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444481/&#x27;,      &#x27;name&#x27;: &#x27;瑞秋·班农 Rachel Bannon&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444482/&#x27;,      &#x27;name&#x27;: &#x27;夏琳·斯旺基 Charlene Swankie&#x27;    &#125;  ],  &#x27;datePublished&#x27;: &#x27;2020-09-11&#x27;,  &#x27;genre&#x27;: [    &#x27;剧情&#x27;  ],  &#x27;duration&#x27;: &#x27;PT1H48M&#x27;,  &#x27;description&#x27;: &#x27;基于Jessica Bruder所著书籍《Nomadland: Surviving America in the Twenty-First Century》，讲述一个60多岁的女人在经济大萧条中失去了...&#x27;,  &#x27;@type&#x27;: &#x27;Movie&#x27;,  &#x27;aggregateRating&#x27;: &#123;    &#x27;@type&#x27;: &#x27;AggregateRating&#x27;,    &#x27;ratingCount&#x27;: &#x27;82767&#x27;,    &#x27;bestRating&#x27;: &#x27;10&#x27;,    &#x27;worstRating&#x27;: &#x27;2&#x27;,    &#x27;ratingValue&#x27;: &#x27;8.3&#x27;  &#125;&#125;</code></pre></div><p>那么我们就可以根据返回的东西构造自己的简介了。</p><h3 id="其他的API"><a href="#其他的API" class="headerlink" title="其他的API"></a>其他的API</h3><hr><p>之前看到一个API可以使用，也在这里介绍一下吧。<a href="https://blog.csdn.net/moewang/article/details/108909336">一个新的豆瓣API替代接口，可获取豆瓣、IMDB、烂番茄的电影/电视剧双语(中英)数据</a>：</p><p>调用的python程序，依据上边的改版一下即可：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info_use_api</span>(<span class="hljs-params">url</span>):</span>    img_api_url = <span class="hljs-string">&#x27;https://movie.querydata.org/api/generateimage?id =&#123;id&#125;&amp;lang=Cn&#x27;</span>    api_url = <span class="hljs-string">&#x27;https://movie.querydata.org/api?id=&#x27;</span>    douban_id = re.search(<span class="hljs-string">r&quot;subject/(\d+)&quot;</span>, url).group(<span class="hljs-number">1</span>)    req_url = api_url + douban_id    data = requests.get(req_url).json()    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    douban_url = <span class="hljs-string">&quot;https://movie.douban.com/subject/30458949/&quot;</span>    get_douban_info_use_api(douban_url)</code></pre></div><p>输出结果格式化显示为：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;id&#x27;: &#x27;5fedf65d2c3842603f71871d&#x27;,  &#x27;originalName&#x27;: &#x27;Nomadland&#x27;,  &#x27;imdbVotes&#x27;: 1891,  &#x27;imdbRating&#x27;: &#x27;7.9&#x27;,  &#x27;rottenVotes&#x27;: 201,  &#x27;rottenRating&#x27;: &#x27;97&#x27;,  &#x27;doubanId&#x27;: &#x27;30458949&#x27;,  &#x27;imdbId&#x27;: &#x27;tt9770150&#x27;,  &#x27;alias&#x27;: &#x27;游牧人生(台) / 浪迹天地(港) / 游牧之地&#x27;,  &#x27;doubanVotes&#x27;: 1098,  &#x27;doubanRating&#x27;: &#x27;8.7&#x27;,  &#x27;year&#x27;: &#x27;2020&#x27;,  &#x27;type&#x27;: &#x27;Movie&#x27;,  &#x27;duration&#x27;: 6480,  &#x27;dateReleased&#x27;: &#x27;2020-09-11T08:00:00.000+08:00&#x27;,  &#x27;totalSeasons&#x27;: None,  &#x27;episodes&#x27;: None,  &#x27;data&#x27;: [    &#123;      &#x27;genre&#x27;: &#x27;剧情&#x27;,      &#x27;name&#x27;: &#x27;无依之地&#x27;,      &#x27;lang&#x27;: &#x27;Cn&#x27;,      &#x27;language&#x27;: &#x27;英语&#x27;,      &#x27;poster&#x27;: &#x27;https://image.querydata.org/movie/poster/1609430622982-4fca62.jpg&#x27;,      &#x27;description&#x27;: &#x27;基于Jessica Bruder所著书籍《Nomadland: Surviving America in the Twenty-First Century》，讲述一个60多岁的女人在经济大萧条中失去了...&#x27;,      &#x27;country&#x27;: &#x27;美国&#x27;    &#125;,    &#123;      &#x27;genre&#x27;: &#x27;Drama&#x27;,      &#x27;name&#x27;: &#x27;Nomadland&#x27;,      &#x27;lang&#x27;: &#x27;En&#x27;,      &#x27;language&#x27;: &#x27;English&#x27;,      &#x27;poster&#x27;: &#x27;https://image.querydata.org/movie/poster/1609430624461-feg6bf.jpg&#x27;,      &#x27;description&#x27;: &#x27;After losing everything in the Great Recession, a woman embarks on a journey through the American West, living as a van-dwelling modern-day nomad.&#x27;,      &#x27;country&#x27;: &#x27;USA, Germany&#x27;    &#125;  ],  &#x27;director&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;赵婷&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Chloé Zhao&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ],  &#x27;actor&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;卡特·克利福德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Cat Clifford&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;德里克·贾尼斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Derrick Janis&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;大卫·斯特雷泽恩&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;David Strathairn&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;弗兰西斯·麦克多蒙德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Frances McDormand&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;泰·斯特雷泽恩&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Tay Strathairn&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;彼得·斯皮尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Peter Spears&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;盖伊·德福雷斯特&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Gay DeForest&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;帕特里夏·格里尔&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Patricia Grier&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;琳达·梅&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Linda May&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;安吉拉·雷耶斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Angela Reyes&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;卡尔·休斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Carl R. Hughes&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;道格拉斯·g·苏尔&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Douglas G. Soul&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;瑞安·阿基诺&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Ryan Aquino&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;特蕾莎·布坎南&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Teresa Buchanan&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;凯莉·林恩·麦克德莫特·怀尔德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Karie Lynn McDermott Wilder&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;白兰地·威尔伯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Brandy Wilber&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;马克西·埃切维里&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Makenzie Etcheverry&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;鲍勃·威尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Bob Wells&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;安妮特·威尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Annette Wells&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;雷切尔·班农&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Rachel Bannon&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;斯旺基&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Swankie&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ],  &#x27;writer&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;赵婷&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Chloé Zhao&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;杰西卡·布鲁德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Jessica Bruder&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ]&#125;</code></pre></div><p>好像基本上大同小异哈，本次教程就到这里。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>API好用是好用，但是总担心哪一天就用不了了。今天这个好处就是豆瓣自己提供的json格式的简介，应该能够一直用吧，可以把这些代码写进自己的项目或者工具里，如果喜欢这篇文章，可以多多分享，谢谢大家~</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><p><a href="https://stackoverflow.com/questions/35140158/using-beautifulsoup-to-find-tag-with-two-specific-styles">Using BeautifulSoup to find tag with two specific styles</a></p><p><a href="https://blog.csdn.net/moewang/article/details/108909336">一个新的豆瓣API替代接口，可获取豆瓣、IMDB、烂番茄的电影/电视剧双语(中英)数据</a></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fluid实现添加百度分享按钮</title>
    <link href="/Hexo-Fluid%E5%AE%9E%E7%8E%B0%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%8C%89%E9%92%AE/"/>
    <url>/Hexo-Fluid%E5%AE%9E%E7%8E%B0%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%8C%89%E9%92%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>很早以前，本科还是人人网盛行的时候，经常会看到分享至人人网之类的按钮，现在确实是不行了，但是分享这个功能还是很好的，博客搭建起来能够在谷歌搜索了，那么就寻思这开始分享吧。</p><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><hr><blockquote><p>百度分享是一个提供网页地址收藏、分享及发送的<a href="https://baike.baidu.com/item/WEB2.0">WEB2.0</a>按钮工具，网站的浏览者可以方便的分享到<a href="https://baike.baidu.com/item/%E4%BA%BA%E4%BA%BA%E7%BD%91/7914975">人人网</a>、分享到<a href="https://baike.baidu.com/item/%E5%BC%80%E5%BF%83%E7%BD%91/2992974">开心网</a>、分享到QQ空间、分享到<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/9854094">新浪微博</a>等一系列SNS站点。</p></blockquote><p>以上描述引用自百度百科，但是2019年就有新闻说百度分享不能用了。好在前人折腾的时候把代码和功能都摸索了一遍，就照着来吧。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><hr><p>首先在主题layout下的_partial目录里新建一个baidushare.ejs，没有此目录则新建一个。下边是我的配置，还可以参考网上别人的配置。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bdsharebuttonbox&quot;</span>&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_more&quot;</span> data-cmd=<span class="hljs-string">&quot;more&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_qzone&quot;</span> data-cmd=<span class="hljs-string">&quot;qzone&quot;</span> title=<span class="hljs-string">&quot;分享到QQ空间&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tsina&quot;</span> data-cmd=<span class="hljs-string">&quot;tsina&quot;</span> title=<span class="hljs-string">&quot;分享到新浪微博&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tqq&quot;</span> data-cmd=<span class="hljs-string">&quot;tqq&quot;</span> title=<span class="hljs-string">&quot;分享到腾讯微博&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_baidu&quot;</span> data-cmd=<span class="hljs-string">&quot;baidu&quot;</span> title=<span class="hljs-string">&quot;分享到百度&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_weixin&quot;</span> data-cmd=<span class="hljs-string">&quot;weixin&quot;</span> title=<span class="hljs-string">&quot;分享到微信&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_sqq&quot;</span> data-cmd=<span class="hljs-string">&quot;sqq&quot;</span> title=<span class="hljs-string">&quot;分享到QQ&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tieba&quot;</span> data-cmd=<span class="hljs-string">&quot;tieba&quot;</span> title=<span class="hljs-string">&quot;分享到百度贴吧&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_douban&quot;</span> data-cmd=<span class="hljs-string">&quot;douban&quot;</span> title=<span class="hljs-string">&quot;分享到豆瓣&quot;</span>&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt;  <span class="hljs-built_in">window</span>._bd_share_config = &#123;    <span class="hljs-string">&quot;common&quot;</span>: &#123;      <span class="hljs-string">&quot;bdSnsKey&quot;</span>: &#123;&#125;,      <span class="hljs-string">&quot;bdText&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,      <span class="hljs-string">&quot;bdMini&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,      <span class="hljs-string">&quot;bdMiniList&quot;</span>: <span class="hljs-literal">false</span>,      <span class="hljs-string">&quot;bdPic&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,      <span class="hljs-string">&quot;bdStyle&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,      <span class="hljs-string">&quot;bdSize&quot;</span>: <span class="hljs-string">&quot;24&quot;</span>    &#125;,    <span class="hljs-string">&quot;share&quot;</span>: &#123;&#125;,<span class="hljs-string">&quot;slide&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;slide&quot;</span>,<span class="hljs-string">&quot;bdImg&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;bdPos&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,<span class="hljs-string">&quot;bdTop&quot;</span>: <span class="hljs-string">&quot;151.5&quot;</span>&#125;,  &#125;;  <span class="hljs-keyword">with</span>(<span class="hljs-built_in">document</span>) <span class="hljs-number">0</span>[(getElementsByTagName(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>] || body).appendChild(createElement(<span class="hljs-string">&#x27;script&#x27;</span>)).src = <span class="hljs-string">&#x27;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&#x27;</span> + ~ ( - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() / <span class="hljs-number">36e5</span>)]; &lt;/script&gt;</code></pre></div><p>接着在layout的post.ejs合适的地方插入：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;% <span class="hljs-keyword">if</span> (theme.post.baidushare.enable) &#123; %&gt;    &lt;%- partial(<span class="hljs-string">&#x27;_partial/baidushare&#x27;</span>) %&gt;&lt;% &#125; %&gt;</code></pre></div><p>最后在主题设置文件_config.yml里的post设置里加入：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">baidushare:</span>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre></div><h3 id="附图一张"><a href="#附图一张" class="headerlink" title="附图一张"></a>附图一张</h3><hr><p><img src="/post/share.png" alt="share"></p><p>是不是很简单？赶紧将此文章分享出去吧！！！</p><p>但是——</p><p>​    由于HTTPS不被百度分享支持，所以如果你的站点是https协议的话，需要将第一个baidushare.ej里的static文件放到一个可以访问的地方，具体可以参照这篇文章<a href="https://xserena.github.io/my-blog/2018/08/25/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/">Hexo添加分享功能</a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>搭建博客的时候总是希望把一切东西元素都加一遍，最后发现还是要写有意思的文章啊。或者转载也行~</p><p>还是要努力啊，技术教程，我来了。。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>[1] <a href="https://xserena.github.io/my-blog/2018/08/25/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/">Hexo添加分享功能</a></p><p>[2] <a href="https://blog.csdn.net/u014175572/article/details/49275277">百度分享js代码</a></p><p>[3] <a href="https://www.talklee.com/blog/447.html">百度分享官网挂了，献出自用的百度分享代码</a></p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建的个人博客实现谷歌百度收录</title>
    <link href="/Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/"/>
    <url>/Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>兴致冲冲的搜索自己发布的文章发现根本没有，也就是说只能自己输入网址才能够看到，别人根本搜不到，气急败坏。整！</p><p>如何能够辨别自己的站点被收录了呢？输入site:tomorrow505.xyz，有相关结果就成功了。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>生成sitemap</p><blockquote><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎。sitemap是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><p>安装插件走一波：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap –-save</code></pre></div><p>编辑博客配置文件：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">vim</span> <span class="hljs-string">_config.yml</span><span class="hljs-comment"># 自动生成sitemap</span><span class="hljs-attr">sitemap:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><span class="hljs-attr">baidusitemap:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidusitemap.xml</span></code></pre></div><p>用于在generate的时候生成这两个文件，然后可以通过域名+名称的方式打开，如：<a href="http://tomorrow505.xyz/sitemap.xml%E5%B1%95%E7%A4%BA%E4%BA%86%E7%AB%99%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E9%93%BE%E6%8E%A5%E4%BF%A1%E6%81%AF%E3%80%82">http://tomorrow505.xyz/sitemap.xml展示了站点的所有链接信息。</a></p><p>接下来就是谷歌和百度收录的工作了。</p><h3 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h3><hr><p>算是比较简单的了。根据帖子Hexo+github搭建个人博客（五）<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo+github搭建个人博客（五）：百度和谷歌收录博客">[1]</span></a></sup>的步骤登录<a href="https://www.google.com/webmasters/">google search console</a>，添加自己的博客网站，google同样有多种方法。我选择CNAME方式验证，然后提交sitemap过去就好了。搜索site:tomorrow505.xyz，google已经能够搜索到博客，即google收录成功。</p><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><hr><p>参考了第二篇文章，说的会比较详细，我也简单总结一下：</p><ol><li>站点URL优化所能够用到的插件或思想：(因为博客还在一步步搭建过程中，所以暂时先不考虑)</li></ol><ul><li><p>hexo-abbrlink</p></li><li><p>设计urlname</p></li><li><p>中文链接转拼音方式( hexo-permalink-pinyin插件 ）</p></li></ul><ol start="2"><li><p>查询站点是否被收录，与谷歌一样，不再描述。</p></li><li><p>添加站点至谷歌搜索平台（SEO）第一步</p></li></ol><p>我也是根据文章做的提交成功了，然后选择了主动推送的方案。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-baidu-url-submit --save</code></pre></div><p>配置根目录_config.yml写入以下配置：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">baidu_url_submit:</span>  <span class="hljs-attr">count:</span> <span class="hljs-number">10</span>                           <span class="hljs-comment"># 提交最新的多少个链接</span>  <span class="hljs-attr">host:</span> <span class="hljs-string">https://yourname.gitee.io/</span>    <span class="hljs-comment"># 在百度站长平台中添加的域名</span>  <span class="hljs-attr">token:</span> <span class="hljs-string">your_token</span>               <span class="hljs-comment"># 秘钥</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span>                <span class="hljs-comment"># 文本文档的地址,新链接会保存在此文本文档里</span></code></pre></div><p>修改站点url为自己购买的域名，最后获取token配置提交方案：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment">## 这是原来的deployer</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">branch:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span> <span class="hljs-comment">## 在这里添加新内容即可</span></code></pre></div><p>可以看出是增加了一个提交的type，然后执行部署提交的时候就可以实现主动推送了</p><div class="hljs code-wrapper"><pre><code class="hljs bash">http://tomorrow505.xyz/2021/ckmgbiu2e0000dsag6mnaf7y7/http://tomorrow505.xyz/2021/ckmfpryfc0000u0ag5e79dw4i/http://tomorrow505.xyz/2021/ckmf3rc7n000f6oag2b2g8tvx/http://tomorrow505.xyz/2021/ckmf3rc7l000a6oaghxm57hgy/http://tomorrow505.xyz/2021/ckmf3rc7l000b6oag1bymbixh/http://tomorrow505.xyz/2021/ckmf3rc7800016oag0x7k0s36/http://tomorrow505.xyz/2021/ckmf3rc7m000d6oag1ycr0oww/http://tomorrow505.xyz/2021/ckmf3rc7q000k6oag3wolcl8n/&#123;<span class="hljs-string">&quot;remain&quot;</span>:2992,<span class="hljs-string">&quot;success&quot;</span>:8&#125;INFO  Deploy <span class="hljs-keyword">done</span>: baidu_url_submitter</code></pre></div><p><strong>同时在<code>hexo\.deploy_git\</code>路径下会生成一个<code>baidu_urls.txt</code>文件，其中包含了你站点中的URL链接。</strong></p><p>至于手动或者sitemap怎么推送就看教程就好了，这里只是一个记录。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>活到老，学到老，以后就专心写博客了。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://duansm.top/2018/08/08/hexo-sitemap/">Hexo+github搭建个人博客（五）：百度和谷歌收录博客</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/liangllhahaha/article/details/105343008">站点（e.g. Hexo Blog）提交百度搜索引擎收录实现SEO</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在Hexo+Fluid主题下加入打赏功能</title>
    <link href="/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo-Fluid%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%8A%A0%E5%85%A5%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <url>/%E5%A6%82%E4%BD%95%E5%9C%A8Hexo-Fluid%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%8A%A0%E5%85%A5%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><hr><p>看到别人的博客有打赏功能，好像是别的主题也有这样的默认功能？辣么，我也想要。</p><h3 id="搜寻过程"><a href="#搜寻过程" class="headerlink" title="搜寻过程"></a>搜寻过程</h3><hr><p>还是没有找到能够将Fluid和打赏联系起来的博客，但是Hexo各个主题大同小异，我又找到了一篇相关的博客<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo博客添加打赏功能">[1]</span></a></sup>。</p><p>思想其实很简单，就是自己定一个一个div插入页面中。div为ejs文本，然后写一个样式表，在渲染的时候插入指定位置即可。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><hr><p>话不多说，上代码：</p><ol><li><code>layout\_partial</code>下新建<code>donate.ejs</code>输入如下内容：</li></ol><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;! -- 添加捐赠图标 --&gt;&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span> </span>=<span class="hljs-string">&quot;post-donate&quot;</span>&gt;    &lt;div id=<span class="hljs-string">&quot;donate_board&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;donate_bar center&quot;</span>&gt;        &lt;span <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;donate_txt&quot;</span>&gt;   &lt;%=theme.post.donate_message%&gt;        &lt;/span&gt;&lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;btn_donate&quot;</span> style=<span class="hljs-string">&quot;background-color: red; color: white; border: none; height=35; width=80&quot;</span> value=<span class="hljs-string">&quot;打赏&quot;</span>/&gt;        &lt;br&gt;      &lt;/div&gt;  &lt;div id=<span class="hljs-string">&quot;donate_guide&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;donate_bar center&quot;</span> style=<span class="hljs-string">&quot;display: none&quot;</span>&gt;&lt;!-- 支付宝打赏图案 --&gt;&lt;img src=<span class="hljs-string">&quot;/img/ali_pay.png&quot;</span> alt=<span class="hljs-string">&quot;支付宝打赏&quot;</span>&gt; &lt;!-- 微信打赏图案 --&gt;&lt;img src=<span class="hljs-string">&quot;/img/wechat_pay.png&quot;</span> alt=<span class="hljs-string">&quot;微信打赏&quot;</span>&gt;      &lt;/div&gt;&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn_donate&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">var</span> qr=<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;donate_guide&quot;</span>);<span class="hljs-string">&quot;none&quot;</span>===qr.style.display?qr.style.display=<span class="hljs-string">&quot;block&quot;</span>:qr.style.display=<span class="hljs-string">&quot;none&quot;</span>&#125;&lt;/script&gt;&lt;/div&gt;&lt;! -- 添加捐赠图标 --&gt;</code></pre></div><p>需要准备了两张图，一个是支付宝收款码，一个是微信收款码。放到img路径下。</p><ol start="2"><li>然后在css路径下新建一个_partial目录，新建一个donate.styl脚本。</li></ol><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.donate_bar</span> &#123;<span class="hljs-attribute">text-align</span>: center;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">5%</span>&#125;<span class="hljs-selector-class">.donate_bar</span>&#123;<span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> -<span class="hljs-number">10px</span>&#125;<span class="hljs-selector-class">.donate_bar</span> <span class="hljs-selector-class">.donate_txt</span> &#123;<span class="hljs-attribute">display</span>: block;<span class="hljs-attribute">color</span>: <span class="hljs-number">#9d9d9d</span>;<span class="hljs-attribute">font</span>: <span class="hljs-number">14px</span>/<span class="hljs-number">2</span> <span class="hljs-string">&quot;Microsoft Yahei&quot;</span>&#125;<span class="hljs-selector-class">.post-donate</span>&#123;<span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;&#125;<span class="hljs-selector-id">#btn_donate</span>&#123;<span class="hljs-attribute">outline</span>:none;&#125;<span class="hljs-selector-id">#donate_guide</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;<span class="hljs-selector-id">#donate_guide</span> <span class="hljs-selector-tag">img</span>&#123;<span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">180px</span>;&#125;</code></pre></div><ol start="3"><li>接着就找文章模板，就是layout的post.ejs，我们在指定位置插入下面的代码：</li></ol><div class="hljs code-wrapper"><pre><code class="hljs markdown">&lt;% if (theme.post.donate!=false &amp;&amp; theme.post.donate!=false)&#123; %&gt;&lt;%- partial(&#x27;<span class="hljs-emphasis">_partial/donate&#x27;) %&gt;</span><span class="hljs-emphasis">&lt;% &#125; %&gt;</span></code></pre></div><p>然后在主题配置文件中设置post下添加：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 打赏</span><span class="hljs-comment"># 是否开启打赏功能</span><span class="hljs-attr">donate:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># 打赏文案</span><span class="hljs-attr">donate_message:</span> <span class="hljs-string">坚持技术分享，你的支持将鼓励我继续创作！</span></code></pre></div><p>接下来我们看看效果吧：</p><p><img src="/post/donate.png" alt="donate"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>技术分享本是不易，若是能从中找到乐趣便已足够。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/16a8f15c543d">Hexo博客添加打赏功能</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.axihe.com/tools/markdown/extended-syntax/footnote.html">Markdown 插入脚注</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+Hexo绑定到Godaddy域名</title>
    <link href="/Github-Hexo%E7%BB%91%E5%AE%9A%E5%88%B0Godaddy%E5%9F%9F%E5%90%8D/"/>
    <url>/Github-Hexo%E7%BB%91%E5%AE%9A%E5%88%B0Godaddy%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>本着不折腾浑身难受的理念，按照教程<strong>绑定GitHub上的个人博客到Godaddy域名</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="绑定Github上的个人博客到Godaddy域名">[1]</span></a></sup>做了一次域名解析，发现难倒是不难，就是访问速度变慢了很多。后边再想想要不要CDN加速吧，反正现在先用着。哈哈~将流程记录下来。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><hr><h3 id="1-首先在Godaddy官网购买域名"><a href="#1-首先在Godaddy官网购买域名" class="headerlink" title="1. 首先在Godaddy官网购买域名"></a>1. 首先在<a href="https://sg.godaddy.com/zh/">Godaddy官网</a>购买域名</h3><h3 id="2-配置GitHub"><a href="#2-配置GitHub" class="headerlink" title="2. 配置GitHub"></a>2. 配置GitHub</h3><p>在Hexo的source目录下创建CNAME文件将域名写进去。之后部署项目。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo ghexo d</code></pre></div><blockquote><p>如果你是用 hexo 框架搭建博客并部署到 Github Pages 上: 每次hexo g hexo d 后会把你的博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接<strong>把CNAME文件添加到source文件夹里</strong>，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</p></blockquote><p>折腾的时候放在主目录提交一次删一次。。坑~~</p><blockquote><p><em>还有一种方式是：在网站的Github项目上，点击设置Settings，找到Custom domain，填入申请的域名，并保存。这样也会在Github项目的根目录看到这个文件，但是当你在每次部署项目之后，这个CNAME文件都会消失，本质上相当于你新建的CNAME放在了本地Github项目的根目录了，而不是在source文件夹下。</em></p></blockquote><h3 id="3-向你的-DNS-配置中添加-3-条记录（在域名解析提供商，下面以dnspod为例）"><a href="#3-向你的-DNS-配置中添加-3-条记录（在域名解析提供商，下面以dnspod为例）" class="headerlink" title="3. 向你的 DNS 配置中添加 3 条记录（在域名解析提供商，下面以dnspod为例）"></a>3. 向你的 DNS 配置中添加 3 条记录（在<a href="https://cloud.tencent.com/product/cns?from=10680">域名解析</a>提供商，下面以dnspod为例）</h3><table><thead><tr><th>Host(主机记录)</th><th>记录类型</th><th>Points To(记录值)</th></tr></thead><tbody><tr><td>@</td><td>A</td><td>192.30.252.153</td></tr><tr><td>@</td><td>A</td><td>192.30.252.154</td></tr><tr><td>www</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><h3 id="4-去-GoDaddy-修改-DNS-地址"><a href="#4-去-GoDaddy-修改-DNS-地址" class="headerlink" title="4. 去 GoDaddy 修改 DNS 地址"></a>4. 去 GoDaddy 修改 DNS 地址</h3><p>具体过程去看源帖吧。在更改域名服务器的时候我用的是DNSPod提供的，一开始不会生效，等一会儿就好了。最后就能打开了。</p><h3 id="5-优化参考性及可行性"><a href="#5-优化参考性及可行性" class="headerlink" title="5. 优化参考性及可行性"></a>5. 优化参考性及可行性</h3><p>在帖子<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="优化 Hexo 博客的访问速度">[2]</span></a></sup>发现博客部署在GitHub Pages上，从国内打开访问速度很慢，我第一感觉就是图片加载很慢了。</p><blockquote><p>过慢的访问速度会使得用户在访问网站的时候失去耐心，导致有些用户可能会直接关闭你的网站</p></blockquote><p>我十分认同这样的理念，但是CDN一开始我就没考虑，因为博客刚刚起步，本来就没有什么访客，所以我着眼于图片压缩。</p><ul><li><p>一是压缩图片的尺寸。</p></li><li><p>二是压缩图片的分辨率。</p></li></ul><h3 id="6-不怂就是干，用python来实现一波。"><a href="#6-不怂就是干，用python来实现一波。" class="headerlink" title="6. 不怂就是干，用python来实现一波。"></a>6. 不怂就是干，用python来实现一波。</h3><p>因为这种脚本网上肯定多得很，直接参考了一下这个帖子<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Python 图片尺寸缩放的4种方式">[3]</span></a></sup>写了一下。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> os<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graphics</span>:</span><span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize_by_height</span>(<span class="hljs-params">cls, height</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;按照高度进行所需比例缩放&quot;&quot;&quot;</span>        im = Image.<span class="hljs-built_in">open</span>(infile)        (x, y) = im.size        x_s = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">float</span>(x)/<span class="hljs-built_in">float</span>(y) * height)        y_s = height        out = im.resize((x_s, y_s), Image.ANTIALIAS)        out.save(outfile, quality=<span class="hljs-number">0.7</span>)        print(<span class="hljs-string">&quot;完成&quot;</span>)<span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize_by_size</span>(<span class="hljs-params">cls, size</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;按照生成图片文件大小进行处理(单位KB)&quot;&quot;&quot;</span>        size *= <span class="hljs-number">1024</span>        im = Image.<span class="hljs-built_in">open</span>(infile)        size_tmp = os.path.getsize(infile)        q = <span class="hljs-number">100</span>        <span class="hljs-keyword">while</span> size_tmp &gt; size <span class="hljs-keyword">and</span> q &gt; <span class="hljs-number">0</span>:            print(q)            out = im.resize(im.size, Image.ANTIALIAS)            out.save(outfile, quality=q)            size_tmp = os.path.getsize(outfile)            q -= <span class="hljs-number">5</span>        <span class="hljs-keyword">if</span> q == <span class="hljs-number">100</span>:            shutil.copy(infile, outfile)        print(<span class="hljs-string">&quot;完成&quot;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        infile = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的图片路径: &gt;&gt;&quot;</span>)        <span class="hljs-keyword">if</span> infile == <span class="hljs-string">&quot;exit&quot;</span>:            <span class="hljs-keyword">break</span>        dir_path = os.path.dirname(infile)        base_name = os.path.basename(infile)        tmp_path = os.path.join(dir_path, <span class="hljs-string">&#x27;tmp&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(tmp_path):            os.mkdir(tmp_path)        outfile = os.path.join(tmp_path, base_name)        mode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要进行的模式(1、按高160等比缩小到指定尺寸；2、压缩图片size到300KB)&quot;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(mode) == <span class="hljs-number">1</span>:            Graphics.resize_by_height(<span class="hljs-number">160</span>)        <span class="hljs-keyword">else</span>:            Graphics.resize_by_size(<span class="hljs-number">300</span>)</code></pre></div><p>测试了一波，还没有人家提到的站点做的一半好，承让了，直接使用<a href="https://tinypng.com/">TinyPNG</a>来压缩图片。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>其实很多人已经在你前边走了一条路，但是你不走过去，你怎么知道沿途的风景呢？</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1367881">绑定Github上的个人博客到Godaddy域名</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://kaitohh.com/tweak-hexo/">优化 Hexo 博客的访问速度</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/ln152315/article/details/42777149">Python 图片尺寸缩放的4种方式</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Fluid</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid实现mac panel风格代码块</title>
    <link href="/Hexo-Fluid%E5%AE%9E%E7%8E%B0mac-panel%E9%A3%8E%E6%A0%BC%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <url>/Hexo-Fluid%E5%AE%9E%E7%8E%B0mac-panel%E9%A3%8E%E6%A0%BC%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>一直以来看别人博客都觉的Mac风格的代码块很炫酷，这几天尝试自己搭建博客，选中了<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>这个主题，但是仅限于支持设定的两种风格。</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 实现高亮的库，对应下面的设置</span><span class="hljs-comment"># Options: highlightjs | prismjs</span><span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><span class="hljs-attr">highlightjs:</span><span class="hljs-comment"># 在链接中挑选 style 填入</span><span class="hljs-comment"># See: https://highlightjs.org/static/demo/</span><span class="hljs-attr">style:</span> <span class="hljs-string">&quot;Monokai Sublime&quot;</span><span class="hljs-comment"># 是否根据 style 改变代码背景色（如果 style 是深色背景别忘了开启此项）</span><span class="hljs-attr">bg_color:</span> <span class="hljs-literal">true</span><span class="hljs-attr">prismjs:</span><span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span><span class="hljs-comment"># See: https://prismjs.com/</span><span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-comment"># 设为 true 高亮将本地静态生成（并只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span><span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span></code></pre></div><p>这就让人很为难了，因为也看过一些教程，大多是next怎么做的。找了半天发现了相关为Yilia主题代码块添加Mac Panel效果的一篇教程。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="私人订制 为Yilia主题代码块添加Mac Panel效果">[1]</span></a></sup>所以就跟着弄了一下，也踩了一些坑，花了半天时间终于搞定了。哈哈~记录一下。</p><h3 id="需要的条件"><a href="#需要的条件" class="headerlink" title="需要的条件"></a>需要的条件</h3><hr><p>需要有一点点的css和JavaScript基础以及找寻代码判断相关性的能力。</p><h3 id="大致思想及流程"><a href="#大致思想及流程" class="headerlink" title="大致思想及流程"></a>大致思想及流程</h3><hr><ol><li>自动更改样式。首先得大致知道hexo是如何把markdown的代码渲染出来的，在这个过程之后又怎样匹配出来了自己在ymal中定义的样式呢？</li></ol><p>根据highlightjs和prismjs作为关键字，通过一番查找找到了/fluid/scripts/events/lib/highlights.js，该js函数调用了hexo的生命周期在恰当的时间点博客中代码块内容进行替换，从而使得原有的代码块样式能够被替换指定的风格块。</p><ol start="2"><li>找到了之后如何做呢？首先需要分析代码做了哪些工作。</li></ol><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (config.code.highlight.lib === <span class="hljs-string">&#x27;highlightjs&#x27;</span>) &#123;    hexo.config.prismjs = objUtil.merge(&#123;&#125;, hexo.config.prismjs, &#123;        enable: <span class="hljs-literal">false</span>    &#125;);    hexo.config.highlight = objUtil.merge(&#123;&#125;, hexo.config.highlight, &#123;        enable     : <span class="hljs-literal">true</span>,        hljs       : <span class="hljs-literal">true</span>,        wrap       : <span class="hljs-literal">false</span>,        auto_detect: <span class="hljs-literal">true</span>,        line_number: config.code.highlight.line_number || <span class="hljs-literal">false</span>    &#125;);    hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">page</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (config.code.highlight.highlightjs.bg_color) &#123;            page.content = page.content.replace(<span class="hljs-regexp">/(?&lt;!&lt;div class=&quot;hljs code-wrapper&quot;&gt;)(&lt;pre.+?&lt;\/pre&gt;)/gim</span>s, <span class="hljs-function">(<span class="hljs-params">str, p1</span>) =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/&lt;code[^&gt;]+?mermaid[^&gt;]+?&gt;/im</span>s.test(p1)) &#123;                    <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/(class=&quot;.*?)hljs(.*?&quot;)/gim</span>s, <span class="hljs-string">&#x27;$1$2&#x27;</span>);                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;hljs code-wrapper&quot;&gt;<span class="hljs-subst">$&#123;p1&#125;</span>&lt;/div&gt;`</span>;            &#125;);            page.content = page.content.replace(<span class="hljs-regexp">/&lt;td class=&quot;gutter/gim</span>s, <span class="hljs-string">&#x27;&lt;td class=&quot;gutter hljs&#x27;</span>);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!hexo.config.highlight.line_number) &#123;            page.content = page.content.replace(<span class="hljs-regexp">/(?&lt;!&lt;div class=&quot;code-wrapper&quot;&gt;)(&lt;pre.+?&lt;\/pre&gt;)/gim</span>s, <span class="hljs-function">(<span class="hljs-params">str, p1</span>) =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/&lt;code[^&gt;]+?mermaid[^&gt;]+?&gt;/im</span>s.test(p1)) &#123;                    <span class="hljs-keyword">return</span> str.replace(<span class="hljs-regexp">/(class=&quot;.*?)hljs(.*?&quot;)/gim</span>s, <span class="hljs-string">&#x27;$1$2&#x27;</span>);                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;code-wrapper&quot;&gt;<span class="hljs-subst">$&#123;p1&#125;</span>&lt;/div&gt;`</span>;            &#125;);        &#125;        <span class="hljs-keyword">if</span> (hexo.config.highlight.line_number) &#123;            <span class="hljs-comment">// Mermaid block adaptation</span>            page.content = page.content.replace(<span class="hljs-regexp">/&lt;figure.+?&lt;td class=&quot;code&quot;&gt;.*?(&lt;pre.+?&lt;\/pre&gt;).+?&lt;\/figure&gt;/gim</span>s, <span class="hljs-function">(<span class="hljs-params">str, p1</span>) =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/&lt;code[^&gt;]+?mermaid[^&gt;]+?&gt;/im</span>s.test(p1)) &#123;                    <span class="hljs-keyword">return</span> p1.replace(<span class="hljs-regexp">/(class=&quot;.*?)hljs(.*?&quot;)/gim</span>s, <span class="hljs-string">&#x27;$1$2&#x27;</span>).replace(<span class="hljs-regexp">/&lt;br&gt;/gim</span>s, <span class="hljs-string">&#x27;\n&#x27;</span>);                &#125;                <span class="hljs-keyword">return</span> str;            &#125;);        &#125;        <span class="hljs-keyword">return</span> page;    &#125;);</code></pre></div><p>好长的一段啊，但是大概是说禁用prismjs，然后根据yaml设置highlightjs的相关参数生成高亮配置参数。然后注入了一个渲染后的事件，传入渲染后的页面进行一些正则替换，主要是改变class，然后把替换好的代码包裹在一个div里边，注意，div的class为<strong>code-wrapper</strong>。</p><ol start="3"><li>实施替换</li></ol><p>看到教程中提到的某段话：</p><blockquote><p>添加了自动更换样式的脚本后，我们将需要替换到代码块的样式放入主题的css文件夹中，以便于浏览器能够正常渲染。在Yilia主题路径\source-src\css下，新建css文件，文件名为code-block.css。并复制以下代码blablabla……</p></blockquote><p>也就是说这个class就是我们后期渲染的关键。我们再找找Fluid是怎么渲染的呢？又是一段查找，.styl文件用于存放css样式，所以顺藤摸瓜找到了主题source目录下的css目录，一番折腾发现存放于该目录下_page下的rewrite.styl中。<strong>\fluid\source\css_pages_base</strong>。</p><p>根据关键字code-wrapper我们找到了定义的样式：</p><div class="hljs code-wrapper"><pre><code class="hljs css">&amp; &gt; <span class="hljs-selector-class">.code-wrapper</span>  <span class="hljs-attribute">position</span> relative  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">3px</span></code></pre></div><p>这么简单嘛？那么我们就注释掉这段开始自定义样式咯，参照教程在新建在css目录下新建_custom目录，创建macpanel.styl。并在main.styl中引入。</p><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.code-wrapper</span>&#123;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">overflow</span>: hidden;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);  <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> <span class="hljs-number">0</span>;  ::-webkit-scrollbar &#123;    height: <span class="hljs-number">10px</span>;  &#125;  ::-webkit-scrollbar-track &#123;    -webkit-box-shadow: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;  &#125;  ::-webkit-scrollbar-thumb &#123;    border-radius: <span class="hljs-number">10px</span>;    -webkit-<span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);  &#125;  &amp;<span class="hljs-selector-pseudo">::before</span> &#123;    <span class="hljs-attribute">color</span>: white;    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(data-rel);    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;    <span class="hljs-attribute">background</span>: <span class="hljs-number">#21252b</span>;    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Source Sans Pro&#x27;</span>, sans-serif;    <span class="hljs-attribute">font-weight</span>: bold;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">80px</span>;    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">15px</span>;    <span class="hljs-attribute">float</span>: left;  &#125;  &amp;<span class="hljs-selector-pseudo">::after</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;    <span class="hljs-attribute">position</span>: absolute;    -webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fc625d</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;    <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">13px</span>;    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#35cd4b</span>;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#fdbc40</span>, <span class="hljs-number">40px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#35cd4b</span>;    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;  &#125;&#125;<span class="hljs-selector-class">.code-wrapper</span> &gt; pre &#123;<span class="hljs-attribute">margin-bottom</span> <span class="hljs-number">0</span>&#125;</code></pre></div><p>可能我还动了一些地方的css样式，但是大概都是调位置之类的<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="你真的理解浏览器盒模型吗">[2]</span></a></sup>，掌握沙盒模型然后调节rewrite和自定义的macpanel两个样式文件就可以了。效果就是你们看到的这样啦~</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>不折腾不痛快，所以需要一颗爱折腾的心……</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://oltremare.cc/2019092030716/">私人订制 为Yilia主题代码块添加Mac Panel效果</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/FrankKai/FrankKai.github.io/issues/38">你真的理解浏览器盒模型吗</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>编程</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（四）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我们已经实现了从视频到截图到bbcode的过程，但是还是有一个细节，很多网站短mediainfo没法弄，那么希望能够顺带也获取一下。</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>这次使用到的就是mediainfo了，这个在linux可以用 apt install mediainfo 安装，windows下可以下载一个cli版添加到环境变量。</p><p>教程：<a href="https://fossies.org/linux/MediaInfo_CLI/MediaInfo/Contrib/CLI_Help.doc">https://fossies.org/linux/MediaInfo_CLI/MediaInfo/Contrib/CLI_Help.doc</a></p><p>上面放了一个doc文档，可以自定义怎么输出剪短的mediainfo，但是我们现在就只需要长的就好了。话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_mediainfo</span>(<span class="hljs-params">file</span>) -&gt; str:</span>    process = subprocess.Popen([<span class="hljs-string">&quot;mediainfo&quot;</span>, file], stdout=subprocess.PIPE)    output, error = process.communicate()    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> error <span class="hljs-keyword">and</span> output != <span class="hljs-string">b&quot;\n&quot;</span>:        output = output.decode()  <span class="hljs-comment"># bytes -&gt; string</span>        output = re.sub(re.escape(file), os.path.basename(file), output)  <span class="hljs-comment"># Hide file path</span>        <span class="hljs-keyword">return</span> output    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></code></pre></div><p>简而言之就是通过调用mediainfo命令获取到了想要的信息并且只保留视频文件名。</p><p>接下来就剩最后一个问题了，怎么快速获取到视频的存储路径呢？这里仅仅适合于qbittorrent，其他客户端应该也有类似的，先不探讨了。这里登场的模块叫做<a href="https://pypi.org/project/qbittorrent-api/">qbittorrent-api</a>，用于调用qbittorrent的web api达到一些想要的结果。话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> qbittorrentapi<span class="hljs-keyword">import</span> osqb_host = <span class="hljs-string">&quot;http://localhost:2021&quot;</span> <span class="hljs-comment"># 这里基本上部署在本地才可以截图所以就直接用localhost了,假设端口是2021</span>qb_name = <span class="hljs-string">&quot;admin&quot;</span>qb_pwd = <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_save_path_from_hash</span>(<span class="hljs-params">hash_value</span>):</span>    <span class="hljs-comment"># 首先登陆qbittorrent之前需要开启webui，然后通过host, port(可选), name, password进行登录</span>    qb = qbittorrentapi.Client(host=qbt_address, port=qbt_port, username=qbt_user, password=qbt_password)    <span class="hljs-keyword">try</span>:    qb.auth_log_in()        torrents = qb.torrents_info(hashes=hash_value) <span class="hljs-comment"># 基本上有1个或者没有，返回种子列表</span>        torrent_name = torrents[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;name&#x27;</span>]        save_path = torrents[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;save_path&#x27;</span>] <span class="hljs-comment"># 获取到save_path和name基本上就可以得到视频或者视频文件的目录了</span>        path = os.path.join(save_path, torrent_name) <span class="hljs-comment"># 对path进行扫描获取到视频文件路径即可</span>        ...    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(exc)</code></pre></div><p>qbittorrentapi还有很多其他的命令，这里只是用到了查询，还可以增删改，此处应有掌声。</p><p>到了这一步，其实已经算完结了。整合所有的代码就可以完成从hash到视频mediainfo到截图到上传。怎么样，应该是学会了吧？不会也不要紧，直接上链接。</p><p><code>https://github.com/tomorrow505/qbittorrent433/blob/main/get_mediaifno_picture.py</code></p><p>如果你想在盒子上部署，也可以用下面的命令一键部署：</p><p><code>wget https://raw.githubusercontent.com/tomorrow505/qbittorrent433/main/get_mediaifno_picture.sh -O get_mediaifno_picture.sh &amp;&amp; /bin/bash get_mediaifno_picture.sh</code></p><p>运行命令以后就可以用 up hash_of_torrent来进行传图了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>到了这一步，其实传图命令已经差不多了，Windows、linux下都可以愉快的截图上传了。</p><p>那么这一系列的教程就到此结束了，谢谢！！</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>qbittorrent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（三）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我们能够通过传递过来的视频文件路径截图图片存放到指定路径，并且返回了一个列表，那么我们怎么上传到指定图床？</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>我们在这个环节用到了一个imgbox的相关模块——<a href="https://pypi.org/project/pyimgbox/">pyimgbox</a>。使用到了协程相关知识，类似于老王泡茶那个故事话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">import</span> pyimgbox<span class="hljs-comment"># 将之前获取到的图片的路径列表传入</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">up_imgbox</span>(<span class="hljs-params">filepaths, gallery_name</span>):</span>    result = [] <span class="hljs-comment"># 用于存放图片上传网址的bbcode列表</span>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> pyimgbox.Gallery(title=gallery_name) <span class="hljs-keyword">as</span> gallery: <span class="hljs-comment"># 该命令会创建一个名为gallery_name的相册</span>        gallery.thumb_width = <span class="hljs-number">350</span> <span class="hljs-comment"># 有的外站需要缩略图为350像素宽</span>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> submission <span class="hljs-keyword">in</span> gallery.add(filepaths): <span class="hljs-comment"># 开始添加任务，异步开始</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> submission[<span class="hljs-string">&#x27;success&#x27;</span>]: <span class="hljs-comment"># 失败的话打印任务失败原因</span>                print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;submission[<span class="hljs-string">&#x27;filename&#x27;</span>]&#125;</span>: <span class="hljs-subst">&#123;submission[<span class="hljs-string">&#x27;error&#x27;</span>]&#125;</span>&quot;</span>)            <span class="hljs-keyword">else</span>:                print(submission)                result.append(<span class="hljs-string">&#x27;[url=%s][img]%s[/img][/url]&#x27;</span> % (submission[<span class="hljs-string">&#x27;web_url&#x27;</span>], submission[<span class="hljs-string">&#x27;thumbnail_url&#x27;</span>]))    <span class="hljs-keyword">return</span> result<span class="hljs-comment"># 上述函数的调用，标准范式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_up_imgbox</span>(<span class="hljs-params">img_locs: <span class="hljs-built_in">list</span>=<span class="hljs-literal">None</span>, gallery_name: <span class="hljs-built_in">str</span>=<span class="hljs-literal">None</span></span>):</span>    loop = asyncio.get_event_loop()     task = loop.create_task(up_imgbox(img_locs, gallery_name))    loop.run_until_complete(task)    <span class="hljs-keyword">return</span> task.result()</code></pre></div><p>异步IO采用消息循环的模式，重复读取消息—处理消息的过程，也就是说异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程。</p><ul><li><p>event_loop 事件循环：程序开启一个无限的循环，程序员会把一些函数注册到事件循环上。当满足事件发生的时候，调用相应的协程函数。</p></li><li><p>coroutine 协程：协程对象，指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象。协程对象需要注册到事件循环，由事件循环调用。</p></li><li><p>task 任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。</p></li><li><p>async/await 关键字： 用于定义协程的关键字，async定义一个协程，await用于挂起阻塞的异步调用接口。</p></li></ul><p>再来看一个简单的例子：同步代码VS异步代码</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span>    time.sleep(<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        hello()        print(<span class="hljs-string">&#x27;Hello World:%s&#x27;</span> % time.time())  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    run()Hello World:<span class="hljs-number">1536842494.2786784</span>Hello World:<span class="hljs-number">1536842495.2796268</span>Hello World:<span class="hljs-number">1536842496.2802596</span>Hello World:<span class="hljs-number">1536842497.2804587</span>Hello World:<span class="hljs-number">1536842498.2812462</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义异步函数</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">i</span>):</span>    print(<span class="hljs-string">&#x27;Hello World %d :%s&#x27;</span> % (i, time.time()))    <span class="hljs-comment"># 必须使用await，不能使用yield from；如果是使用yield from ，需要采用@asyncio.coroutine相对应</span>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)    print(<span class="hljs-string">&#x27;Hello wow World %d :%s&#x27;</span> % (i, time.time()))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span>    tasks = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        tasks.append(hello(i))    loop.run_until_complete(asyncio.wait(tasks))<span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:    loop = asyncio.get_event_loop()    run()    loop.close()Hello World <span class="hljs-number">4</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">1</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">0</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">2</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">3</span> :<span class="hljs-number">1616070393.0068445</span>暂停约<span class="hljs-number">1</span>秒钟Hello wow World <span class="hljs-number">4</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">0</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">3</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">1</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">2</span> :<span class="hljs-number">1616070394.0171442</span></code></pre></div><p>大概说明一下：</p><ul><li>async def hello(): 定义async异步函数，中间可以添加await async.sleep(N) 来设定中断并执行下一个循环消息</li><li>tasks = [] 任务则是对协程进一步封装，其中包含任务的各种状态。即多个coroutine函数可以封装成一组Task然后并发执行</li><li>loop = asyncio.get_event_loop() #获取“事件循环”对象</li><li>loop.run_until_complete(asyncio.wait(tasks)) #通过事件循环，去调用协程函数</li><li>loop.close() 结束时间循环</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>pyimgbox已经封装好了其中的一些过程，所以我们可以通过传过来的视频文件路径获取到截图上传的bbcode了，但是其实还有一个mediainfo需要获取，这其实也不是什么难事。假设一个场景，我们从网页判断了一个种子转载的时候缺了截图或者mediainfo想要转到另一个网站，找视频文件地址不容易，或者盒子上也不好找。但是我们可以用qb获取到hash值来获得文件存储信息。预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（二）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我么能够通过传递过来的视频文件路径获取视频长度和截图命令，那么如何使用python实现呢？</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymediainfo <span class="hljs-keyword">import</span> Mediainfo<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_video_info</span>(<span class="hljs-params">video_path</span>) -&gt; int:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :return: 视频长度，数字</span><span class="hljs-string">    &quot;&quot;&quot;</span>    media_info = MediaInfo.parse(video_path) <span class="hljs-comment"># 解析视频</span>    data = media_info.to_json()    data = json.loads(data)[<span class="hljs-string">&#x27;tracks&#x27;</span>]        <span class="hljs-comment"># 获取视频各种信息</span>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> data:        <span class="hljs-keyword">if</span> key[<span class="hljs-string">&#x27;track_type&#x27;</span>] == <span class="hljs-string">&#x27;Video&#x27;</span>:     <span class="hljs-comment"># 视频的总帧数除以帧率得到长度</span>            video_duration = <span class="hljs-built_in">int</span>(key[<span class="hljs-string">&#x27;frame_count&#x27;</span>]) / (<span class="hljs-built_in">int</span>(key[<span class="hljs-string">&#x27;frame_rate&#x27;</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]))            <span class="hljs-keyword">return</span> video_duration</code></pre></div><p>上述代码可以直接得到一个视频的总的长度，但是我们想要截取图片的时候需要字符串，类似hh:mm:ss这样的。然后我们想要的是好几张图片？我以三张为例，假设一条线段想要有三个中间节点，那么我们会怎么处理呢？四等分就会有三个时间点了对不对？</p><p>比如60分钟的电影，我们取15分钟时间间隔，15, 30, 45 三个时间节点刚刚好，一般电影开头和截图截不出来什么东西的。我们需要把时间总长度4等分然后取三个节点将其转换成字符串传入截图函数中即可。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-comment"># 总的过程，传入一个时间长度，获取截图时间节点进行截图存储保存路径</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_thumbnails</span>(<span class="hljs-params">video_duration</span>):</span>    number = <span class="hljs-number">3</span> <span class="hljs-comment"># 截图张数</span>    picture_list = [] <span class="hljs-comment"># 用于存储截图的保存路径</span>    seektime = <span class="hljs-number">0</span> <span class="hljs-comment"># 用于记录截图距离开头的时长，以秒计</span>        interval = <span class="hljs-built_in">int</span>(video_duration/(number+<span class="hljs-number">1</span>)) <span class="hljs-comment"># 计算时间间隔</span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, number):        seektime += interval <span class="hljs-comment"># 计算时间节点</span>        img = get_frame_at(seektime, n) <span class="hljs-comment"># 截取对应时间节点的图片</span>        <span class="hljs-keyword">if</span> img:            picture_list.append(img)    <span class="hljs-keyword">return</span> picture_list<span class="hljs-comment"># 被调用的函数，调用ffmpeg获取某一个时间节点的截图</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_frame_at</span>(<span class="hljs-params">seektime, n=<span class="hljs-number">99</span></span>):</span>    timestring = get_time_string(seektime) <span class="hljs-comment"># 将int型转为hh:mm:ss类型用于截图</span>    file_name = os.path.basename(video_path)    tmp_path = os.path.join(base_path, <span class="hljs-string">&#x27;tmp&#x27;</span>) <span class="hljs-comment"># 截图存放于事先新建的tmp目录下</span>    img_path = os.path.join(tmp_path, <span class="hljs-string">&quot;&#123;filename&#125;-out-&#123;d&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(filename=file_name, d=n)) <span class="hljs-comment"># 截图名称及存放绝对路径</span>    command = <span class="hljs-string">&#x27;ffmpeg -ss &#123;timestring&#125; -y -i &quot;&#123;file&#125;&quot; &quot;-f&quot; &quot;image2&quot; &quot;-frames:v&quot;  &quot;1&quot; &quot;-c:v&quot; &quot;png&quot; &#x27;</span> \    <span class="hljs-string">&#x27;&quot;-loglevel&quot; &quot;8&quot; &quot;&#123;img_path&#125;&quot;&#x27;</span>.<span class="hljs-built_in">format</span>(timestring=timestring, file=self.abs_file_path,                                          img_path=img_path)    <span class="hljs-keyword">try</span>:        subprocess.call(command, shell=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> img_path    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        logger.info(<span class="hljs-string">&#x27;截图失败：%s&#x27;</span> % exc)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 用于将int型转换为字符串的函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_time_string</span>(<span class="hljs-params">seconds</span>) -&gt; str:</span>    hours = <span class="hljs-built_in">int</span>(seconds // <span class="hljs-number">3600</span>)    minutes = <span class="hljs-built_in">int</span>((seconds % <span class="hljs-number">3600</span>) // <span class="hljs-number">60</span>)    seconds = <span class="hljs-built_in">int</span>(seconds % <span class="hljs-number">60</span>)    timestring = <span class="hljs-built_in">str</span>(hours) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(minutes).rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(seconds).rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)    <span class="hljs-keyword">return</span> timestring</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>是的，现在已经能够通过视频路径获取截图到指定目录了，但是怎么上传呢？国内外的图床很多都有着丰富的API，所以还需要使用一些模块来完成上传的工作。本例子使用imgbox作为目标图床。预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（一）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>玩PT的大概都知道发布的时候要上传mediainfo和截图，无论内外站都支持的图床之一就是imgbox。而无论是盒子还是本地，mediainfo或者截图上传都是比较繁琐枯燥的一件事情。那么，基于此，工具就来了。</p><p>这是一个比较系统的工具了，会用到一系列基础知识，所以打算做成一个系列。</p><p>本篇文章为第一篇：如何自动截取视频截图？</p><h3 id="FFMPEG"><a href="#FFMPEG" class="headerlink" title="FFMPEG"></a>FFMPEG</h3><hr><ul><li><p><a href="https://www.ffmpeg.org/">FFMPEG</a>是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</p></li><li><p>FFMPEG在windows下安装教程链接。<a href="https://blog.csdn.net/Fish_cyy/article/details/105797337">https://blog.csdn.net/Fish_cyy/article/details/105797337</a></p></li></ul><p>总之FFMPEG的功能十分强大，无论是windows还是linux都可以使用。而今天我们主要说明如何使用该工具进行截图。废话不多说，直接上代码。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">ffmpeg -ss &#123;timestring&#125; -y -i <span class="hljs-string">&quot;&#123;file&#125;&quot;</span> <span class="hljs-string">&quot;-f&quot;</span> <span class="hljs-string">&quot;image2&quot;</span> <span class="hljs-string">&quot;-frames:v&quot;</span> <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-string">&quot;-c:v&quot;</span> <span class="hljs-string">&quot;png&quot;</span> <span class="hljs-string">&quot;-loglevel&quot;</span> <span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;&#123;img_path&#125;&quot;</span><span class="hljs-comment"># 参数说明</span><span class="hljs-comment"># -ss................指定视频文件中截图的时间，01:00：00表示从视频文件的第一个小时截图</span><span class="hljs-comment"># -y.................表示覆盖，如果存在同名文件直接覆盖</span><span class="hljs-comment"># -i.................指定输入文件，使用双引号避免文件路径存在空格</span><span class="hljs-comment"># -f.................指定输出格式，image2表示输出图片</span><span class="hljs-comment"># -frames............指定截取几帧，这里指定为1</span><span class="hljs-comment"># -c.................编码格式，指定输出为png</span><span class="hljs-comment"># -loglevel..........日志等级相关参数，这里设置为8</span><span class="hljs-comment"># 最后img_path代表输出文件路径，包含文件名。</span><span class="hljs-comment"># 更多细节可以直接调用&quot;ffmpeg -h&quot;进行学习。</span></code></pre></div><p>很显然的一个问题，ffmpeg需要指定截图时间，那么视频有多长，什么时候开始截取呢？我们需要知道这个视频的长度。mediainfo便是一个很好的工具，而且ffmpeg直接就封装了mediainfo，可以直接使用指令获取视频信息：</p><p><code>ffmpeg -i test.mkv</code></p><p><img src="/post/ffmpeg.png" alt="ffmpeg"></p><p>忽略中文乱码我们其实可以获取到视频得长度的。其实我们还有一个python模块可以干这件事。<a href="https://pymediainfo.readthedocs.io/en/stable/">pymediainfo</a>使用代码示范：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<span class="hljs-keyword">from</span> pymediainfo <span class="hljs-keyword">import</span> MediaInfomedia_info = MediaInfo.parse(<span class="hljs-string">&quot;my_video_file.mp4&quot;</span>)<span class="hljs-keyword">for</span> track <span class="hljs-keyword">in</span> media_info.tracks:    <span class="hljs-keyword">if</span> track.track_type == <span class="hljs-string">&quot;Video&quot;</span>:        print(<span class="hljs-string">&quot;Bit rate: &#123;t.bit_rate&#125;, Frame rate: &#123;t.frame_rate&#125;, &quot;</span>              <span class="hljs-string">&quot;Format: &#123;t.format&#125;&quot;</span>.<span class="hljs-built_in">format</span>(t=track)        )        print(<span class="hljs-string">&quot;Duration (raw value):&quot;</span>, track.duration)        print(<span class="hljs-string">&quot;Duration (other values:&quot;</span>)        pprint(track.other_duration)    <span class="hljs-keyword">elif</span> track.track_type == <span class="hljs-string">&quot;Audio&quot;</span>:        print(<span class="hljs-string">&quot;Track data:&quot;</span>)        pprint(track.to_data())</code></pre></div><p>得到的结果如下：</p><div class="hljs code-wrapper"><pre><code class="hljs python">Bit rate: <span class="hljs-number">3117597</span>, Frame rate: <span class="hljs-number">23.976</span>, Format: AVCDuration (raw value): <span class="hljs-number">958</span>Duration (other values):[<span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;00:00:00.958&#x27;</span>, <span class="hljs-string">&#x27;00:00:00;23&#x27;</span>, <span class="hljs-string">&#x27;00:00:00.958 (00:00:00;23)&#x27;</span>]Track data:&#123;<span class="hljs-string">&#x27;bit_rate&#x27;</span>: <span class="hljs-number">236392</span>, <span class="hljs-string">&#x27;bit_rate_mode&#x27;</span>: <span class="hljs-string">&#x27;VBR&#x27;</span>, <span class="hljs-string">&#x27;channel_layout&#x27;</span>: <span class="hljs-string">&#x27;L R&#x27;</span>, <span class="hljs-string">&#x27;channel_positions&#x27;</span>: <span class="hljs-string">&#x27;Front: L R&#x27;</span>, <span class="hljs-string">&#x27;channel_s&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;codec_id&#x27;</span>: <span class="hljs-string">&#x27;mp4a-40-2&#x27;</span>, <span class="hljs-string">&#x27;commercial_name&#x27;</span>: <span class="hljs-string">&#x27;AAC&#x27;</span>, <span class="hljs-string">&#x27;compression_mode&#x27;</span>: <span class="hljs-string">&#x27;Lossy&#x27;</span>, …&#125;</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>我们现在知道了ffmpeg的截图命令，也知道了怎么获取一个视频文件的时长，可能形式需要转换一下。那么在已知视频文件路径的前提下，如何用python进行截图操作呢？预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu或者Debian环境下编译qbittorrent4.3.3</title>
    <link href="/Ubuntu%E6%88%96%E8%80%85Debian%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91qbittorrent4-3-3/"/>
    <url>/Ubuntu%E6%88%96%E8%80%85Debian%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91qbittorrent4-3-3/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>本文为安装最新或指定版本qBittorrent4.3.3的教学 适用于Ubuntu 18或更新版本，Debian 10或更新版本。</p><h3 id="安装须知"><a href="#安装须知" class="headerlink" title="安装须知"></a>安装须知</h3><hr><p>libtorrent是qBittorrent必要的后端程序，本教程使用1.2.12。在此之前需要安装编译libtorrent环境。</p><p>此外还依赖一些其他的包，在尝试的时候遇到了一些坑，都记录了下来，然后最近初学shell编程，所以整理了一个一键安装脚本。</p><p>最后的最后，在盒子上进行调试的时候3o会在编译qb的时候出现一个linking错误，后边看有没有机会修复吧。</p><h3 id="废话不多说，上部分代码"><a href="#废话不多说，上部分代码" class="headerlink" title="废话不多说，上部分代码"></a>废话不多说，上部分代码</h3><hr><ul><li>准备安装环境</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt updateapt -y install build-essential pkg-config automake libtool git libgeoip-dev python3 python3-devapt -y install libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-devapt -y install qtbase5-dev qttools5-dev-tools libqt5svg5-dev zlib1g-dev</code></pre></div><ul><li>编译boost</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-get -y install mpi-default-dev　　<span class="hljs-comment">#安装mpi库</span>apt-get -y install libicu-dev　　　　　<span class="hljs-comment">#支持正则表达式的UNICODE字符集　</span>apt-get -y install libbz2-devwget https://dl.bintray.com/boostorg/release/1.75.0/<span class="hljs-built_in">source</span>/boost_1_75_0.tar.bz2tar -jxvf boost_1_75_0.tar.bz2<span class="hljs-built_in">cd</span> boost_1_75_0sh ./bootstrap.sh./b2./b2/install</code></pre></div><ul><li>编译libtorrent</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt -y install libssl-devapt -y install opensslwget https://github.com/arvidn/libtorrent/releases/download/v1.2.12/libtorrent-rasterbar-1.2.11.tar.gztar xf libtorrent-rasterbar-1.2.12.tar.gz<span class="hljs-built_in">cd</span> libtorrent-rasterbar-1.2.12./configure --disable-debug --enable-encryption --with-libgeoip=system CXXFLAGS=-std=c++14make -j$(nproc)make installldconfig</code></pre></div><ul><li>安装qbittorrent</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-get -y install qt5-defaultapt-get -y install zlib1g-dev<span class="hljs-comment"># 将命令改名，可能是新版本的调用脚本命名不一样了</span>file1=<span class="hljs-string">&quot;/usr/bin/lrelease&quot;</span>file2=<span class="hljs-string">&quot;/bin/lrelease&quot;</span><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$file1</span>&quot;</span> ]; <span class="hljs-keyword">then</span>  mv <span class="hljs-string">&quot;<span class="hljs-variable">$file1</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file1&#125;</span>-qt5&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$file2</span>&quot;</span> ]; <span class="hljs-keyword">then</span>  mv <span class="hljs-string">&quot;<span class="hljs-variable">$file2</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file21&#125;</span>-qt5&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># mv /bin/lrelease /bin/lrelease-qt5</span><span class="hljs-comment"># mv /usr/lib/qt5/bin/lrelease /usr/lib/qt5/bin/lrelease-qt5</span>wget https://github.com/qbittorrent/qBittorrent/archive/release-4.3.3.tar.gztar xf release-4.3.3.tar.gz<span class="hljs-built_in">cd</span> qBittorrent-release-4.3.3./configure --disable-gui --disable-debug CXXFLAGS=-std=c++14make -j$(nproc)make install<span class="hljs-comment"># 写入service文件</span>qbit_service=<span class="hljs-string">&quot;/etc/systemd/system/qbittorrent.service&quot;</span>touch <span class="hljs-variable">$qbit_service</span>cat&gt;<span class="hljs-variable">$qbit_service</span>&lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">[Unit]</span><span class="hljs-string">Description=qBittorrent Daemon Service</span><span class="hljs-string">After=network.target</span><span class="hljs-string">[Service]</span><span class="hljs-string">LimitNOFILE=512000</span><span class="hljs-string">User=root</span><span class="hljs-string">ExecStart=/usr/local/bin/qbittorrent-nox</span><span class="hljs-string">ExecStop=/usr/bin/killall -w qbittorrent-nox</span><span class="hljs-string">[Install]</span><span class="hljs-string">WantedBy=multi-user.target</span><span class="hljs-string">EOF</span>systemctl <span class="hljs-built_in">enable</span> qbittorrent.service <span class="hljs-comment"># 设置开机自启动</span>qbittorrent-nox -y --webui-port=2021 <span class="hljs-comment"># 打开尝试然后ctrl+c退出。</span><span class="hljs-comment"># 默认端口是2021哦，用户名admin，密码adminadmin。</span></code></pre></div><ul><li>设置qbittorrent命令</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">qbit_command=<span class="hljs-string">&quot;/usr/bin/qbittorrent&quot;</span>touch <span class="hljs-variable">$qbit_command</span>cat&gt;<span class="hljs-variable">$qbit_command</span>&lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">#!/bin/bash</span><span class="hljs-string">if [ \$1 == &quot;start&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl start qbittorrent.service #启动qBittorrent</span><span class="hljs-string">elif [ \$1 == &quot;stop&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl stop qbittorrent.service #关闭qBittorrent</span><span class="hljs-string">elif [ \$1 == &quot;restart&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl restart qbittorrent.service #重启qBittorrent</span><span class="hljs-string">fi</span><span class="hljs-string">EOF</span><span class="hljs-built_in">cd</span> /usr/bin &amp;&amp; chmod +x qbittorrent<span class="hljs-comment">#之后就可以使用命令qbittorrent start|stop|restart 分别代表开始，关闭，重启。</span></code></pre></div><h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><hr><p>因为我已经整理成了shell文件放到我的<a href="https://github.com/tomorrow505/qbittorrent433">GitHub</a>上了，感兴趣的可以去看看源代码。</p><p><code>wget https://raw.githubusercontent.com/tomorrow505/qbittorrent433/main/install.sh -O install.sh &amp;&gt;/dev/null &amp;&amp; /bin/bash install.sh</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[1]：<a href="https://npchk.info/ubuntu-debian-install-qbittorrent/">Ubuntu/Debian Linux編譯qBittorrent安裝指南</a></p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PT</tag>
      
      <tag>qbittorrent</tag>
      
      <tag>shell</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的PT之路</title>
    <link href="/%E6%88%91%E7%9A%84PT%E4%B9%8B%E8%B7%AF/"/>
    <url>/%E6%88%91%E7%9A%84PT%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>写在6年之期的一些小的感悟。</p><h2 id="影之大，一个优盘放不下"><a href="#影之大，一个优盘放不下" class="headerlink" title="影之大，一个优盘放不下"></a>影之大，一个优盘放不下</h2><p>早些年时候，硬盘大多4G-8G存一些课件之类的东西，足够了。突然有一天同学过来串门，说给我看一部电影《被解放的姜戈》，果断拿优盘过去拷，结果竟然放不下~尴了个尬的，一问多大，高清8G以上……好在教育网互传还挺快。才知道PT这么一回事，他的电影都是在学校PT站内下载的。说这我也想注册一个，结果傻眼了，未开放注册~~同学也就是个普通会员，没有邀请啥的。所以就等，说是每年会开注两次。</p><p>直到15年3月13日，估计是有人跟我说了，我才进了我的第一个PT站，一看很新奇，但是视频确实都很大。看了眼规则啥的，还要分享率、保种什么的，七七八八看下来，心里直觉得麻烦~~许是当时课程比较紧，就弃置了。</p><p>4月份的时候下载了第一部电影《外星醉汉PK地球神》，很喜欢阿米尔-汗，他的《三傻大闹宝莱坞》看了不下五遍，每一次看都有新的感触。但是不知为何，站点又再次搁置了，应该是比较忙的吧。</p><h2 id="迟来的发布员和开心的时光"><a href="#迟来的发布员和开心的时光" class="headerlink" title="迟来的发布员和开心的时光"></a>迟来的发布员和开心的时光</h2><p>到10月份的时候，一些事情算是尘埃落定了，我把之前在油管上爬的一个教程传了上去，看到有人下载，心里十分开心。Sharing changes the world. 是站点的理念，真的很感激那些为站点付出的人，看了下论坛，他们一个个都很有激情，让人不禁加入进去，于是我下载的第二个种子就是怎么上传种子到站点。</p><p>慢慢地，我开始使用百度云离线，QQ旋风，迅雷等去公网搜寻种子，然后转载过来。并且个人喜欢篮球，看NBA，所以也下载了很多NBA录像传了上去，也学到了很多发布的知识，那真是一段开心的时光，纯粹的开心。久了就有大佬PM：你愿意做发布员吗？此时我已经为了玩PT买了一个2T的西数移动硬盘，也几乎不怎么关电脑。答案自然是：Yes。</p><p>进了发布组，里边的大佬还是挺多的，09年开站，一代代的传承有很多已经成为公网的活跃分子。通过论坛的学习以及跟他们的交流，也规范了自己的发种姿势，更加知道了PT站的广阔天地。为了更好的转载，于是开始走上了收割之路……北邮人、落樱、清影、葡萄、馒头、春天、听听歌、蒲公英、好大啊、我堡等等。要么是论坛申请，要么是大佬在发布群内发邀，总之每次过考核都跟升级一样，时不时去看看，总是害怕不小心挂了。（当时还进了外网HDT，本地是要吐了，还要每个季度下载15G，想来后来肯定是放弃了，死掉了。）</p><h2 id="沉寂的时光太过漫长，写个工具吧"><a href="#沉寂的时光太过漫长，写个工具吧" class="headerlink" title="沉寂的时光太过漫长，写个工具吧"></a>沉寂的时光太过漫长，写个工具吧</h2><p>16年，校园站点意外关闭，收割的站点总是少了点什么，缺少一种归属感，像飘在外面一样，之前的发布组成员也一个个离开了，新进来的很少，校园PT的青黄不接就像河水断流，日渐颓势。好在还有站点可以逛，只是时间太漫长……</p><p>也不是说关了就一直没有开，偶尔开俩月，又维护，域名也是换来换去，慢慢地，用户就少了很多。</p><p>直到后来开站，已经不再支持IPV4，也没有什么工作组员了，我成为了一个版主。没有什么荣耀加身的乐趣，干的还是发布的活。当时落樱出了一个转载美剧的机器人，我们也萌生了这样的观念，想要快速把别的站资源转发过来。先后有了三个版本的种鸡，一个是Lancesaber基于python和tr的版本，需要配置环境自动运行。一个是rach的shell版本，也是基于qb，但是需要linux。当时想着是所有发布员都要用，所以第三个版本就是我的基于python和ut的半自动转载，之所以称之为半自动，是需要输入源种链接进去的，RSS是后期加上的。后来在Matthew的建议下使用了qb. 打包编译成了windows版本。</p><p>蛰伏的时间也很快，测试发种-修复bug-添加新站点-测试发种修复bug……终于还是基本成型了，于是开启了疯狂转种模式，上了京东两块4T（后悔死了），因为发布员很少了，基本上就是几台种鸡在跑，下载的人也寥寥，可是归属感在那里，有人下就接着发。于是乎，成为了管理，干的还是发布的活。</p><h2 id="开启公网之旅-那个男人是贝壳啊"><a href="#开启公网之旅-那个男人是贝壳啊" class="headerlink" title="开启公网之旅-那个男人是贝壳啊"></a>开启公网之旅-那个男人是贝壳啊</h2><p>转眼已经到了18年底。应该是这个时间节点吧，之前沉寂的时候也进了一些站点哇，南北洋、天空、朋友、家园。至今盛传八大只剩岛了，后来进站点都是走的论坛邀请区，因为孤岛所以没见官窑。</p><p>适逢春天关站后重开改域名，trcker也换了，用qb的都知道不能批量改，于是写了一个工具放在几个站点的论坛。后来突然一个贝壳图像的QQ加我说要把工具放到GitHub上，然后问种鸡能不能支持转发更多的站点。自己在校园站high了蛮久，或许是时候去外面看看了。</p><p>贝壳大佬邀请我进了猫，慢慢的进了备胎、铂金，直到8月岛开邀，终于集齐了。多数时间在校园网混迹的我，开始了种鸡适配之旅，这期间遇到了很多的问题，也有一些不愉快，大站点相对小站点的傲气是有资本积累的，无所谓对错，更多的时候就是不适合，所以我最终还是去往了相对较小较新的站点。由于种鸡适配，进入了猫站发布组，认识了很多大佬，轻松愉快，也知道了，那个男人叫贝壳大佬。</p><p>猫站的论坛可以学习到很多东西，也有很多nice的大佬。见识到了贝壳大佬、猫大、手大、宝大、86大、甘蔗大、空白大……都是一群极其厉害的人物，更加见识了，PT之路的无止境。</p><h2 id="外网之旅，你的脚本给我用一下吧"><a href="#外网之旅，你的脚本给我用一下吧" class="headerlink" title="外网之旅，你的脚本给我用一下吧"></a>外网之旅，你的脚本给我用一下吧</h2><p>时光很快到19年底，武汉的疫情牵动了整个国家的心，我们却迎来了最长的一个假期。在家里百无聊赖的时候，一个大佬说可以效仿别的站点搞一个美剧鸡，于是乎从猫站进了MTV，租了个小盒子开始把功能加到种鸡里边，由于自己没有太多看美剧的经验，没有甄别质量的想法，加之校园PT总是希望小体积的想法，写得不是很完善。另外当时需要拿盒子过岛的考核，时间一久，便没有精力再弄了。</p><p>期间进了吐鲁番、柠檬、杜比等等站点，也见证了柠檬的第一次发种大赛，宝大第一，手大拿着种鸡混了个第二，机智的雨小天大佬第三，后来才知道这个比赛还有钱拿，哈哈~~（国庆的时候果断参加了音乐大赛，真香。）</p><p>后来86大佬突然在群里问及一个js正则的问题，即使没有系统学过js，也帮忙解答了。后来有人在群里说旧的一键转载的脚本很多站点不能用了，本着助人为乐以及折腾无止境的精神，我找来了当时的脚本，帮忙把问题给解决了。宝大找到我说他还有一个高级版本的脚本，但是不太好用了。高级脚本牵扯到外站了，各个站点不一样，导致脚本整体脉络不是很清晰，想要厘清存在一些难度，与其补丁打满，不如开始重构。</p><p>于是乎，重构工作开始了，形如宝大、86大这类狠人站点可是真的多，一个接一个砸过来，我也就开始了外站。PHD，AVZ，HDT，RED，BHD，UHD，MTV，BLU，IPT，FL……同期还进了PTP，HDF，Xthor之类的。其中PTP是校园PT小伙伴给的，后来还在上面跟外国友人求到了KG。以及后来的后来跟daom求到的CG，86大佬求到的JPOP，以及最后的最后HDB，现在就等着一个BTN了。</p><p>脚本的编写还是有趣的，可以认识很多大佬，一起调试，期间因为大佬们的推荐，进了又一个潜力站点，柠檬，脚本也支持了众多国内小的站点，同时也在好几个发布组兼职。因为转载的还是那群人，就我自己而言，猫站是我的公网落脚站，柠檬是好朋友都在的站。所以脚本基本上会在这两个站的工作人员群更新。额外的人找到我也是同样的答案，想要脚本，去群里拿吧~</p><h2 id="一些看法和感悟"><a href="#一些看法和感悟" class="headerlink" title="一些看法和感悟"></a>一些看法和感悟</h2><p>其实贴吧是个交流的好地方，但是因为网络上不知道谁是谁，扯皮也时有存在，但是我还是倾向于干两件事：写工具和发邀请，尴尬的是，一则虽然qbittorrent有着很好的api，可以做很多有意思的工具，之前写了几个放在贴吧，无奈关注的人并不多。另外由于自身佛系本性，极少去大站打工，倒是喜欢在潜力新站里边玩，所以大站邀请并不多。倒是由于特殊原因，靠着大佬帮忙，帮助两个Pter收齐了九大。</p><p>个人的进军路线总结为：校园教育站-&gt;公网站-&gt;外网站。其中教育站由于连接性好，玩的比较多，公网是以后会用的比较多，也是一手资源出现的地方，很多官组什么的，外网站由于中文资源比较少，但是很多时候是一个补充，没有最好的，适合自己就好。进工作组认识大佬是个不错的途径，前提是有足够的的时间。</p><p>个人的保种观念及外网推荐：其实保种很多时候是一个站点存在的根本，发的再多没有保种没法下，感谢IYUU的出现~外网中的HR就是为了让大家多保种，我是本地保种党，自己也有30T左右的硬盘，而由于保种玩的称心的外站有FileList，JPOP，PTP，xthor，HDF、蓝鸟等等。不玩游戏所以没有GGN。</p><p>个人进站路线推荐：个人从来没有在贴吧求过邀请。心想，一来专一是好事，二来本地设备是优势，三来结识大佬是胜势。一个站点做种几万天，发种几百上千，这种人一般去求药应该不难；本地晒设备，有诚心，虚心请教，入门后数据好看，求药应该不难；认识大佬，谈笑风生，求种不难。求药场所无非贴吧、官窑、私信。还有TG什么的就不说了，但是三者都需要花费时间精力，如果想要速成，捐赠吧。</p><p>最后的最后，希望大家能够玩得开心，没有收到站点不要气馁，时间久了都会有。更多的发邀是相互选择，在不认识的前提下强调数据无可厚非，我倒是希望给更多的新人一些机会，发了蛮多邀请，希望大家能够珍惜手里的站点，通过它们，数据好一点结识大佬的机会就多一点，然后进入更广阔的天地。</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
