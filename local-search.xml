<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sublime Text3 激活过程（2021）</title>
    <link href="/Sublime-Text3-%E6%BF%80%E6%B4%BB%E8%BF%87%E7%A8%8B%EF%BC%882021%EF%BC%89/"/>
    <url>/Sublime-Text3-%E6%BF%80%E6%B4%BB%E8%BF%87%E7%A8%8B%EF%BC%882021%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>一直都在用 sublime text3 编写js代码，这几天一直说注册码invalid，然后删除掉之后显示未注册，未注册也能用，但是经常会弹窗叫购买。。</p><p>所以在网上找了一番：</p><div class="hljs code-wrapper"><pre><code class="hljs dns">----- BEGIN LICENSE -----Member J2TeaMSingle User LicenseEA7E-<span class="hljs-number">1011316</span>D7DA350E <span class="hljs-number">1B8B0760</span> <span class="hljs-number">972F8B60</span> F<span class="hljs-number">3E64036</span>B<span class="hljs-number">9B4E234</span> F356F38F <span class="hljs-number">0</span>AD1E3B7 <span class="hljs-number">0</span>E9C5FADFA0A2ABE <span class="hljs-number">25</span>F65BD8 D<span class="hljs-number">51458E5</span> <span class="hljs-number">3923</span>CE80<span class="hljs-number">87428428</span> <span class="hljs-number">79079A01</span> AA69F319 A1AF29A4A684C2DC <span class="hljs-number">0B1583D4</span> <span class="hljs-number">19</span>CBD290 <span class="hljs-number">217618</span>CD<span class="hljs-number">5653E0A0</span> BACE3948 BB2EE45E <span class="hljs-number">422D2C87</span>DD9AF44B <span class="hljs-number">99C49590</span> D2DBDEE1 <span class="hljs-number">75860</span>FD2<span class="hljs-number">8</span>C8BB2AD B2ECE5A4 EFC08AF2 <span class="hljs-number">25A9B864</span>------ END LICENSE ------</code></pre></div><p>搞不好哪天又用不了了，哭~~</p><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><hr><p>即使注册码能用，也一会就失效了，所以还是为了万全改一个host：</p><div class="hljs code-wrapper"><pre><code class="hljs accesslog"># sublimetext<span class="hljs-number">0.0.0.0</span> license.sublimehq.com<span class="hljs-number">0.0.0.0</span> <span class="hljs-number">45</span>.<span class="hljs-number">55</span>.<span class="hljs-number">255</span>.<span class="hljs-number">55</span><span class="hljs-number">0.0.0.0</span> <span class="hljs-number">45</span>.<span class="hljs-number">55</span>.<span class="hljs-number">41</span>.<span class="hljs-number">223</span><span class="hljs-number">127.0.0.1</span> www.sublimetext.com<span class="hljs-number">127.0.0.1</span> sublimetext.com<span class="hljs-number">127.0.0.1</span> sublimehq.com<span class="hljs-number">127.0.0.1</span> telemetry.sublimehq.com</code></pre></div><p>用了一阵子了，没有移除注册码了，应该是已经成功了。</p><p><a href="https://imgtu.com/i/c92pY6"><img src="https://z3.ax1x.com/2021/03/29/c92pY6.png" alt="c92pY6.png"></a></p><p>记录一下。后期看看还有没有有用的注册码。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python操作种子文件的几点心得</title>
    <link href="/python%E6%93%8D%E4%BD%9C%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%82%B9%E5%BF%83%E5%BE%97/"/>
    <url>/python%E6%93%8D%E4%BD%9C%E7%A7%8D%E5%AD%90%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%82%B9%E5%BF%83%E5%BE%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前在写种鸡的时候，免不了要对种子进行操作，python相对第三方库比较完备，所以整理一篇看看我们能够用python实现哪些功能，也欢迎大家补充。</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><hr><ol><li>获取种子hash值</li></ol><p>一般来说，我们需要根据hash值获取客户端内的种子信息，或者在做备份或者更换种子路径的时候就需要比对。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<span class="hljs-keyword">import</span> bencode  <span class="hljs-comment"># 注意安装的模块名叫bencode.py</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params">filename</span>):</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:        torrent_data = f.read()        metainfo = bencode.bdecode(torrent_data)        info = metainfo[<span class="hljs-string">&#x27;info&#x27;</span>]        <span class="hljs-keyword">return</span> hashlib.sha1(bencode.bencode(info)).hexdigest()<span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:    print(get_hash(<span class="hljs-string">r&quot;J:\PTP种子\[OpenCD].蔡琴 - 常青树 (2008) FLAC.torrent&quot;</span>))</code></pre></div><ol start="2"><li>解析种子内部</li></ol><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torrent_parser <span class="hljs-keyword">as</span> tptorrent_path = <span class="hljs-string">r&quot;E:\PTP种子\[NPUBits].Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv.torrent&quot;</span>data = tp.parse_torrent_file(torrent_path)print(data)</code></pre></div><p>输出结果（单文件）：</p><div class="hljs code-wrapper"><pre><code class="hljs prolog">&#123;  <span class="hljs-string">&#x27;announce&#x27;</span>: <span class="hljs-string">&#x27;http://6.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,  <span class="hljs-string">&#x27;announce-list&#x27;</span>: [    [      <span class="hljs-string">&#x27;http://6.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>    ],    [      <span class="hljs-string">&#x27;http://4.npupt.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>    ]  ],  <span class="hljs-string">&#x27;comment&#x27;</span>: <span class="hljs-string">&#x27;http://passthepopcorn.me/torrents.php?id=207584&amp;torrentid=734627&#x27;</span>,  <span class="hljs-string">&#x27;created by&#x27;</span>: <span class="hljs-string">&#x27;qBittorrent v4.1.9.1&#x27;</span>,  <span class="hljs-string">&#x27;creation date&#x27;</span>: <span class="hljs-number">1576502187</span>,  <span class="hljs-string">&#x27;info&#x27;</span>: &#123;    <span class="hljs-string">&#x27;length&#x27;</span>: <span class="hljs-number">19108558519</span>,    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv&#x27;</span>,    <span class="hljs-string">&#x27;piece length&#x27;</span>: <span class="hljs-number">8388608</span>,    <span class="hljs-string">&#x27;pieces&#x27;</span>: [],    <span class="hljs-string">&#x27;private&#x27;</span>: <span class="hljs-number">1</span>,    <span class="hljs-string">&#x27;source&#x27;</span>: <span class="hljs-string">&#x27;[npupt.com] 蒲公英PT站&#x27;</span>  &#125;&#125;</code></pre></div><p>多文件的其实也差不多，我们可以解析出来的东西包括tracker，种子制作时间，制作工具，文件大小，块的数量，以及source和comment字段。同时还可以解析出文件的结构。</p><ol start="3"><li>清洗种子</li></ol><p>其实也是使用上边的torrent_parse模块，比如我们需要更换trcker。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torrent_parser <span class="hljs-keyword">as</span> tptorrent_path = <span class="hljs-string">r&quot;E:\PTP种子\[NPUBits].Ad.Astra.2019.1080p.BluRay.DDP.7.1.x264-Geek.mkv.torrent&quot;</span>data = tp.parse_torrent_file(torrent_path)data[<span class="hljs-string">&#x27;announce&#x27;</span>] = <span class="hljs-string">&#x27;what you want here&#x27;</span>new_torrent_path = <span class="hljs-string">&#x27;./test.torrent&#x27;</span>tp.create_torrent_file(new_torrent_path, data)</code></pre></div><p>这样就把tracker换了，友情提示，貌似换了tracker也不能改变种子的hash，可以尝试改改source字段或者新增字段等等。</p><ol start="4"><li>制作种子</li></ol><p>有的时候源种子文件有一些图片，字幕，我们不想要，由于pieces字段极长，我们也不太清楚其内部生成机理，所以还是重新制作种子比较方便。比如种鸡在遇到FileList内部含有字幕文件的时候就得重新制作了：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torrentool.torrent <span class="hljs-keyword">import</span> Torrent<span class="hljs-keyword">import</span> ostarget_path = <span class="hljs-string">&quot;the dir you want to bencode&quot;</span><span class="hljs-keyword">if</span> os.path.isdir(target_path): <span class="hljs-comment"># 判断是不是目录</span>    files = os.listdir(target_path)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([item.endswith(<span class="hljs-string">&#x27;.srt&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> files]): <span class="hljs-comment"># 目录中有字幕文件就重新制作，当然也可以解析种子源文件</span>        <span class="hljs-comment"># 进行重新制作，一般还比较花时间的~</span>        file_data = Torrent.create_from(target_path)         file_data.announce_urls = [<span class="hljs-string">b&#x27;https://hudbt.hust.edu.cn/announce.php&#x27;</span>] <span class="hljs-comment"># 写入你自己想要填写的tracer</span>        file_data.to_file(origin_torrent_path)</code></pre></div><p>由于Torrent制作的时候如果碰到是文件夹，不会判断里边是不是有字幕文件等等，所以我们修改一下Torrent.py的源代码</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_target_files_info</span>(<span class="hljs-params">cls, src_path: Path</span>) -&gt; Tuple[List[Tuple[str, int, List[str]]], int]:</span>        is_dir = src_path.is_dir()        src_path = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;src_path&#125;</span>&#x27;</span>  <span class="hljs-comment"># Force walk() to return unicode names.</span>        target_files = []        <span class="hljs-keyword">if</span> is_dir:            <span class="hljs-keyword">for</span> base, _, files <span class="hljs-keyword">in</span> walk(src_path):                <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:                    <span class="hljs-keyword">if</span> file.endswith((<span class="hljs-string">&#x27;srt&#x27;</span>, <span class="hljs-string">&#x27;ass&#x27;</span>, <span class="hljs-string">&#x27;ssa&#x27;</span>)):  <span class="hljs-comment"># 这里我们把字幕文件移除了，当然也可以自己设定，或者改写函数传递一个filter更加合理</span>                        files.remove(file)                target_files.extend([join(base, fname) <span class="hljs-keyword">for</span> fname <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(files)])        <span class="hljs-keyword">else</span>:            target_files.append(src_path)        target_files_ = []        total_size = <span class="hljs-number">0</span>        <span class="hljs-keyword">for</span> fpath <span class="hljs-keyword">in</span> target_files:            file_size = getsize(fpath)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> file_size:                <span class="hljs-keyword">continue</span>            target_files_.append((fpath, file_size, normpath(fpath.replace(src_path, <span class="hljs-string">&#x27;&#x27;</span>)).strip(sep).split(sep)))            total_size += file_size        <span class="hljs-keyword">return</span> target_files_, total_size</code></pre></div><ol start="5"><li>顺带说一下qb下的fastresume文件解析</li></ol><p>经常qb会突然崩溃，然后种子文件啥的都还在就是需要重新校验。我们可以找到Back_Up下的种子和fastresume，解析fastresume找到保存路径，直接用qbittorrent-api重新加载种子并且跳过校验。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> bencoderpath = <span class="hljs-string">r&quot;J:\BT_backup\000e17466dc95393df0dd92193955310597ac8db.fastresume&quot;</span>f = <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;rb&quot;</span>)d = bencoder.decode(f.read())<span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> d.items():    print(item)</code></pre></div><p>输出结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs python">(<span class="hljs-string">b&#x27;active_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;added_time&#x27;</span>, <span class="hljs-number">1599093382</span>)(<span class="hljs-string">b&#x27;allocation&#x27;</span>, <span class="hljs-string">b&#x27;sparse&#x27;</span>)(<span class="hljs-string">b&#x27;auto_managed&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;completed_time&#x27;</span>, <span class="hljs-number">1599093382</span>)(<span class="hljs-string">b&#x27;download_rate_limit&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;file-format&#x27;</span>, <span class="hljs-string">b&#x27;libtorrent resume file&#x27;</span>)(<span class="hljs-string">b&#x27;file-version&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;finished_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;httpseeds&#x27;</span>, [])(<span class="hljs-string">b&#x27;info-hash&#x27;</span>, <span class="hljs-string">b&#x27;\x00\x0e\x17Fm\xc9S\x93\xdf\r\xd9!\x93\x95S\x10Yz\xc8\xdb&#x27;</span>)(<span class="hljs-string">b&#x27;last_download&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;last_seen_complete&#x27;</span>, <span class="hljs-number">1599205887</span>)(<span class="hljs-string">b&#x27;last_upload&#x27;</span>, <span class="hljs-number">1793133</span>)(<span class="hljs-string">b&#x27;libtorrent-version&#x27;</span>, <span class="hljs-string">b&#x27;1.2.6.0&#x27;</span>)(<span class="hljs-string">b&#x27;max_connections&#x27;</span>, <span class="hljs-number">100</span>)(<span class="hljs-string">b&#x27;max_uploads&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;num_complete&#x27;</span>, <span class="hljs-number">4</span>)(<span class="hljs-string">b&#x27;num_downloaded&#x27;</span>, <span class="hljs-number">16777215</span>)(<span class="hljs-string">b&#x27;num_incomplete&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;paused&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;peers&#x27;</span>, <span class="hljs-string">b&#x27;\xb7\xb2\xc5g\x86\x88p0F\\\xc78\xdd\xe8\xba\x1cA\xf2&#x27;</span>)(<span class="hljs-string">b&#x27;peers6&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;pieces&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-category&#x27;</span>, <span class="hljs-string">b&#x27;\xe7\x94\xb5\xe5\xbd\xb1&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-hasRootFolder&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;qBt-name&#x27;</span>, <span class="hljs-string">b&#x27;&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-queuePosition&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;qBt-ratioLimit&#x27;</span>, -<span class="hljs-number">2000</span>)(<span class="hljs-string">b&#x27;qBt-savePath&#x27;</span>, <span class="hljs-string">b&#x27;W:\\HUDBT-2019-06-09\\&#x27;</span>)(<span class="hljs-string">b&#x27;qBt-seedStatus&#x27;</span>, <span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;qBt-seedingTimeLimit&#x27;</span>, -<span class="hljs-number">2</span>)(<span class="hljs-string">b&#x27;qBt-tags&#x27;</span>, [])(<span class="hljs-string">b&#x27;qBt-tempPathDisabled&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;save_path&#x27;</span>, <span class="hljs-string">b&#x27;W:\\HUDBT-2019-06-09\\&#x27;</span>)(<span class="hljs-string">b&#x27;seed_mode&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;seeding_time&#x27;</span>, <span class="hljs-number">1135879</span>)(<span class="hljs-string">b&#x27;sequential_download&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;stop_when_ready&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;super_seeding&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;total_downloaded&#x27;</span>, <span class="hljs-number">0</span>)(<span class="hljs-string">b&#x27;total_uploaded&#x27;</span>, <span class="hljs-number">15383212222</span>)(<span class="hljs-string">b&#x27;trackers&#x27;</span>, [[<span class="hljs-string">b&#x27;https://www.hddolby.com/announce.php?passkey=xxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>]])(<span class="hljs-string">b&#x27;upload_rate_limit&#x27;</span>, -<span class="hljs-number">1</span>)(<span class="hljs-string">b&#x27;url-list&#x27;</span>, [])</code></pre></div><p>好吧，今天的内容就到这里结束了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>都是第三方包的应用，只要善于搜索尝试总结，就可以掌握了。</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PT发布之一键转载脚本使用指南</title>
    <link href="/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/PT%E5%8F%91%E5%B8%83%E4%B9%8B%E4%B8%80%E9%94%AE%E8%BD%AC%E8%BD%BD%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>正如自己所想的，现在正在逐步公开脚本，搭建的GitHub项目在10个月前就已经存在了——<a href="https://github.com/tomorrow505/auto_feed_js">auto_feed_js</a>。无奈当时过于低调，没有什么反响，现在再次公开，并在这里附上一点使用指南。现在已经将最新的版本v1.6.8上传过去了。</p><h3 id="2021-3-23补充"><a href="#2021-3-23补充" class="headerlink" title="2021.3.23补充"></a>2021.3.23补充</h3><hr><p>看到有人说不会用，那就再补一点基础知识好了。首先这是基于油猴的一个脚本，所以需要油猴插件，我自己用chrome，火狐、edge等都有，所以首先需要安装这个插件。链接：<a href="https://www.tampermonkey.net/%E3%80%82">https://www.tampermonkey.net/。</a></p><p><strong>如果被墙的话，自行搜索离线安装方案。</strong></p><p>安装好之后会自动启用，扩展区域会出现相应扩展图标，点击打开之后选择打开管理面板&gt;&gt;</p><p><img src="https://pic2.zhimg.com/80/v2-682dc75260f519287a7a75fc653b0b35_720w.jpg" alt="油猴面板"></p><p>然后，点击最左边加号选择新建一个脚本，将auto_feed_js里的内容替换新建脚本里的内容，ctrl+s保存。</p><p><img src="https://pic1.zhimg.com/80/v2-6a9a3d2f344a8981b2d52c7f4e3b96f4_720w.jpg" alt="新建"></p><p>再次打开auto_feed进行编辑，按照后续的使用配置配置个人的站点即可。</p><h4 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h4><hr><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/*******************************************************************************************************************</span><span class="hljs-comment">*                                          part 0 用户变量层                                                        *</span><span class="hljs-comment">********************************************************************************************************************/</span><span class="hljs-comment">//提供可用的获取豆瓣信息两个api，从0-1选择。主要应用于外站，</span><span class="hljs-keyword">const</span> apis = [<span class="hljs-string">&#x27;https://ptgen.rhilip.info&#x27;</span>, <span class="hljs-string">&#x27;https://api.rhilip.info/tool/movieinfo/gen&#x27;</span>];<span class="hljs-keyword">const</span> api_chosen = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> if_uplver = <span class="hljs-number">1</span>; <span class="hljs-comment">//是否匿名，默认匿名，不匿名改成0</span><span class="hljs-keyword">const</span> tmdb_key = <span class="hljs-string">&#x27;0f79586eb9d92afa2b7266f7928b055c&#x27;</span>; <span class="hljs-comment">//TMDB API-KEY，用于发布需要TMDB编号的站点，这里提供一个key,如果使用不了了请自行申请</span><span class="hljs-comment">//欧美国家列表，可以酌情添加</span><span class="hljs-keyword">const</span> us_ue = [<span class="hljs-string">&#x27;挪威|丹麦|瑞典|芬兰|英国|爱尔兰|荷兰|比利时|卢森堡|法国|西班牙|葡萄牙|德国|奥地利|瑞士|美国|加拿大|澳大利亚|意大利|波兰|新西兰&#x27;</span>];<span class="hljs-comment">//是否在PTP/HDB/HDT/UHD种子列表显示搜索跳转功能，1表示显示，0表示隐藏</span><span class="hljs-keyword">const</span> SHOW_PTP_SEARCH_URLS = <span class="hljs-number">1</span>;<span class="hljs-keyword">const</span> SHOW_HDB_SEARCH_URLS = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> SHOW_HDT_SEARCH_URLS = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> SHOW_UHD_SEARCH_URLS = <span class="hljs-number">0</span>;<span class="hljs-comment">//支持转发的站点列表，可以自行取消注释</span><span class="hljs-keyword">const</span> site_info = &#123;    <span class="hljs-comment">// &#x27;1PTBA&#x27;: &#x27;https://1ptba.com/&#x27;,   </span>    <span class="hljs-comment">// &#x27;52PT&#x27;: &#x27;https://52pt.site/&#x27;,</span>    <span class="hljs-comment">// &#x27;BHD&#x27; : &#x27;https://beyond-hd.me/&#x27;,</span>    <span class="hljs-comment">// &#x27;BLU&#x27;: &quot;https://blutopia.xyz/&quot;,</span>    <span class="hljs-comment">// &#x27;BTSchool&#x27;: &#x27;https://pt.btschool.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;CCF&#x27;: &#x27;http://ccfbits.org/&#x27;,</span>    <span class="hljs-string">&#x27;CMCT&#x27;</span>: <span class="hljs-string">&quot;https://springsunday.net/&quot;</span>,    <span class="hljs-string">&#x27;CHDBits&#x27;</span>: <span class="hljs-string">&quot;https://chdbits.co/&quot;</span>,    <span class="hljs-comment">// &#x27;DiscFan&#x27;: &#x27;https://discfan.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;Dragon&#x27;: &#x27;https://www.dragonhd.xyz/&#x27;,</span>    <span class="hljs-comment">// &#x27;HaiDan&#x27;: &#x27;https://www.haidan.video/&#x27;,</span>    <span class="hljs-string">&#x27;HD4FANS&#x27;</span>: <span class="hljs-string">&#x27;https://pt.hd4fans.org/&#x27;</span>,    <span class="hljs-comment">// &#x27;HDArea&#x27;: &#x27;https://www.hdarea.co/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDAtmos&#x27; : &#x27;https://hdatmos.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDB&#x27;: &#x27;https://hdbits.org/&#x27;,</span>    <span class="hljs-string">&#x27;HDChina&#x27;</span>: <span class="hljs-string">&quot;https://hdchina.org/&quot;</span>,    <span class="hljs-comment">// &#x27;HDCity&#x27;: &#x27;https://hdcity.city/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDDolby&#x27;: &#x27;https://www.hddolby.com/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDfans&#x27;: &#x27;http://hdfans.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDHome&#x27;: &quot;https://hdhome.org/&quot;,</span>    <span class="hljs-string">&#x27;HDPost&#x27;</span>: <span class="hljs-string">&#x27;https://pt.hdpost.top/&#x27;</span>,    <span class="hljs-comment">// &#x27;HDRoute&#x27;: &#x27;http://hdroute.org/&#x27;,</span>    <span class="hljs-string">&#x27;HDSky&#x27;</span>: <span class="hljs-string">&quot;https://hdsky.me/&quot;</span>,    <span class="hljs-comment">// &#x27;HDSpace&#x27;: &#x27;https://hd-space.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDT&#x27;: &#x27;https://hd-torrents.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDTime&#x27;: &#x27;https://hdtime.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDU&#x27;: &#x27;https://pt.hdupt.com/&#x27;,</span>    <span class="hljs-comment">// &#x27;HDZone&#x27;: &#x27;https://hdzone.me/&#x27;,</span>    <span class="hljs-comment">// &#x27;HITPT&#x27;: &#x27;https://www.hitpt.com/&#x27;,</span>    <span class="hljs-string">&#x27;HUDBT&#x27;</span>: <span class="hljs-string">&#x27;https://hudbt.hust.edu.cn/&#x27;</span>,    <span class="hljs-comment">// &#x27;iTS&#x27;: &#x27;https://shadowthein.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;JoyHD&#x27;: &#x27;https://www.joyhd.net/&#x27;,</span>    <span class="hljs-string">&#x27;LemonHD&#x27;</span>: <span class="hljs-string">&quot;https://lemonhd.org/&quot;</span>,    <span class="hljs-string">&#x27;MTeam&#x27;</span>: <span class="hljs-string">&quot;https://kp.m-team.cc/&quot;</span>,    <span class="hljs-comment">// &#x27;NanYang&#x27;: &quot;https://nanyangpt.com/&quot;,</span>    <span class="hljs-comment">// &#x27;Oshen&#x27;: &#x27;http://www.oshen.win/&#x27;,</span>    <span class="hljs-string">&#x27;OurBits&#x27;</span>: <span class="hljs-string">&quot;https://ourbits.club/&quot;</span>,    <span class="hljs-string">&#x27;PTer&#x27;</span>: <span class="hljs-string">&quot;https://pterclub.com/&quot;</span>,    <span class="hljs-string">&#x27;PThome&#x27;</span>: <span class="hljs-string">&quot;https://www.pthome.net/&quot;</span>,    <span class="hljs-comment">// &#x27;PTMSG&#x27;: &#x27;https://pt.msg.vg/&#x27;,</span>    <span class="hljs-comment">// &#x27;PTNIC&#x27;: &#x27;https://www.ptnic.net/&#x27;,</span>    <span class="hljs-comment">// &#x27;ptsbao&#x27;: &#x27;https://ptsbao.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;PTT&#x27;: &#x27;https://www.pttime.org/&#x27;,</span>    <span class="hljs-string">&#x27;PuTao&#x27;</span>: <span class="hljs-string">&quot;https://pt.sjtu.edu.cn/&quot;</span>,    <span class="hljs-comment">// &#x27;SoulVoice&#x27;: &#x27;https://pt.soulvoice.club/&#x27;,</span>    <span class="hljs-comment">// &#x27;TCCF&#x27;: &#x27;https://et8.org/&#x27;,</span>    <span class="hljs-string">&#x27;TJUPT&#x27;</span>: <span class="hljs-string">&#x27;https://www.tjupt.org/&#x27;</span>,    <span class="hljs-string">&#x27;TLFbits&#x27;</span>: <span class="hljs-string">&quot;http://pt.eastgame.org/&quot;</span>,    <span class="hljs-string">&#x27;TTG&#x27;</span>: <span class="hljs-string">&quot;https://totheglory.im/&quot;</span>,    <span class="hljs-comment">// &#x27;UHD&#x27;: &#x27;https://uhdbits.org/&#x27;,</span>    <span class="hljs-comment">// &#x27;YDY&#x27; :&#x27;https://pt.hdbd.us/&#x27;,</span>&#125;;<span class="hljs-comment">//支持快速搜索的站点列表，可自行添加或注释，举例：imdbid表示tt123456, imdbno表示123456，search_name表示the big bang thoery</span><span class="hljs-keyword">const</span> site_search_list = [    <span class="hljs-string">`&lt;a href=&quot;https://passthepopcorn.me/torrents.php?searchstr=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;PTP&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://broadcasthe.net/torrents.php?action=advanced&amp;imdb=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;BTN&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://hdbits.org/browse.php?search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;HDB&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://karagarga.in/browse.php?search=&#123;imdbid&#125;&amp;search_type=imdb&quot; target=&quot;_blank&quot;&gt;KG&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;http://cinemageddon.net/browse.php?search=&#123;imdbid&#125;&amp;proj=0&amp;descr=1&quot; target=&quot;_blank&quot;&gt;CG&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://filelist.io/browse.php?search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;FileList&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://beyond-hd.me/torrents?imdb=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;BHD&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://blutopia.xyz/torrents?imdb=&#123;imdbid&#125;#page/1&quot; target=&quot;_blank&quot;&gt;BLU&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://pt.hdpost.top/torrents?imdb=&#123;imdbid&#125;#page/1&quot; target=&quot;_blank&quot;&gt;HDPost&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://hd-torrents.org/torrents.php?&amp;search=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;HDT&lt;/a&gt;`</span>,    <span class="hljs-string">`&lt;a href=&quot;https://hd-space.org/index.php?page=torrents&amp;search=&#123;imdbno&#125;&amp;active=1&amp;options=2&quot; target=&quot;_blank&quot;&gt;HDSpace&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;http://hdroute.org/browse.php?action=s&amp;imdb=&#123;imdbno&#125;&quot; target=&quot;_blank&quot;&gt;HDR&lt;/a&gt;`,</span>    <span class="hljs-comment">// `&lt;a href=&quot;https://hdf.world/torrents.php?searchstr=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;HDF&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://privatehd.to/torrents?in=1&amp;search=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;PHD&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://avistaz.to/torrents?in=1&amp;search=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;AVZ&lt;/a&gt;`,</span>    <span class="hljs-comment">// `&lt;a href=&quot;https://xthor.tk/browse.php?sch=&#123;search_name&#125;&quot; target=&quot;_blank&quot;&gt;xTHOR&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://lemonhd.org/torrents.php?search=&#123;imdbid&#125;&amp;search_area=imdb&amp;suggest=4&quot; target=&quot;_blank&quot;&gt;Lemon&lt;/a&gt;`</span>,    <span class="hljs-comment">// `&lt;a href=&quot;https://lemonhd.org/torrents.php?search=&#123;search_name&#125;&amp;search_area=0&quot; target=&quot;_blank&quot;&gt;Lemon2&lt;/a&gt;`,</span>    <span class="hljs-string">`&lt;a href=&quot;https://uhdbits.org/torrents.php?searchstr=&#123;imdbid&#125;&quot; target=&quot;_blank&quot;&gt;UHD&lt;/a&gt;`</span>];<span class="hljs-comment">//常用站点列表，这里只是举例说明，可以替换成自己想要的站点名称即可</span><span class="hljs-keyword">const</span> common_sites = [<span class="hljs-string">&#x27;HDPost&#x27;</span>, <span class="hljs-string">&#x27;TTG&#x27;</span>, <span class="hljs-string">&#x27;CMCT&#x27;</span>, <span class="hljs-string">&#x27;HUDBT&#x27;</span>, <span class="hljs-string">&#x27;LemonHD&#x27;</span>, <span class="hljs-string">&#x27;Pter&#x27;</span>];<span class="hljs-comment">//这部分是属于官种名称匹配，用于声明感谢，可自定义匹配正则以及感谢bbcode</span><span class="hljs-keyword">const</span> reg_team_name = &#123;    <span class="hljs-string">&#x27;MTeam&#x27;</span>: <span class="hljs-regexp">/-(.*mteam|mpad|tnp|BMDru)/i</span>,    <span class="hljs-string">&#x27;CMCT&#x27;</span>: <span class="hljs-regexp">/-(CMCT|cmctv)/i</span>,    <span class="hljs-string">&#x27;HDSky&#x27;</span>: <span class="hljs-regexp">/-(hds|.*@HDSky)/i</span>,    <span class="hljs-string">&#x27;CHDBits&#x27;</span>: <span class="hljs-regexp">/-(CHD|.*@CHDBits)/i</span>,    <span class="hljs-string">&#x27;OurBits&#x27;</span>: <span class="hljs-regexp">/(-Ao|-.*OurBits|-FLTTH|-IloveTV)/i</span>,    <span class="hljs-string">&#x27;TTG&#x27;</span>: <span class="hljs-regexp">/-(WiKi|DoA|.*TTG|NGB|ARiN)/i</span>,    <span class="hljs-string">&#x27;HDChina&#x27;</span>: <span class="hljs-regexp">/-(HDC)/i</span>,    <span class="hljs-string">&#x27;PTer&#x27;</span>: <span class="hljs-regexp">/-(Pter|.*Pter)/i</span>,    <span class="hljs-string">&#x27;LemonHD&#x27;</span>: <span class="hljs-regexp">/-(LHD|i18n|League.*)/i</span>,    <span class="hljs-string">&#x27;HDHome&#x27;</span>: <span class="hljs-regexp">/-hdh/i</span>,    <span class="hljs-string">&#x27;PThome&#x27;</span>: <span class="hljs-regexp">/(-pthome|-pth|.*@pth)/i</span>,    <span class="hljs-string">&#x27;PuTao&#x27;</span>: <span class="hljs-regexp">/-putao/i</span>,    <span class="hljs-string">&#x27;NanYang&#x27;</span>: <span class="hljs-regexp">/-nytv/i</span>,    <span class="hljs-string">&#x27;TLFbits&#x27;</span>: <span class="hljs-regexp">/-tlf/i</span>,    <span class="hljs-string">&#x27;HDDolby&#x27;</span>: <span class="hljs-regexp">/-DBTV/i</span>,    <span class="hljs-string">&#x27;FRDS&#x27;</span>: <span class="hljs-regexp">/-FRDS|@FRDS/i</span>,    <span class="hljs-string">&#x27;BeiTai&#x27;</span>: <span class="hljs-regexp">/-BeiTai/i</span>&#125;;<span class="hljs-keyword">const</span> thanks_str = <span class="hljs-string">&quot;[quote][b][color=Blue]转自&#123;site&#125;，感谢原制作者发布。[/color][/b][/quote]\n\n&#123;descr&#125;&quot;</span>;</code></pre></div><p>基本上只要设置这一部分就够了，如果自己不需要魔改的话。支持大概转发到50多个站点，上方设置开启了10来个而已，源站点没有具体计算。大概是国内NP架构都会有部分支持~</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><hr><p>以蝴蝶、FL、BLU、UHD为例，打开种子详情页面：</p><p><a href="https://imgtu.com/i/6TpgOJ"><img src="https://z3.ax1x.com/2021/03/22/6TpgOJ.png" alt="6TpgOJ.png"></a></p><p>典型的NP架构，内站无需多言，直接转发即可。</p><p><a href="https://imgtu.com/i/6TpRm9"><img src="https://z3.ax1x.com/2021/03/22/6TpRm9.png" alt="6TpRm9.png"></a></p><p><a href="https://imgtu.com/i/6Tpcy4"><img src="https://z3.ax1x.com/2021/03/22/6Tpcy4.png" alt="6Tpcy4.png"></a></p><p><a href="https://imgtu.com/i/6T9A7n"><img src="https://z3.ax1x.com/2021/03/22/6T9A7n.png" alt="6T9A7n.png"></a></p><p>FL表格不明显，自己单独写了一个表格，BLU和UHD分属于不同的外网架构。</p><h3 id="存在的问题及解决思路"><a href="#存在的问题及解决思路" class="headerlink" title="存在的问题及解决思路"></a>存在的问题及解决思路</h3><hr><p>它们转内站最大的问题就是：</p><ul><li>图片防外链：所以博客里边讲解了一些自动截图上传的python脚本。</li><li>缺失豆瓣信息：多是IMDB，所以使用了PTGen的API（感谢R酱）用于获取，博客里也有其他的一些API和实现方案。</li></ul><p>所以基本上就是点击获取就可以得到豆瓣信息，之后点击转发就可以了。<br><a href="https://imgtu.com/i/6T9740"><img src="https://z3.ax1x.com/2021/03/22/6T9740.md.png" alt="6T9740.md.png"></a><br><a href="https://imgtu.com/i/6TCVDH"><img src="https://z3.ax1x.com/2021/03/22/6TCVDH.md.png" alt="6TCVDH.md.png"></a></p><p>以上是电影的直接解决方案，但是一旦碰到剧集就傻眼了，因为国外的剧集基本上都是第一季的imdb。所以在不是第一季的前提下，又弄出了两种替代备选方案。</p><ul><li>点击选中API，会有一个隐藏的textare下拉出来，此时点击检索名称，会有一些检索结果，选中合适的资源对应的豆瓣链接，点击获取，成功后再次点击转发，已经OK了</li></ul><p><a href="https://imgtu.com/i/6TPpLQ"><img src="https://z3.ax1x.com/2021/03/22/6TPpLQ.md.png" alt="6TPpLQ.md.png"></a></p><p><a href="https://imgtu.com/i/6TPvkR"><img src="https://z3.ax1x.com/2021/03/22/6TPvkR.md.png" alt="6TPvkR.md.png"></a></p><ul><li>实在是没有搜索出来的，取消选中API，直接搜索名称会跳转到豆瓣，将获取到的豆瓣链接替换输入框里的imdb链接，再次点击获取即可，过程我就不演示了。</li></ul><p>至于脚本还拥有的其他功能，只能靠大家慢慢去探索了，总而言之，无论内站外站，都有了比较成熟的解决方案。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>世界上本没有路，走的人多了，也便成了路。（本篇文章所用截图均保存于路过图床，希望不会有事，哈哈~~~）</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python自动上传图片到路过图床</title>
    <link href="/Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E6%9F%A0%E6%AA%AC%E5%9B%BE%E5%BA%8A/"/>
    <url>/Python%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E6%9F%A0%E6%AA%AC%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>之前介绍了上传图片到imgbox，使用了第三方模块，那么我们现在用requests实现怎么上传图片到路过图床。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><hr><p>首先我们先访问<a href="https://imgtu.com/">路过网站</a>注册一个新的账号，然后登陆。F12获取登陆的cookie，用于填充在以下的代码中：</p><p>至于要提交什么数据其实使用Fiddler就可以了，但是这个不是我们今天讨论的重点。我们先来看看python是怎么实现的。</p><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-comment"># 上传图片到路过图床</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_luguo</span>(<span class="hljs-params">img_loc=<span class="hljs-literal">None</span></span>):</span>    <span class="hljs-comment"># 提交的数据为multi-part,一部分是文件，一部分是数据</span>        <span class="hljs-comment">## 打开文件二进制流，命名为source，抓取到的，类型为image/jpeg</span>    img = <span class="hljs-built_in">open</span>(img_loc, <span class="hljs-string">&quot;rb&quot;</span>)    files = [(<span class="hljs-string">&#x27;source&#x27;</span>, (img_loc.split(<span class="hljs-string">&#x27;\\&#x27;</span>)[-<span class="hljs-number">1</span>], img, <span class="hljs-string">&#x27;image/jpeg&#x27;</span>))]        <span class="hljs-comment">## 提交的数据中有一个重要的字符串为auth_token，基本上会定时变，所以在上传之前我们先访问一次页面获取一下 </span>    auth_token = get_auth_token()    data = &#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;file&#x27;</span>,        <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;upload&#x27;</span>,        <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-built_in">int</span>(time.time()) * <span class="hljs-number">1000</span>,        <span class="hljs-string">&#x27;auth_token&#x27;</span>: auth_token,        <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&quot;0&quot;</span>    &#125;    <span class="hljs-comment">## 请求的地址</span>    des_url = <span class="hljs-string">&#x27;https://imgtu.com/json&#x27;</span>        <span class="hljs-comment">## 提交数据和文件，cookies也是转换好的</span>    <span class="hljs-keyword">try</span>:        des_post = requests.post(            url=des_url,            data=data,            files=files,            cookies=luguo_cookies)        response = des_post.content.decode()        data = json.loads(response)        print(data)        <span class="hljs-keyword">return</span> data[<span class="hljs-string">&#x27;image&#x27;</span>][<span class="hljs-string">&#x27;url&#x27;</span>]    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(<span class="hljs-string">&#x27;截图上传失败……%s&#x27;</span> % exc)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 上传之前先访问一次页面获取auth_token</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_auth_token</span>():</span>    url = <span class="hljs-string">&#x27;https://imgtu.com/&#x27;</span>    response = requests.get(url, cookies=luguo_cookies)    html = response.content.decode()    token = re.search(<span class="hljs-string">&#x27;auth_token=[a-z0-9]*&#x27;</span>, html).group()    token = token.split(<span class="hljs-string">&#x27;=&#x27;</span>)[-<span class="hljs-number">1</span>].strip()    <span class="hljs-keyword">return</span> token<span class="hljs-comment">## 将cookie字符串转换成字典的形式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cookies_raw2jar</span>(<span class="hljs-params">raw: <span class="hljs-built_in">str</span></span>) -&gt; dict:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    Arrange Cookies from raw using SimpleCookies</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> raw:        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;The Cookies is not allowed to be empty.&quot;</span>)    <span class="hljs-keyword">from</span> http.cookies <span class="hljs-keyword">import</span> SimpleCookie    cookie = SimpleCookie(raw)    <span class="hljs-keyword">return</span> &#123;key: morsel.value <span class="hljs-keyword">for</span> key, morsel <span class="hljs-keyword">in</span> cookie.items()&#125;<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    luguo_cookie_raw = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 登录后获取到的cookie字符串</span>    luguo_cookies = cookies_raw2jar(luguo_cookie_raw) <span class="hljs-comment"># 转换成字典</span>    img_path = <span class="hljs-string">r&quot;E:\HUDBT\imgs\Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&quot;</span> <span class="hljs-comment"># 测试的图片链接</span>    send_luguo(img_path, auth_token) <span class="hljs-comment"># 上传返回的是图片的地址</span></code></pre></div><p>输出结果(隐去了一部分不重要的个人信息)：</p><div class="hljs code-wrapper"><pre><code class="hljs python">&#123;  <span class="hljs-string">&#x27;status_code&#x27;</span>: <span class="hljs-number">200</span>,  <span class="hljs-string">&#x27;success&#x27;</span>: &#123;    <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;image uploaded&#x27;</span>,    <span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">200</span>  &#125;,  <span class="hljs-string">&#x27;image&#x27;</span>: &#123;    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,    <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">195587</span>,    <span class="hljs-string">&#x27;width&#x27;</span>: <span class="hljs-string">&#x27;1216&#x27;</span>,    <span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&#x27;1055&#x27;</span>,    <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 19:57:12&#x27;</span>,    <span class="hljs-string">&#x27;date_gmt&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 11:57:12&#x27;</span>,    <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB DL.DDP5.1.x264 MZABI.mkv&#x27;</span>,    <span class="hljs-string">&#x27;description&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;storage_mode&#x27;</span>: <span class="hljs-string">&#x27;datefolder&#x27;</span>,    <span class="hljs-string">&#x27;md5&#x27;</span>: <span class="hljs-string">&#x27;7cf830075aff82dd6a8bb32d5ad565d7&#x27;</span>,    <span class="hljs-string">&#x27;original_filename&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&#x27;</span>,    <span class="hljs-string">&#x27;original_exifdata&#x27;</span>: <span class="hljs-string">&#x27;&#123;&quot;FileName&quot;:&quot;Blood.of.Zeus.S01E08.War.for.Olympus.1080p.NF.WEB-DL.DDP5.1.x264-MZABI.mkv.jpg&quot;,&quot;FileDateTime&quot;:&quot;1616414232&quot;,&quot;FileSize&quot;:&quot;195587&quot;,&quot;FileType&quot;:&quot;2&quot;,&quot;MimeType&quot;:&quot;image\\/jpeg&quot;,&quot;SectionsFound&quot;:&quot;&quot;,&quot;COMPUTED&quot;:&#123;&quot;html&quot;:&quot;width=\\&quot;1216\\&quot; height=\\&quot;1055\\&quot;&quot;,&quot;Height&quot;:&quot;1055&quot;,&quot;Width&quot;:&quot;1216&quot;,&quot;IsColor&quot;:&quot;1&quot;&#125;&#125;&#x27;</span>,    <span class="hljs-string">&#x27;views&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;category_id&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;chain&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>,    <span class="hljs-string">&#x27;thumb_size&#x27;</span>: <span class="hljs-string">&#x27;12273&#x27;</span>,    <span class="hljs-string">&#x27;medium_size&#x27;</span>: <span class="hljs-string">&#x27;118214&#x27;</span>,    <span class="hljs-string">&#x27;expiration_date_gmt&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;is_animated&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,    <span class="hljs-string">&#x27;source_md5&#x27;</span>: <span class="hljs-literal">None</span>,    <span class="hljs-string">&#x27;is_approved&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,    <span class="hljs-string">&#x27;file&#x27;</span>: &#123;      <span class="hljs-string">&#x27;resource&#x27;</span>: &#123;        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;url&#x27;</span>      &#125;    &#125;,    <span class="hljs-string">&#x27;id_encoded&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.jpg&#x27;</span>,    <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,    <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.jpg&#x27;</span>,    <span class="hljs-string">&#x27;ratio&#x27;</span>: <span class="hljs-number">1.15260663507109</span>,    <span class="hljs-string">&#x27;size_formatted&#x27;</span>: <span class="hljs-string">&#x27;195.6 KB&#x27;</span>,    <span class="hljs-string">&#x27;url_viewer&#x27;</span>: <span class="hljs-string">&#x27;https://imgtu.com/i/6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;url_short&#x27;</span>: <span class="hljs-string">&#x27;https://imgtu.com/i/6oOpND&#x27;</span>,    <span class="hljs-string">&#x27;image&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">195587</span>    &#125;,    <span class="hljs-string">&#x27;thumb&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.th.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.th&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.th.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-string">&#x27;12273&#x27;</span>    &#125;,    <span class="hljs-string">&#x27;medium&#x27;</span>: &#123;      <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.md.jpg&#x27;</span>,      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;6oOpND.md&#x27;</span>,      <span class="hljs-string">&#x27;mime&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,      <span class="hljs-string">&#x27;extension&#x27;</span>: <span class="hljs-string">&#x27;jpg&#x27;</span>,      <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.md.jpg&#x27;</span>,      <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-string">&#x27;118214&#x27;</span>    &#125;,    <span class="hljs-string">&#x27;display_url&#x27;</span>: <span class="hljs-string">&#x27;https://z3.ax1x.com/2021/03/22/6oOpND.md.jpg&#x27;</span>,    <span class="hljs-string">&#x27;display_width&#x27;</span>: <span class="hljs-string">&#x27;680&#x27;</span>,    <span class="hljs-string">&#x27;display_height&#x27;</span>: <span class="hljs-number">590</span>,    <span class="hljs-string">&#x27;views_label&#x27;</span>: <span class="hljs-string">&#x27;次浏览&#x27;</span>,    <span class="hljs-string">&#x27;likes_label&#x27;</span>: <span class="hljs-string">&#x27;喜欢&#x27;</span>,    <span class="hljs-string">&#x27;how_long_ago&#x27;</span>: <span class="hljs-string">&#x27;2 秒 前&#x27;</span>,    <span class="hljs-string">&#x27;date_fixed_peer&#x27;</span>: <span class="hljs-string">&#x27;2021-03-22 19:57:12&#x27;</span>,    <span class="hljs-string">&#x27;title_truncated&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War....&#x27;</span>,    <span class="hljs-string">&#x27;title_truncated_html&#x27;</span>: <span class="hljs-string">&#x27;Blood.of.Zeus.S01E08.War....&#x27;</span>,    <span class="hljs-string">&#x27;is_use_loader&#x27;</span>: <span class="hljs-literal">False</span>  &#125;,  <span class="hljs-string">&#x27;request&#x27;</span>: &#123;    <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;file&#x27;</span>,    <span class="hljs-string">&#x27;action&#x27;</span>: <span class="hljs-string">&#x27;upload&#x27;</span>,    <span class="hljs-string">&#x27;timestamp&#x27;</span>: <span class="hljs-string">&#x27;1616414181000&#x27;</span>,    <span class="hljs-string">&#x27;auth_token&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,    <span class="hljs-string">&#x27;nsfw&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>  &#125;,  <span class="hljs-string">&#x27;status_txt&#x27;</span>: <span class="hljs-string">&#x27;OK&#x27;</span>&#125;</code></pre></div><p>测试图片：</p><p><img src="https://z3.ax1x.com/2021/03/22/6oOpND.jpg" alt="测试图片"></p><p>其实发现提供的数据还是挺多的，不仅包括图片链接，还有缩略小图和中等大小的图片。国内很多图床都是这种架构，那么只需要更改部分代码就可以实现上传图片到其他图床了，但是——请不要滥用。</p><p>本文只做技术探讨，不鼓励存放过多无意义的图片。本文属于原创作品，如果你喜欢这篇文章请收藏转发，或者给作者一定的打赏支持吧。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>python</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器的一点总结</title>
    <link href="/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <url>/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>学习python也有一段时间了，用了也有一段时间了，但是有些东西不用就老会忘，索性写一点总结，备忘。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><blockquote><p>装饰器本质上是一个<strong>Python函数</strong>，它可以让其他函数在不需要做任何代码变动的前提下<strong>增加额外功能</strong>，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。<strong>装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。</strong></p></blockquote><p>个人听到比较有趣的一个用处是：已经交付的产品，如果想要打补丁，别人已经在你的基础上开发了，你如果想要更改函数名称已经不太现实了，那么这个时候可以为原来的函数创建一个装饰器用来补救。</p><h3 id="分类及形式"><a href="#分类及形式" class="headerlink" title="分类及形式"></a>分类及形式</h3><hr><p>python装饰器的4种类型：函数装饰函数、函数装饰类、类装饰函数、类装饰类</p><p>废话不多说，先上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------函数装饰函数-------------------------#</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapFun</span>(<span class="hljs-params">func</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">a, b</span>):</span>        print(<span class="hljs-string">&#x27;function name:&#x27;</span>, func.__name__)        r = func(a, b)        <span class="hljs-keyword">return</span> r    <span class="hljs-keyword">return</span> inner<span class="hljs-meta">@wrapFun</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">myadd</span>(<span class="hljs-params">a, b</span>):</span>    <span class="hljs-keyword">return</span> a + bprint(myadd(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))print(myadd.__name__)</code></pre></div><p>输出结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs python">function name: myadd<span class="hljs-number">5</span>inner</code></pre></div><p>个人理解：</p><ul><li><p>首先myadd函数定义的时候开辟了一个内存空间，可以进行加法运算；</p></li><li><p>@是装饰器的关键字，上面的例子就是说myadd外层包裹一个wrapFun，将myadd作为参数传递给了wrapFun，叫做func，指向一开始的内存空间；</p></li><li><p>同时在wrapFunc内部定义了一个函数inner，里边的执行过程包含了func那部分过程，同时将内部函数返回（并未调用），而此时myadd已经变成了inner，执行myadd(2, 3)等同于执行inner(2,3)。</p></li><li><p>约等于：myadd = wrapFun(myadd) -&gt; inner；此时myadd已经换了一个内存空间了，再调用就是inner的全过程了。</p></li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------函数装饰类-------------------------#</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapClass</span>(<span class="hljs-params">cls</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">a</span>):</span>        print(<span class="hljs-string">&#x27;class name:&#x27;</span>, cls.__name__)        cls.foo()        <span class="hljs-keyword">return</span> cls(a)    <span class="hljs-keyword">return</span> inner<span class="hljs-meta">@wrapClass</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>():</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a</span>):</span>        self.a = a<span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span>(<span class="hljs-params">cls</span>):</span>        print(<span class="hljs-string">&#x27;Do sth at this time&#x27;</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">self</span>):</span>        print(<span class="hljs-string">&#x27;self.a =&#x27;</span>, self.a)m = Foo(<span class="hljs-string">&#x27;xiemanR&#x27;</span>)print(Foo.__name__)print(<span class="hljs-built_in">type</span>(m))m.fun()</code></pre></div><p>输出结果：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span>:</span> FooDo sth at this timeinner&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">Foo</span>&#x27;&gt;</span>self.a = xiemanR</code></pre></div><p>与上边的大同小异，这里就不再分析了……</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------类装饰函数-------------------------#</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowFunName</span>():</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, func</span>):</span>        self._func = func    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, a</span>):</span>        print(<span class="hljs-string">&#x27;function name:&#x27;</span>, self._func.__name__)        <span class="hljs-keyword">return</span> self._func(a)<span class="hljs-meta">@ShowFunName</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Bar</span>(<span class="hljs-params">a</span>):</span>    <span class="hljs-keyword">return</span> aprint(Bar(<span class="hljs-string">&#x27;xiemanR&#x27;</span>))</code></pre></div><p>输出结果：约等于 Bar = ShowFunName(Bar)， Bar的内存空间传递给了Bar._func，然后默认执行<code>__call__</code>函数。</p><div class="hljs code-wrapper"><pre><code class="hljs python">function name: BarxiemanR</code></pre></div><p>最后一类：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># ----------------------类装饰类-------------------------#</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShowClassName</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cls</span>):</span>        self._cls = cls    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, a</span>):</span>        print(<span class="hljs-string">&#x27;class name:&#x27;</span>, self._cls.__name__)        <span class="hljs-keyword">return</span> self._cls(a)<span class="hljs-meta">@ShowClassName</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foobar</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a</span>):</span>        self.value = a    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">self</span>):</span>        print(self.value)a = Foobar(<span class="hljs-string">&#x27;xiemanR&#x27;</span>)print(<span class="hljs-built_in">type</span>(a))a.fun()</code></pre></div><p>输出结果：相当于Foobar = ShowClassName(Foobar)，Foobar.cls 指向Foobar之前的内存空间，然后调用<code>__call__</code>函数返回了Foobar，Foobar绕了一圈，就是为了执行<code>__call__</code>返回Foobar之前的那部分代码。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">name</span>:</span> Foobar&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">__main__</span>.<span class="hljs-title">Foobar</span>&#x27;&gt;</span><span class="hljs-class"><span class="hljs-title">xiemanR</span></span></code></pre></div><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><ul><li>装饰带不定长度参数的函数： 通常装饰器不只装饰一个函数，每个函数参数的个数也不相同，这个时候使用不定长参数*args,**kwargs</li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clothes</span>(<span class="hljs-params">func</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wear</span>(<span class="hljs-params">*args, **kwargs</span>):</span>        print(<span class="hljs-string">&#x27;Buy clothes!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(func.__name__))        <span class="hljs-keyword">return</span> func(*args, **kwargs)    <span class="hljs-keyword">return</span> wear<span class="hljs-meta">@clothes</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">body</span>(<span class="hljs-params">part</span>):</span>    print(<span class="hljs-string">&#x27;The body feels could!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(part))<span class="hljs-meta">@clothes</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">head</span>(<span class="hljs-params">head_wear, num=<span class="hljs-number">2</span></span>):</span>    print(<span class="hljs-string">&#x27;The head need buy &#123;&#125; &#123;&#125;!&#x27;</span>.<span class="hljs-built_in">format</span>(num, head_wear))body(<span class="hljs-string">&#x27;hands&#x27;</span>)head(<span class="hljs-string">&#x27;headdress&#x27;</span>)<span class="hljs-comment"># 输出结果为：</span>Buy clothes!bodyThe body feels could!handsBuy clothes!headThe head need buy <span class="hljs-number">2</span> headdress!</code></pre></div><ul><li><strong>装饰器带参数</strong>：</li></ul><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 把装饰器再包装，实现了seasons传递装饰器参数。</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">seasons</span>(<span class="hljs-params">season_type</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clothes</span>(<span class="hljs-params">func</span>):</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wear</span>(<span class="hljs-params">*args, **kwargs</span>):</span>            <span class="hljs-keyword">if</span> season_type == <span class="hljs-number">1</span>:                s = <span class="hljs-string">&#x27;spring&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">2</span>:                s = <span class="hljs-string">&#x27;summer&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">3</span>:                s = <span class="hljs-string">&#x27;autumn&#x27;</span>            <span class="hljs-keyword">elif</span> season_type == <span class="hljs-number">4</span>:                s = <span class="hljs-string">&#x27;winter&#x27;</span>            <span class="hljs-keyword">else</span>:                print(<span class="hljs-string">&#x27;The args is error!&#x27;</span>)                <span class="hljs-keyword">return</span> func(*args, **kwargs)            print(<span class="hljs-string">&#x27;The season is &#123;&#125;!&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(s, func.__name__))            <span class="hljs-keyword">return</span> func(*args, **kwargs)        <span class="hljs-keyword">return</span> wear    <span class="hljs-keyword">return</span> clothes<span class="hljs-meta">@seasons(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">children</span>():</span>    print(<span class="hljs-string">&#x27;i am children&#x27;</span>)children()print(children.__name__)<span class="hljs-comment"># 输出结果为：</span>The season <span class="hljs-keyword">is</span> summer!childreni am childrenwear</code></pre></div><p>这个就稍微复杂一点，又需要再嵌套一层，我们先看seasons接收了装饰器传递进去的参数，是一个数字2，然后season返回了一个clothes函数，这个函数接收参数children，返回一个wear函数，此时children已经变成了wear函数了，wear最后执行的是最最开始children内存空间里的代码，打印了i am children。</p><p>整理一下思路：children -&gt; clothese(2)(children) - &gt; wear；最后执行wear()。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><hr><p>语法糖博大精深，还需要努力学习，然后应用于实战。</p><p>举例说一下我之前写代码遇到的一个问题：我在一个主线程写了一个子线程，每隔一段时间从网络上爬取RSS的数据，结果呢有时候可能是因为网络原因卡死。那就设置一个超时的装饰器，等它超过时间没有返回结果就干掉重开。</p><blockquote><p>线程卡死的地方大多数都是在io或者http请求那。</p></blockquote><p>function_timeout这个模块便是处理这类问题的，废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> func_timeout <span class="hljs-keyword">import</span> func_set_timeout<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> func_timeout<span class="hljs-meta">@func_set_timeout(<span class="hljs-params"><span class="hljs-number">1</span></span>) </span><span class="hljs-comment"># 封装好的装饰器，只要task运行时间超过传进去的1秒，就会报出FunctionTimedOut的异常</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">task</span>():</span>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        print(<span class="hljs-string">&#x27;hello world&#x27;</span>)        time.sleep(<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-keyword">try</span>:        task()    <span class="hljs-keyword">except</span> func_timeout.exceptions.FunctionTimedOut:        print(<span class="hljs-string">&#x27;task func_timeout&#x27;</span>)</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>这类应用应该会有很多，发散思维多想想就会有收获的。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><p>[1] <a href="https://blog.csdn.net/xiemanR/article/details/72510885">python装饰器的4种类型：函数装饰函数、函数装饰类、类装饰函数、类装饰类</a></p><p>[2] <a href="https://blog.51cto.com/yishi/2354752">Python装饰器高级版—Python类内定义装饰器并传递self参数</a></p><p>[3] <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p04_define_decorator_that_takes_arguments.html">定义一个带参数的装饰器</a></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python使用IMDBID获取豆瓣信息</title>
    <link href="/Pythonh%E4%BD%BF%E7%94%A8IMDBID%E8%8E%B7%E5%8F%96%E8%B1%86%E7%93%A3%E4%BF%A1%E6%81%AF/"/>
    <url>/Pythonh%E4%BD%BF%E7%94%A8IMDBID%E8%8E%B7%E5%8F%96%E8%B1%86%E7%93%A3%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>上一篇说到了用API获取豆瓣信息，使用的都是豆瓣链接，这一次我们介绍一个API用于直接使用IMDB号获取豆瓣信息。还是那句话，API说不定哪天就不好使了，且用且珍惜。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><hr><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info_from_imdb</span>(<span class="hljs-params">url</span>):</span>    api_url = <span class="hljs-string">&#x27;https://omit.mkrobot.org/movie/infos/&#x27;</span>    imdb_id = re.search(<span class="hljs-string">r&quot;tt(\d+)&quot;</span>, url).group()    req_url = api_url + imdb_id    data = requests.get(req_url).json()    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    imdb_url = <span class="hljs-string">&#x27;https://www.imdb.com/title/tt5109280/&#x27;</span>    get_douban_info_from_imdb(imdb_url)</code></pre></div><p>显示结果为：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;data&#x27;: &#123;    &#x27;title&#x27;: &#x27;寻龙传说 Raya and The Last Dragon&#x27;,    &#x27;image&#x27;: &#x27;https://img9.doubanio.com/view/photo/s_ratio_poster/public/p2633531206.jpg&#x27;,    &#x27;director&#x27;: &#x27;唐·霍尔 / 卡洛斯·洛佩斯·埃斯特拉达 / 保罗·布里格斯 / 约翰·瑞帕&#x27;,    &#x27;scenarist&#x27;: &#x27;阮基 / 阿黛勒·林 / 保罗·布里格斯 / 唐·霍尔 / 卡洛斯·洛佩斯·埃斯特拉达 / 基尔·默里 / 约翰·瑞帕 / 迪恩·威林斯&#x27;,    &#x27;cast&#x27;: &#x27;凯莉·玛丽·陈 / 奥卡菲娜 / 嘉玛·陈 / 金大贤 / 吴珊卓 / 本尼迪克特·王 / 伊扎克·王 / 塔莉娅·陈 / 艾伦·图代克 / 迪辰·拉克曼 / 帕蒂·哈里森 / 姜成镐 / 罗斯·巴特勒 / 乔娜·肖 / 宋静秀 / 弗朗克西斯·周 / 保罗·扬 / 丽莎·德尔·门多 / 塔妮亚·古纳迪 / 珍妮·关 / 卢锡安·佩雷兹 / 文森特·罗德里格兹三世&#x27;,    &#x27;genre&#x27;: &#x27;动画 / 奇幻 / 冒险&#x27;,    &#x27;region&#x27;: &#x27;美国&#x27;,    &#x27;language&#x27;: &#x27;英语&#x27;,    &#x27;releaseDate&#x27;: &#x27;2021-03-05(中国大陆/美国)&#x27;,    &#x27;runtime&#x27;: &#x27;108分钟&#x27;,    &#x27;aka&#x27;: &#x27;魔龙王国(港) / 寻龙使者：拉雅(台) / 瑞亚和最后一条龙 / 拉雅和最后的龙&#x27;,    &#x27;originalTitle&#x27;: &#x27;Raya and The Last Dragon&#x27;,    &#x27;imdbId&#x27;: &#x27;tt5109280&#x27;,    &#x27;average&#x27;: &#x27;7.3&#x27;,    &#x27;votes&#x27;: &#x27;59109&#x27;,    &#x27;year&#x27;: &#x27;2021&#x27;,    &#x27;summary&#x27;: &#x27;很久以前，在充满奇幻色彩的龙佑之邦，人类和龙和谐地生活在一起。但当一股邪恶的力量袭来，龙牺牲了自己来拯救人类。500年后，同样的邪恶力量卷土重来，只有一个孤独的战士拉雅（凯莉·玛丽·陈 配音）承担重任，追踪传说中的最后一条龙，以修复这块破碎的土地，团结分裂的人民。在她的旅程中，她也会逐渐了解到拯救世界不仅仅需要一条龙，还需要信任和团队合作。&#x27;,    &#x27;link&#x27;: &#x27;https://movie.douban.com/subject/34804147/&#x27;,    &#x27;id&#x27;: &#x27;34804147&#x27;,    &#x27;updateTime&#x27;: 1616231860574  &#125;&#125;</code></pre></div><p>感谢那些无私奉献弄出这些API服务器的人~~~</p><h3 id="2021-03-22：补充"><a href="#2021-03-22：补充" class="headerlink" title="2021.03.22：补充"></a>2021.03.22：补充</h3><hr><p>还有一个API，据说都是豆瓣官方的API，可以直接转换imdbid到豆瓣id，算是一个补充吧。</p><p>废话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_id_from_imdb_id</span>(<span class="hljs-params">url</span>):</span>    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span>                      <span class="hljs-string">&#x27;537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span>    &#125;    api_url = <span class="hljs-string">&quot;https://movie.douban.com/j/subject_suggest?q=&quot;</span>    imdb_id = re.search(<span class="hljs-string">r&quot;tt(\d+)&quot;</span>, url).group()    req_url = api_url + imdb_id    data = requests.get(req_url, headers=headers).json()[<span class="hljs-number">0</span>] <span class="hljs-comment"># 这里得加上headers模拟浏览器，否则没结果，然后返回的是一个列表</span>    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    imdb_url = <span class="hljs-string">&#x27;https://www.imdb.com/title/tt5109280/&#x27;</span>    get_douban_id_from_imdb_id(imdb_url)</code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python">[&#123;<span class="hljs-string">&quot;episode&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-string">&quot;https://img9.doubanio.com\/view\/photo\/s_ratio_poster\/public\/p2633531206.jpg&quot;</span>,<span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;寻龙传说&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;https:\/\/movie.douban.com\/subject\/34804147\/?suggest=tt5109280&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;movie&quot;</span>,<span class="hljs-string">&quot;year&quot;</span>:<span class="hljs-string">&quot;2021&quot;</span>,<span class="hljs-string">&quot;sub_title&quot;</span>:<span class="hljs-string">&quot;Raya and The Last Dragon&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;34804147&quot;</span>&#125;]</code></pre></div><p>可以看到id字段就是豆瓣id了，还有豆瓣的海报图片，那么就可以根据豆瓣id做一些抓取的工作了，好了，就到这里吧。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>没有什么好总结了，再见！！</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬取豆瓣电影信息</title>
    <link href="/Pythonh%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF/"/>
    <url>/Pythonh%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>前人如R酱很多都有开发豆瓣获取的API，但是可能不知道哪天就用不上了，所以自己写一个python版本留存好了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><hr><p>需要一点bs4的基础，request及json的基本使用，话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<span class="hljs-keyword">import</span> json<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info</span>(<span class="hljs-params">url</span>):</span>    <span class="hljs-comment"># 自定义一个请求头</span>    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/&#x27;</span>                      <span class="hljs-string">&#x27;537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span>    &#125;    session = requests.session() <span class="hljs-comment"># 开启一个session</span>    session.keep_alive = <span class="hljs-literal">False</span>    session.headers = headers    <span class="hljs-keyword">try</span>:        response = session.get(url)        html = response.text        soup = BeautifulSoup(html, <span class="hljs-string">&#x27;lxml&#x27;</span>)        json_value = soup.select(<span class="hljs-string">&#x27;script[type=&quot;application/ld+json&quot;]&#x27;</span>)[<span class="hljs-number">0</span>].getText()        douban_info = json.loads(json_value)        print(douban_info)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(exc)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    douban_url = <span class="hljs-string">&quot;https://movie.douban.com/subject/30458949/&quot;</span> <span class="hljs-comment"># 用于测试的豆瓣链接</span>    get_douban_info(douban_url)</code></pre></div><p>运行结果输出的是json，通过格式化一下输出结果展示：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;@context&#x27;: &#x27;http://schema.org&#x27;,  &#x27;name&#x27;: &#x27;无依之地 Nomadland&#x27;,  &#x27;url&#x27;: &#x27;/subject/30458949/&#x27;,  &#x27;image&#x27;: &#x27;https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2630453887.jpg&#x27;,  &#x27;director&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1349079/&#x27;,      &#x27;name&#x27;: &#x27;赵婷 Chloé Zhao&#x27;    &#125;  ],  &#x27;author&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1349079/&#x27;,      &#x27;name&#x27;: &#x27;赵婷 Chloé Zhao&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444467/&#x27;,      &#x27;name&#x27;: &#x27;杰西卡·布鲁德 Jessica Bruder&#x27;    &#125;  ],  &#x27;actor&#x27;: [    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1010548/&#x27;,      &#x27;name&#x27;: &#x27;弗兰西斯·麦克多蒙德 Frances McDormand&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1007009/&#x27;,      &#x27;name&#x27;: &#x27;大卫·斯特雷泽恩 David Strathairn&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384822/&#x27;,      &#x27;name&#x27;: &#x27;德里克·贾尼斯 Derrick Janis&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1148827/&#x27;,      &#x27;name&#x27;: &#x27;泰·斯特雷泽恩 Tay Strathairn&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384817/&#x27;,      &#x27;name&#x27;: &#x27;卡特·克利福德 Cat Clifford&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1384767/&#x27;,      &#x27;name&#x27;: &#x27;彼得·斯皮尔斯 Peter Spears&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444468/&#x27;,      &#x27;name&#x27;: &#x27;盖伊·德福雷斯特 Gay DeForest&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444469/&#x27;,      &#x27;name&#x27;: &#x27;帕特里夏·格里尔 Patricia Grier&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444470/&#x27;,      &#x27;name&#x27;: &#x27;琳达·梅 Linda May&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444471/&#x27;,      &#x27;name&#x27;: &#x27;安吉拉·雷耶斯 Angela Reyes&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444472/&#x27;,      &#x27;name&#x27;: &#x27;卡尔·R·休斯 Carl R. Hughes&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444473/&#x27;,      &#x27;name&#x27;: &#x27;道格拉斯·G·苏尔 Douglas G. Soul&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444474/&#x27;,      &#x27;name&#x27;: &#x27;瑞安·阿基诺 Ryan Aquino&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444475/&#x27;,      &#x27;name&#x27;: &#x27;特蕾莎·布坎南 Teresa Buchanan&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444476/&#x27;,      &#x27;name&#x27;: &#x27;凯莉·林恩·麦克德莫特·怀尔德 Karie Lynn McDermott Wilder&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444477/&#x27;,      &#x27;name&#x27;: &#x27;布兰迪·威尔伯 Brandy Wilber&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444478/&#x27;,      &#x27;name&#x27;: &#x27;马克西·埃切维里 Makenzie Etcheverry&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444479/&#x27;,      &#x27;name&#x27;: &#x27;鲍勃·威尔斯 Bob Wells&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444480/&#x27;,      &#x27;name&#x27;: &#x27;安妮特·威尔斯 Annette Wells&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444481/&#x27;,      &#x27;name&#x27;: &#x27;瑞秋·班农 Rachel Bannon&#x27;    &#125;,    &#123;      &#x27;@type&#x27;: &#x27;Person&#x27;,      &#x27;url&#x27;: &#x27;/celebrity/1444482/&#x27;,      &#x27;name&#x27;: &#x27;夏琳·斯旺基 Charlene Swankie&#x27;    &#125;  ],  &#x27;datePublished&#x27;: &#x27;2020-09-11&#x27;,  &#x27;genre&#x27;: [    &#x27;剧情&#x27;  ],  &#x27;duration&#x27;: &#x27;PT1H48M&#x27;,  &#x27;description&#x27;: &#x27;基于Jessica Bruder所著书籍《Nomadland: Surviving America in the Twenty-First Century》，讲述一个60多岁的女人在经济大萧条中失去了...&#x27;,  &#x27;@type&#x27;: &#x27;Movie&#x27;,  &#x27;aggregateRating&#x27;: &#123;    &#x27;@type&#x27;: &#x27;AggregateRating&#x27;,    &#x27;ratingCount&#x27;: &#x27;82767&#x27;,    &#x27;bestRating&#x27;: &#x27;10&#x27;,    &#x27;worstRating&#x27;: &#x27;2&#x27;,    &#x27;ratingValue&#x27;: &#x27;8.3&#x27;  &#125;&#125;</code></pre></div><p>那么我们就可以根据返回的东西构造自己的简介了。</p><h3 id="其他的API"><a href="#其他的API" class="headerlink" title="其他的API"></a>其他的API</h3><hr><p>之前看到一个API可以使用，也在这里介绍一下吧。<a href="https://blog.csdn.net/moewang/article/details/108909336">一个新的豆瓣API替代接口，可获取豆瓣、IMDB、烂番茄的电影/电视剧双语(中英)数据</a>：</p><p>调用的python程序，依据上边的改版一下即可：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> json<span class="hljs-keyword">import</span> re<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_douban_info_use_api</span>(<span class="hljs-params">url</span>):</span>    img_api_url = <span class="hljs-string">&#x27;https://movie.querydata.org/api/generateimage?id =&#123;id&#125;&amp;lang=Cn&#x27;</span>    api_url = <span class="hljs-string">&#x27;https://movie.querydata.org/api?id=&#x27;</span>    douban_id = re.search(<span class="hljs-string">r&quot;subject/(\d+)&quot;</span>, url).group(<span class="hljs-number">1</span>)    req_url = api_url + douban_id    data = requests.get(req_url).json()    print(data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    douban_url = <span class="hljs-string">&quot;https://movie.douban.com/subject/30458949/&quot;</span>    get_douban_info_use_api(douban_url)</code></pre></div><p>输出结果格式化显示为：</p><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;  &#x27;id&#x27;: &#x27;5fedf65d2c3842603f71871d&#x27;,  &#x27;originalName&#x27;: &#x27;Nomadland&#x27;,  &#x27;imdbVotes&#x27;: 1891,  &#x27;imdbRating&#x27;: &#x27;7.9&#x27;,  &#x27;rottenVotes&#x27;: 201,  &#x27;rottenRating&#x27;: &#x27;97&#x27;,  &#x27;doubanId&#x27;: &#x27;30458949&#x27;,  &#x27;imdbId&#x27;: &#x27;tt9770150&#x27;,  &#x27;alias&#x27;: &#x27;游牧人生(台) / 浪迹天地(港) / 游牧之地&#x27;,  &#x27;doubanVotes&#x27;: 1098,  &#x27;doubanRating&#x27;: &#x27;8.7&#x27;,  &#x27;year&#x27;: &#x27;2020&#x27;,  &#x27;type&#x27;: &#x27;Movie&#x27;,  &#x27;duration&#x27;: 6480,  &#x27;dateReleased&#x27;: &#x27;2020-09-11T08:00:00.000+08:00&#x27;,  &#x27;totalSeasons&#x27;: None,  &#x27;episodes&#x27;: None,  &#x27;data&#x27;: [    &#123;      &#x27;genre&#x27;: &#x27;剧情&#x27;,      &#x27;name&#x27;: &#x27;无依之地&#x27;,      &#x27;lang&#x27;: &#x27;Cn&#x27;,      &#x27;language&#x27;: &#x27;英语&#x27;,      &#x27;poster&#x27;: &#x27;https://image.querydata.org/movie/poster/1609430622982-4fca62.jpg&#x27;,      &#x27;description&#x27;: &#x27;基于Jessica Bruder所著书籍《Nomadland: Surviving America in the Twenty-First Century》，讲述一个60多岁的女人在经济大萧条中失去了...&#x27;,      &#x27;country&#x27;: &#x27;美国&#x27;    &#125;,    &#123;      &#x27;genre&#x27;: &#x27;Drama&#x27;,      &#x27;name&#x27;: &#x27;Nomadland&#x27;,      &#x27;lang&#x27;: &#x27;En&#x27;,      &#x27;language&#x27;: &#x27;English&#x27;,      &#x27;poster&#x27;: &#x27;https://image.querydata.org/movie/poster/1609430624461-feg6bf.jpg&#x27;,      &#x27;description&#x27;: &#x27;After losing everything in the Great Recession, a woman embarks on a journey through the American West, living as a van-dwelling modern-day nomad.&#x27;,      &#x27;country&#x27;: &#x27;USA, Germany&#x27;    &#125;  ],  &#x27;director&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;赵婷&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Chloé Zhao&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ],  &#x27;actor&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;卡特·克利福德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Cat Clifford&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;德里克·贾尼斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Derrick Janis&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;大卫·斯特雷泽恩&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;David Strathairn&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;弗兰西斯·麦克多蒙德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Frances McDormand&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;泰·斯特雷泽恩&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Tay Strathairn&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;彼得·斯皮尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Peter Spears&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;盖伊·德福雷斯特&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Gay DeForest&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;帕特里夏·格里尔&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Patricia Grier&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;琳达·梅&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Linda May&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;安吉拉·雷耶斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Angela Reyes&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;卡尔·休斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Carl R. Hughes&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;道格拉斯·g·苏尔&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Douglas G. Soul&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;瑞安·阿基诺&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Ryan Aquino&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;特蕾莎·布坎南&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Teresa Buchanan&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;凯莉·林恩·麦克德莫特·怀尔德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Karie Lynn McDermott Wilder&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;白兰地·威尔伯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Brandy Wilber&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;马克西·埃切维里&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Makenzie Etcheverry&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;鲍勃·威尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Bob Wells&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;安妮特·威尔斯&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Annette Wells&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;雷切尔·班农&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Rachel Bannon&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;斯旺基&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Swankie&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ],  &#x27;writer&#x27;: [    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;赵婷&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Chloé Zhao&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;,    &#123;      &#x27;data&#x27;: [        &#123;          &#x27;name&#x27;: &#x27;杰西卡·布鲁德&#x27;,          &#x27;lang&#x27;: &#x27;Cn&#x27;        &#125;,        &#123;          &#x27;name&#x27;: &#x27;Jessica Bruder&#x27;,          &#x27;lang&#x27;: &#x27;En&#x27;        &#125;      ]    &#125;  ]&#125;</code></pre></div><p>好像基本上大同小异哈，本次教程就到这里。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>API好用是好用，但是总担心哪一天就用不了了。今天这个好处就是豆瓣自己提供的json格式的简介，应该能够一直用吧，可以把这些代码写进自己的项目或者工具里，如果喜欢这篇文章，可以多多分享，谢谢大家~</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><p><a href="https://stackoverflow.com/questions/35140158/using-beautifulsoup-to-find-tag-with-two-specific-styles">Using BeautifulSoup to find tag with two specific styles</a></p><p><a href="https://blog.csdn.net/moewang/article/details/108909336">一个新的豆瓣API替代接口，可获取豆瓣、IMDB、烂番茄的电影/电视剧双语(中英)数据</a></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+Fluid实现添加百度分享按钮</title>
    <link href="/Hexo-Fluid%E5%AE%9E%E7%8E%B0%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%8C%89%E9%92%AE/"/>
    <url>/Hexo-Fluid%E5%AE%9E%E7%8E%B0%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E6%8C%89%E9%92%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>很早以前，本科还是人人网盛行的时候，经常会看到分享至人人网之类的按钮，现在确实是不行了，但是分享这个功能还是很好的，博客搭建起来能够在谷歌搜索了，那么就寻思这开始分享吧。</p><h3 id="百度分享"><a href="#百度分享" class="headerlink" title="百度分享"></a>百度分享</h3><hr><blockquote><p>百度分享是一个提供网页地址收藏、分享及发送的<a href="https://baike.baidu.com/item/WEB2.0">WEB2.0</a>按钮工具，网站的浏览者可以方便的分享到<a href="https://baike.baidu.com/item/%E4%BA%BA%E4%BA%BA%E7%BD%91/7914975">人人网</a>、分享到<a href="https://baike.baidu.com/item/%E5%BC%80%E5%BF%83%E7%BD%91/2992974">开心网</a>、分享到QQ空间、分享到<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A/9854094">新浪微博</a>等一系列SNS站点。</p></blockquote><p>以上描述引用自百度百科，但是2019年就有新闻说百度分享不能用了。好在前人折腾的时候把代码和功能都摸索了一遍，就照着来吧。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><hr><p>首先在主题layout下的_partial目录里新建一个baidushare.ejs，没有此目录则新建一个。下边是我的配置，还可以参考网上别人的配置。</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bdsharebuttonbox&quot;</span>&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_more&quot;</span> data-cmd=<span class="hljs-string">&quot;more&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_qzone&quot;</span> data-cmd=<span class="hljs-string">&quot;qzone&quot;</span> title=<span class="hljs-string">&quot;分享到QQ空间&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tsina&quot;</span> data-cmd=<span class="hljs-string">&quot;tsina&quot;</span> title=<span class="hljs-string">&quot;分享到新浪微博&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tqq&quot;</span> data-cmd=<span class="hljs-string">&quot;tqq&quot;</span> title=<span class="hljs-string">&quot;分享到腾讯微博&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_baidu&quot;</span> data-cmd=<span class="hljs-string">&quot;baidu&quot;</span> title=<span class="hljs-string">&quot;分享到百度&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_weixin&quot;</span> data-cmd=<span class="hljs-string">&quot;weixin&quot;</span> title=<span class="hljs-string">&quot;分享到微信&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_sqq&quot;</span> data-cmd=<span class="hljs-string">&quot;sqq&quot;</span> title=<span class="hljs-string">&quot;分享到QQ&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_tieba&quot;</span> data-cmd=<span class="hljs-string">&quot;tieba&quot;</span> title=<span class="hljs-string">&quot;分享到百度贴吧&quot;</span>&gt;&lt;/a&gt;  &lt;a href=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;bds_douban&quot;</span> data-cmd=<span class="hljs-string">&quot;douban&quot;</span> title=<span class="hljs-string">&quot;分享到豆瓣&quot;</span>&gt;&lt;/a&gt;&lt;/div&gt;&lt;script&gt;  <span class="hljs-built_in">window</span>._bd_share_config = &#123;    <span class="hljs-string">&quot;common&quot;</span>: &#123;      <span class="hljs-string">&quot;bdSnsKey&quot;</span>: &#123;&#125;,      <span class="hljs-string">&quot;bdText&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,      <span class="hljs-string">&quot;bdMini&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,      <span class="hljs-string">&quot;bdMiniList&quot;</span>: <span class="hljs-literal">false</span>,      <span class="hljs-string">&quot;bdPic&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,      <span class="hljs-string">&quot;bdStyle&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,      <span class="hljs-string">&quot;bdSize&quot;</span>: <span class="hljs-string">&quot;24&quot;</span>    &#125;,    <span class="hljs-string">&quot;share&quot;</span>: &#123;&#125;,<span class="hljs-string">&quot;slide&quot;</span>: &#123;<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;slide&quot;</span>,<span class="hljs-string">&quot;bdImg&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;bdPos&quot;</span>: <span class="hljs-string">&quot;right&quot;</span>,<span class="hljs-string">&quot;bdTop&quot;</span>: <span class="hljs-string">&quot;151.5&quot;</span>&#125;,  &#125;;  <span class="hljs-keyword">with</span>(<span class="hljs-built_in">document</span>) <span class="hljs-number">0</span>[(getElementsByTagName(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>] || body).appendChild(createElement(<span class="hljs-string">&#x27;script&#x27;</span>)).src = <span class="hljs-string">&#x27;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&#x27;</span> + ~ ( - <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() / <span class="hljs-number">36e5</span>)]; &lt;/script&gt;</code></pre></div><p>接着在layout的post.ejs合适的地方插入：</p><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;% <span class="hljs-keyword">if</span> (theme.post.baidushare.enable) &#123; %&gt;    &lt;%- partial(<span class="hljs-string">&#x27;_partial/baidushare&#x27;</span>) %&gt;&lt;% &#125; %&gt;</code></pre></div><p>最后在主题设置文件_config.yml里的post设置里加入：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">baidushare:</span>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span></code></pre></div><h3 id="附图一张"><a href="#附图一张" class="headerlink" title="附图一张"></a>附图一张</h3><hr><p><img src="/post/share.png" alt="share"></p><p>是不是很简单？赶紧将此文章分享出去吧！！！</p><p>但是——</p><p>​    由于HTTPS不被百度分享支持，所以如果你的站点是https协议的话，需要将第一个baidushare.ej里的static文件放到一个可以访问的地方，具体可以参照这篇文章<a href="https://xserena.github.io/my-blog/2018/08/25/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/">Hexo添加分享功能</a>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>搭建博客的时候总是希望把一切东西元素都加一遍，最后发现还是要写有意思的文章啊。或者转载也行~</p><p>还是要努力啊，技术教程，我来了。。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>[1] <a href="https://xserena.github.io/my-blog/2018/08/25/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD/">Hexo添加分享功能</a></p><p>[2] <a href="https://blog.csdn.net/u014175572/article/details/49275277">百度分享js代码</a></p><p>[3] <a href="https://www.talklee.com/blog/447.html">百度分享官网挂了，献出自用的百度分享代码</a></p>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>美化</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建的个人博客实现谷歌百度收录</title>
    <link href="/Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/"/>
    <url>/Hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%B0%B7%E6%AD%8C%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>兴致冲冲的搜索自己发布的文章发现根本没有，也就是说只能自己输入网址才能够看到，别人根本搜不到，气急败坏。整！</p><p>如何能够辨别自己的站点被收录了呢？输入site:tomorrow505.xyz，有相关结果就成功了。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>生成sitemap</p><blockquote><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎。sitemap是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><p>安装插件走一波：</p><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap –-save</code></pre></div><p>编辑博客配置文件：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">vim</span> <span class="hljs-string">_config.yml</span><span class="hljs-comment"># 自动生成sitemap</span><span class="hljs-attr">sitemap:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">sitemap.xml</span><span class="hljs-attr">baidusitemap:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidusitemap.xml</span></code></pre></div><p>用于在generate的时候生成这两个文件，然后可以通过域名+名称的方式打开，如：<a href="http://tomorrow505.xyz/sitemap.xml%E5%B1%95%E7%A4%BA%E4%BA%86%E7%AB%99%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E9%93%BE%E6%8E%A5%E4%BF%A1%E6%81%AF%E3%80%82">http://tomorrow505.xyz/sitemap.xml展示了站点的所有链接信息。</a></p><p>接下来就是谷歌和百度收录的工作了。</p><h3 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h3><hr><p>算是比较简单的了。根据帖子Hexo+github搭建个人博客（五）<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo+github搭建个人博客（五）：百度和谷歌收录博客">[1]</span></a></sup>的步骤登录<a href="https://www.google.com/webmasters/">google search console</a>，添加自己的博客网站，google同样有多种方法。我选择CNAME方式验证，然后提交sitemap过去就好了。搜索site:tomorrow505.xyz，google已经能够搜索到博客，即google收录成功。</p><h3 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h3><hr><p>参考了第二篇文章，说的会比较详细，我也简单总结一下：</p><ol><li>站点URL优化所能够用到的插件或思想：(因为博客还在一步步搭建过程中，所以暂时先不考虑)</li></ol><ul><li><p>hexo-abbrlink</p></li><li><p>设计urlname</p></li><li><p>中文链接转拼音方式( hexo-permalink-pinyin插件 ）</p></li></ul><ol start="2"><li><p>查询站点是否被收录，与谷歌一样，不再描述。</p></li><li><p>添加站点至谷歌搜索平台（SEO）第一步</p></li></ol><p>我也是根据文章做的提交成功了，然后选择了主动推送的方案。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install hexo-baidu-url-submit --save</code></pre></div><p>配置根目录_config.yml写入以下配置：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">baidu_url_submit:</span>  <span class="hljs-attr">count:</span> <span class="hljs-number">10</span>                           <span class="hljs-comment"># 提交最新的多少个链接</span>  <span class="hljs-attr">host:</span> <span class="hljs-string">https://yourname.gitee.io/</span>    <span class="hljs-comment"># 在百度站长平台中添加的域名</span>  <span class="hljs-attr">token:</span> <span class="hljs-string">your_token</span>               <span class="hljs-comment"># 秘钥</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">baidu_urls.txt</span>                <span class="hljs-comment"># 文本文档的地址,新链接会保存在此文本文档里</span></code></pre></div><p>修改站点url为自己购买的域名，最后获取token配置提交方案：</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment">## 这是原来的deployer</span>  <span class="hljs-attr">repo:</span>  <span class="hljs-attr">branch:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span> <span class="hljs-comment">## 在这里添加新内容即可</span></code></pre></div><p>可以看出是增加了一个提交的type，然后执行部署提交的时候就可以实现主动推送了</p><div class="hljs code-wrapper"><pre><code class="hljs bash">http://tomorrow505.xyz/2021/ckmgbiu2e0000dsag6mnaf7y7/http://tomorrow505.xyz/2021/ckmfpryfc0000u0ag5e79dw4i/http://tomorrow505.xyz/2021/ckmf3rc7n000f6oag2b2g8tvx/http://tomorrow505.xyz/2021/ckmf3rc7l000a6oaghxm57hgy/http://tomorrow505.xyz/2021/ckmf3rc7l000b6oag1bymbixh/http://tomorrow505.xyz/2021/ckmf3rc7800016oag0x7k0s36/http://tomorrow505.xyz/2021/ckmf3rc7m000d6oag1ycr0oww/http://tomorrow505.xyz/2021/ckmf3rc7q000k6oag3wolcl8n/&#123;<span class="hljs-string">&quot;remain&quot;</span>:2992,<span class="hljs-string">&quot;success&quot;</span>:8&#125;INFO  Deploy <span class="hljs-keyword">done</span>: baidu_url_submitter</code></pre></div><p><strong>同时在<code>hexo\.deploy_git\</code>路径下会生成一个<code>baidu_urls.txt</code>文件，其中包含了你站点中的URL链接。</strong></p><p>至于手动或者sitemap怎么推送就看教程就好了，这里只是一个记录。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>活到老，学到老，以后就专心写博客了。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><hr><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="http://duansm.top/2018/08/08/hexo-sitemap/">Hexo+github搭建个人博客（五）：百度和谷歌收录博客</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/liangllhahaha/article/details/105343008">站点（e.g. Hexo Blog）提交百度搜索引擎收录实现SEO</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+Hexo绑定到Godaddy域名</title>
    <link href="/Github-Hexo%E7%BB%91%E5%AE%9A%E5%88%B0Godaddy%E5%9F%9F%E5%90%8D/"/>
    <url>/Github-Hexo%E7%BB%91%E5%AE%9A%E5%88%B0Godaddy%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>本着不折腾浑身难受的理念，按照教程<strong>绑定GitHub上的个人博客到Godaddy域名</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="绑定Github上的个人博客到Godaddy域名">[1]</span></a></sup>做了一次域名解析，发现难倒是不难，就是访问速度变慢了很多。后边再想想要不要CDN加速吧，反正现在先用着。哈哈~将流程记录下来。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><hr><h3 id="1-首先在Godaddy官网购买域名"><a href="#1-首先在Godaddy官网购买域名" class="headerlink" title="1. 首先在Godaddy官网购买域名"></a>1. 首先在<a href="https://sg.godaddy.com/zh/">Godaddy官网</a>购买域名</h3><h3 id="2-配置GitHub"><a href="#2-配置GitHub" class="headerlink" title="2. 配置GitHub"></a>2. 配置GitHub</h3><p>在Hexo的source目录下创建CNAME文件将域名写进去。之后部署项目。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo ghexo d</code></pre></div><blockquote><p>如果你是用 hexo 框架搭建博客并部署到 Github Pages 上: 每次hexo g hexo d 后会把你的博客所在目录下 public 文件夹里的东西都推到 Github Pages 仓库上，并且把 CNAME 文件覆盖掉，解决这个问题可以直接<strong>把CNAME文件添加到source文件夹里</strong>，这样每次推的时候就不用担心仓库里的 CNAME 文件被覆盖掉了。</p></blockquote><p>折腾的时候放在主目录提交一次删一次。。坑~~</p><blockquote><p><em>还有一种方式是：在网站的Github项目上，点击设置Settings，找到Custom domain，填入申请的域名，并保存。这样也会在Github项目的根目录看到这个文件，但是当你在每次部署项目之后，这个CNAME文件都会消失，本质上相当于你新建的CNAME放在了本地Github项目的根目录了，而不是在source文件夹下。</em></p></blockquote><h3 id="3-向你的-DNS-配置中添加-3-条记录（在域名解析提供商，下面以dnspod为例）"><a href="#3-向你的-DNS-配置中添加-3-条记录（在域名解析提供商，下面以dnspod为例）" class="headerlink" title="3. 向你的 DNS 配置中添加 3 条记录（在域名解析提供商，下面以dnspod为例）"></a>3. 向你的 DNS 配置中添加 3 条记录（在<a href="https://cloud.tencent.com/product/cns?from=10680">域名解析</a>提供商，下面以dnspod为例）</h3><table><thead><tr><th>Host(主机记录)</th><th>记录类型</th><th>Points To(记录值)</th></tr></thead><tbody><tr><td>@</td><td>A</td><td>192.30.252.153</td></tr><tr><td>@</td><td>A</td><td>192.30.252.154</td></tr><tr><td>www</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><h3 id="4-去-GoDaddy-修改-DNS-地址"><a href="#4-去-GoDaddy-修改-DNS-地址" class="headerlink" title="4. 去 GoDaddy 修改 DNS 地址"></a>4. 去 GoDaddy 修改 DNS 地址</h3><p>具体过程去看源帖吧。在更改域名服务器的时候我用的是DNSPod提供的，一开始不会生效，等一会儿就好了。最后就能打开了。</p><h3 id="5-优化参考性及可行性"><a href="#5-优化参考性及可行性" class="headerlink" title="5. 优化参考性及可行性"></a>5. 优化参考性及可行性</h3><p>在帖子<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="优化 Hexo 博客的访问速度">[2]</span></a></sup>发现博客部署在GitHub Pages上，从国内打开访问速度很慢，我第一感觉就是图片加载很慢了。</p><blockquote><p>过慢的访问速度会使得用户在访问网站的时候失去耐心，导致有些用户可能会直接关闭你的网站</p></blockquote><p>我十分认同这样的理念，但是CDN一开始我就没考虑，因为博客刚刚起步，本来就没有什么访客，所以我着眼于图片压缩。</p><ul><li><p>一是压缩图片的尺寸。</p></li><li><p>二是压缩图片的分辨率。</p></li></ul><h3 id="6-不怂就是干，用python来实现一波。"><a href="#6-不怂就是干，用python来实现一波。" class="headerlink" title="6. 不怂就是干，用python来实现一波。"></a>6. 不怂就是干，用python来实现一波。</h3><p>因为这种脚本网上肯定多得很，直接参考了一下这个帖子<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Python 图片尺寸缩放的4种方式">[3]</span></a></sup>写了一下。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">import</span> shutil<span class="hljs-keyword">import</span> os<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graphics</span>:</span><span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize_by_height</span>(<span class="hljs-params">cls, height</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;按照高度进行所需比例缩放&quot;&quot;&quot;</span>        im = Image.<span class="hljs-built_in">open</span>(infile)        (x, y) = im.size        x_s = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">float</span>(x)/<span class="hljs-built_in">float</span>(y) * height)        y_s = height        out = im.resize((x_s, y_s), Image.ANTIALIAS)        out.save(outfile, quality=<span class="hljs-number">0.7</span>)        print(<span class="hljs-string">&quot;完成&quot;</span>)<span class="hljs-meta">    @classmethod</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">resize_by_size</span>(<span class="hljs-params">cls, size</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;按照生成图片文件大小进行处理(单位KB)&quot;&quot;&quot;</span>        size *= <span class="hljs-number">1024</span>        im = Image.<span class="hljs-built_in">open</span>(infile)        size_tmp = os.path.getsize(infile)        q = <span class="hljs-number">100</span>        <span class="hljs-keyword">while</span> size_tmp &gt; size <span class="hljs-keyword">and</span> q &gt; <span class="hljs-number">0</span>:            print(q)            out = im.resize(im.size, Image.ANTIALIAS)            out.save(outfile, quality=q)            size_tmp = os.path.getsize(outfile)            q -= <span class="hljs-number">5</span>        <span class="hljs-keyword">if</span> q == <span class="hljs-number">100</span>:            shutil.copy(infile, outfile)        print(<span class="hljs-string">&quot;完成&quot;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:        infile = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的图片路径: &gt;&gt;&quot;</span>)        <span class="hljs-keyword">if</span> infile == <span class="hljs-string">&quot;exit&quot;</span>:            <span class="hljs-keyword">break</span>        dir_path = os.path.dirname(infile)        base_name = os.path.basename(infile)        tmp_path = os.path.join(dir_path, <span class="hljs-string">&#x27;tmp&#x27;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(tmp_path):            os.mkdir(tmp_path)        outfile = os.path.join(tmp_path, base_name)        mode = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你要进行的模式(1、按高160等比缩小到指定尺寸；2、压缩图片size到300KB)&quot;</span>)        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(mode) == <span class="hljs-number">1</span>:            Graphics.resize_by_height(<span class="hljs-number">160</span>)        <span class="hljs-keyword">else</span>:            Graphics.resize_by_size(<span class="hljs-number">300</span>)</code></pre></div><p>测试了一波，还没有人家提到的站点做的一半好，承让了，直接使用<a href="https://tinypng.com/">TinyPNG</a>来压缩图片。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>其实很多人已经在你前边走了一条路，但是你不走过去，你怎么知道沿途的风景呢？</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://cloud.tencent.com/developer/article/1367881">绑定Github上的个人博客到Godaddy域名</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://kaitohh.com/tweak-hexo/">优化 Hexo 博客的访问速度</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/ln152315/article/details/42777149">Python 图片尺寸缩放的4种方式</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>折腾笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>博客</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（四）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我们已经实现了从视频到截图到bbcode的过程，但是还是有一个细节，很多网站短mediainfo没法弄，那么希望能够顺带也获取一下。</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>这次使用到的就是mediainfo了，这个在linux可以用 apt install mediainfo 安装，windows下可以下载一个cli版添加到环境变量。</p><p>教程：<a href="https://fossies.org/linux/MediaInfo_CLI/MediaInfo/Contrib/CLI_Help.doc">https://fossies.org/linux/MediaInfo_CLI/MediaInfo/Contrib/CLI_Help.doc</a></p><p>上面放了一个doc文档，可以自定义怎么输出剪短的mediainfo，但是我们现在就只需要长的就好了。话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_mediainfo</span>(<span class="hljs-params">file</span>) -&gt; str:</span>    process = subprocess.Popen([<span class="hljs-string">&quot;mediainfo&quot;</span>, file], stdout=subprocess.PIPE)    output, error = process.communicate()    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> error <span class="hljs-keyword">and</span> output != <span class="hljs-string">b&quot;\n&quot;</span>:        output = output.decode()  <span class="hljs-comment"># bytes -&gt; string</span>        output = re.sub(re.escape(file), os.path.basename(file), output)  <span class="hljs-comment"># Hide file path</span>        <span class="hljs-keyword">return</span> output    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span></code></pre></div><p>简而言之就是通过调用mediainfo命令获取到了想要的信息并且只保留视频文件名。</p><p>接下来就剩最后一个问题了，怎么快速获取到视频的存储路径呢？这里仅仅适合于qbittorrent，其他客户端应该也有类似的，先不探讨了。这里登场的模块叫做<a href="https://pypi.org/project/qbittorrent-api/">qbittorrent-api</a>，用于调用qbittorrent的web api达到一些想要的结果。话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> qbittorrentapi<span class="hljs-keyword">import</span> osqb_host = <span class="hljs-string">&quot;http://localhost:2021&quot;</span> <span class="hljs-comment"># 这里基本上部署在本地才可以截图所以就直接用localhost了,假设端口是2021</span>qb_name = <span class="hljs-string">&quot;admin&quot;</span>qb_pwd = <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_save_path_from_hash</span>(<span class="hljs-params">hash_value</span>):</span>    <span class="hljs-comment"># 首先登陆qbittorrent之前需要开启webui，然后通过host, port(可选), name, password进行登录</span>    qb = qbittorrentapi.Client(host=qbt_address, port=qbt_port, username=qbt_user, password=qbt_password)    <span class="hljs-keyword">try</span>:    qb.auth_log_in()        torrents = qb.torrents_info(hashes=hash_value) <span class="hljs-comment"># 基本上有1个或者没有，返回种子列表</span>        torrent_name = torrents[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;name&#x27;</span>]        save_path = torrents[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;save_path&#x27;</span>] <span class="hljs-comment"># 获取到save_path和name基本上就可以得到视频或者视频文件的目录了</span>        path = os.path.join(save_path, torrent_name) <span class="hljs-comment"># 对path进行扫描获取到视频文件路径即可</span>        ...    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        print(exc)</code></pre></div><p>qbittorrentapi还有很多其他的命令，这里只是用到了查询，还可以增删改，此处应有掌声。</p><p>到了这一步，其实已经算完结了。整合所有的代码就可以完成从hash到视频mediainfo到截图到上传。怎么样，应该是学会了吧？不会也不要紧，直接上链接。</p><p><code>https://github.com/tomorrow505/qbittorrent433/blob/main/get_mediaifno_picture.py</code></p><p>如果你想在盒子上部署，也可以用下面的命令一键部署：</p><p><code>wget https://raw.githubusercontent.com/tomorrow505/qbittorrent433/main/get_mediaifno_picture.sh -O get_mediaifno_picture.sh &amp;&amp; /bin/bash get_mediaifno_picture.sh</code></p><p>运行命令以后就可以用 up hash_of_torrent来进行传图了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>到了这一步，其实传图命令已经差不多了，Windows、linux下都可以愉快的截图上传了。</p><p>那么这一系列的教程就到此结束了，谢谢！！</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>qbittorrent</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（三）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我们能够通过传递过来的视频文件路径截图图片存放到指定路径，并且返回了一个列表，那么我们怎么上传到指定图床？</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>我们在这个环节用到了一个imgbox的相关模块——<a href="https://pypi.org/project/pyimgbox/">pyimgbox</a>。使用到了协程相关知识，类似于老王泡茶那个故事话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<span class="hljs-keyword">import</span> pyimgbox<span class="hljs-comment"># 将之前获取到的图片的路径列表传入</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">up_imgbox</span>(<span class="hljs-params">filepaths, gallery_name</span>):</span>    result = [] <span class="hljs-comment"># 用于存放图片上传网址的bbcode列表</span>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> pyimgbox.Gallery(title=gallery_name) <span class="hljs-keyword">as</span> gallery: <span class="hljs-comment"># 该命令会创建一个名为gallery_name的相册</span>        gallery.thumb_width = <span class="hljs-number">350</span> <span class="hljs-comment"># 有的外站需要缩略图为350像素宽</span>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> submission <span class="hljs-keyword">in</span> gallery.add(filepaths): <span class="hljs-comment"># 开始添加任务，异步开始</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> submission[<span class="hljs-string">&#x27;success&#x27;</span>]: <span class="hljs-comment"># 失败的话打印任务失败原因</span>                print(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;submission[<span class="hljs-string">&#x27;filename&#x27;</span>]&#125;</span>: <span class="hljs-subst">&#123;submission[<span class="hljs-string">&#x27;error&#x27;</span>]&#125;</span>&quot;</span>)            <span class="hljs-keyword">else</span>:                print(submission)                result.append(<span class="hljs-string">&#x27;[url=%s][img]%s[/img][/url]&#x27;</span> % (submission[<span class="hljs-string">&#x27;web_url&#x27;</span>], submission[<span class="hljs-string">&#x27;thumbnail_url&#x27;</span>]))    <span class="hljs-keyword">return</span> result<span class="hljs-comment"># 上述函数的调用，标准范式</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_up_imgbox</span>(<span class="hljs-params">img_locs: <span class="hljs-built_in">list</span>=<span class="hljs-literal">None</span>, gallery_name: <span class="hljs-built_in">str</span>=<span class="hljs-literal">None</span></span>):</span>    loop = asyncio.get_event_loop()     task = loop.create_task(up_imgbox(img_locs, gallery_name))    loop.run_until_complete(task)    <span class="hljs-keyword">return</span> task.result()</code></pre></div><p>异步IO采用消息循环的模式，重复读取消息—处理消息的过程，也就是说异步IO模型需要一个消息循环，在消息循环中，主线程不断地重复“读取消息-处理消息”这一过程。</p><ul><li><p>event_loop 事件循环：程序开启一个无限的循环，程序员会把一些函数注册到事件循环上。当满足事件发生的时候，调用相应的协程函数。</p></li><li><p>coroutine 协程：协程对象，指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象。协程对象需要注册到事件循环，由事件循环调用。</p></li><li><p>task 任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。</p></li><li><p>async/await 关键字： 用于定义协程的关键字，async定义一个协程，await用于挂起阻塞的异步调用接口。</p></li></ul><p>再来看一个简单的例子：同步代码VS异步代码</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>():</span>    time.sleep(<span class="hljs-number">1</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        hello()        print(<span class="hljs-string">&#x27;Hello World:%s&#x27;</span> % time.time())  <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    run()Hello World:<span class="hljs-number">1536842494.2786784</span>Hello World:<span class="hljs-number">1536842495.2796268</span>Hello World:<span class="hljs-number">1536842496.2802596</span>Hello World:<span class="hljs-number">1536842497.2804587</span>Hello World:<span class="hljs-number">1536842498.2812462</span></code></pre></div><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义异步函数</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">i</span>):</span>    print(<span class="hljs-string">&#x27;Hello World %d :%s&#x27;</span> % (i, time.time()))    <span class="hljs-comment"># 必须使用await，不能使用yield from；如果是使用yield from ，需要采用@asyncio.coroutine相对应</span>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)    print(<span class="hljs-string">&#x27;Hello wow World %d :%s&#x27;</span> % (i, time.time()))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span>    tasks = []    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        tasks.append(hello(i))    loop.run_until_complete(asyncio.wait(tasks))<span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:    loop = asyncio.get_event_loop()    run()    loop.close()Hello World <span class="hljs-number">4</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">1</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">0</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">2</span> :<span class="hljs-number">1616070393.0068445</span>Hello World <span class="hljs-number">3</span> :<span class="hljs-number">1616070393.0068445</span>暂停约<span class="hljs-number">1</span>秒钟Hello wow World <span class="hljs-number">4</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">0</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">3</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">1</span> :<span class="hljs-number">1616070394.0171442</span>Hello wow World <span class="hljs-number">2</span> :<span class="hljs-number">1616070394.0171442</span></code></pre></div><p>大概说明一下：</p><ul><li>async def hello(): 定义async异步函数，中间可以添加await async.sleep(N) 来设定中断并执行下一个循环消息</li><li>tasks = [] 任务则是对协程进一步封装，其中包含任务的各种状态。即多个coroutine函数可以封装成一组Task然后并发执行</li><li>loop = asyncio.get_event_loop() #获取“事件循环”对象</li><li>loop.run_until_complete(asyncio.wait(tasks)) #通过事件循环，去调用协程函数</li><li>loop.close() 结束时间循环</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>pyimgbox已经封装好了其中的一些过程，所以我们可以通过传过来的视频文件路径获取到截图上传的bbcode了，但是其实还有一个mediainfo需要获取，这其实也不是什么难事。假设一个场景，我们从网页判断了一个种子转载的时候缺了截图或者mediainfo想要转到另一个网站，找视频文件地址不容易，或者盒子上也不好找。但是我们可以用qb获取到hash值来获得文件存储信息。预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（二）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>话接上回，我么能够通过传递过来的视频文件路径获取视频长度和截图命令，那么如何使用python实现呢？</p><h3 id="核心代码及思想"><a href="#核心代码及思想" class="headerlink" title="核心代码及思想"></a>核心代码及思想</h3><hr><p>话不多说，上代码：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymediainfo <span class="hljs-keyword">import</span> Mediainfo<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_video_info</span>(<span class="hljs-params">video_path</span>) -&gt; int:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    :return: 视频长度，数字</span><span class="hljs-string">    &quot;&quot;&quot;</span>    media_info = MediaInfo.parse(video_path) <span class="hljs-comment"># 解析视频</span>    data = media_info.to_json()    data = json.loads(data)[<span class="hljs-string">&#x27;tracks&#x27;</span>]        <span class="hljs-comment"># 获取视频各种信息</span>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> data:        <span class="hljs-keyword">if</span> key[<span class="hljs-string">&#x27;track_type&#x27;</span>] == <span class="hljs-string">&#x27;Video&#x27;</span>:     <span class="hljs-comment"># 视频的总帧数除以帧率得到长度</span>            video_duration = <span class="hljs-built_in">int</span>(key[<span class="hljs-string">&#x27;frame_count&#x27;</span>]) / (<span class="hljs-built_in">int</span>(key[<span class="hljs-string">&#x27;frame_rate&#x27;</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]))            <span class="hljs-keyword">return</span> video_duration</code></pre></div><p>上述代码可以直接得到一个视频的总的长度，但是我们想要截取图片的时候需要字符串，类似hh:mm:ss这样的。然后我们想要的是好几张图片？我以三张为例，假设一条线段想要有三个中间节点，那么我们会怎么处理呢？四等分就会有三个时间点了对不对？</p><p>比如60分钟的电影，我们取15分钟时间间隔，15, 30, 45 三个时间节点刚刚好，一般电影开头和截图截不出来什么东西的。我们需要把时间总长度4等分然后取三个节点将其转换成字符串传入截图函数中即可。</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> subprocess<span class="hljs-comment"># 总的过程，传入一个时间长度，获取截图时间节点进行截图存储保存路径</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_thumbnails</span>(<span class="hljs-params">video_duration</span>):</span>    number = <span class="hljs-number">3</span> <span class="hljs-comment"># 截图张数</span>    picture_list = [] <span class="hljs-comment"># 用于存储截图的保存路径</span>    seektime = <span class="hljs-number">0</span> <span class="hljs-comment"># 用于记录截图距离开头的时长，以秒计</span>        interval = <span class="hljs-built_in">int</span>(video_duration/(number+<span class="hljs-number">1</span>)) <span class="hljs-comment"># 计算时间间隔</span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, number):        seektime += interval <span class="hljs-comment"># 计算时间节点</span>        img = get_frame_at(seektime, n) <span class="hljs-comment"># 截取对应时间节点的图片</span>        <span class="hljs-keyword">if</span> img:            picture_list.append(img)    <span class="hljs-keyword">return</span> picture_list<span class="hljs-comment"># 被调用的函数，调用ffmpeg获取某一个时间节点的截图</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_frame_at</span>(<span class="hljs-params">seektime, n=<span class="hljs-number">99</span></span>):</span>    timestring = get_time_string(seektime) <span class="hljs-comment"># 将int型转为hh:mm:ss类型用于截图</span>    file_name = os.path.basename(video_path)    tmp_path = os.path.join(base_path, <span class="hljs-string">&#x27;tmp&#x27;</span>) <span class="hljs-comment"># 截图存放于事先新建的tmp目录下</span>    img_path = os.path.join(tmp_path, <span class="hljs-string">&quot;&#123;filename&#125;-out-&#123;d&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(filename=file_name, d=n)) <span class="hljs-comment"># 截图名称及存放绝对路径</span>    command = <span class="hljs-string">&#x27;ffmpeg -ss &#123;timestring&#125; -y -i &quot;&#123;file&#125;&quot; &quot;-f&quot; &quot;image2&quot; &quot;-frames:v&quot;  &quot;1&quot; &quot;-c:v&quot; &quot;png&quot; &#x27;</span> \    <span class="hljs-string">&#x27;&quot;-loglevel&quot; &quot;8&quot; &quot;&#123;img_path&#125;&quot;&#x27;</span>.<span class="hljs-built_in">format</span>(timestring=timestring, file=self.abs_file_path,                                          img_path=img_path)    <span class="hljs-keyword">try</span>:        subprocess.call(command, shell=<span class="hljs-literal">True</span>)        <span class="hljs-keyword">return</span> img_path    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:        logger.info(<span class="hljs-string">&#x27;截图失败：%s&#x27;</span> % exc)        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 用于将int型转换为字符串的函数</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_time_string</span>(<span class="hljs-params">seconds</span>) -&gt; str:</span>    hours = <span class="hljs-built_in">int</span>(seconds // <span class="hljs-number">3600</span>)    minutes = <span class="hljs-built_in">int</span>((seconds % <span class="hljs-number">3600</span>) // <span class="hljs-number">60</span>)    seconds = <span class="hljs-built_in">int</span>(seconds % <span class="hljs-number">60</span>)    timestring = <span class="hljs-built_in">str</span>(hours) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(minutes).rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>) + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(seconds).rjust(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)    <span class="hljs-keyword">return</span> timestring</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>是的，现在已经能够通过视频路径获取截图到指定目录了，但是怎么上传呢？国内外的图床很多都有着丰富的API，所以还需要使用一些模块来完成上传的工作。本例子使用imgbox作为目标图床。预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基于FFMPEG自动截图上传至imgbox（一）</title>
    <link href="/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/Python%E5%9F%BA%E4%BA%8EFFMPEG%E8%87%AA%E5%8A%A8%E6%88%AA%E5%9B%BE%E4%B8%8A%E4%BC%A0%E8%87%B3imgbox%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>玩PT的大概都知道发布的时候要上传mediainfo和截图，无论内外站都支持的图床之一就是imgbox。而无论是盒子还是本地，mediainfo或者截图上传都是比较繁琐枯燥的一件事情。那么，基于此，工具就来了。</p><p>这是一个比较系统的工具了，会用到一系列基础知识，所以打算做成一个系列。</p><p>本篇文章为第一篇：如何自动截取视频截图？</p><h3 id="FFMPEG"><a href="#FFMPEG" class="headerlink" title="FFMPEG"></a>FFMPEG</h3><hr><ul><li><p><a href="https://www.ffmpeg.org/">FFMPEG</a>是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。</p></li><li><p>FFMPEG在windows下安装教程链接。<a href="https://blog.csdn.net/Fish_cyy/article/details/105797337">https://blog.csdn.net/Fish_cyy/article/details/105797337</a></p></li></ul><p>总之FFMPEG的功能十分强大，无论是windows还是linux都可以使用。而今天我们主要说明如何使用该工具进行截图。废话不多说，直接上代码。</p><div class="hljs code-wrapper"><pre><code class="hljs bash">ffmpeg -ss &#123;timestring&#125; -y -i <span class="hljs-string">&quot;&#123;file&#125;&quot;</span> <span class="hljs-string">&quot;-f&quot;</span> <span class="hljs-string">&quot;image2&quot;</span> <span class="hljs-string">&quot;-frames:v&quot;</span> <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-string">&quot;-c:v&quot;</span> <span class="hljs-string">&quot;png&quot;</span> <span class="hljs-string">&quot;-loglevel&quot;</span> <span class="hljs-string">&quot;8&quot;</span> <span class="hljs-string">&quot;&#123;img_path&#125;&quot;</span><span class="hljs-comment"># 参数说明</span><span class="hljs-comment"># -ss................指定视频文件中截图的时间，01:00：00表示从视频文件的第一个小时截图</span><span class="hljs-comment"># -y.................表示覆盖，如果存在同名文件直接覆盖</span><span class="hljs-comment"># -i.................指定输入文件，使用双引号避免文件路径存在空格</span><span class="hljs-comment"># -f.................指定输出格式，image2表示输出图片</span><span class="hljs-comment"># -frames............指定截取几帧，这里指定为1</span><span class="hljs-comment"># -c.................编码格式，指定输出为png</span><span class="hljs-comment"># -loglevel..........日志等级相关参数，这里设置为8</span><span class="hljs-comment"># 最后img_path代表输出文件路径，包含文件名。</span><span class="hljs-comment"># 更多细节可以直接调用&quot;ffmpeg -h&quot;进行学习。</span></code></pre></div><p>很显然的一个问题，ffmpeg需要指定截图时间，那么视频有多长，什么时候开始截取呢？我们需要知道这个视频的长度。mediainfo便是一个很好的工具，而且ffmpeg直接就封装了mediainfo，可以直接使用指令获取视频信息：</p><p><code>ffmpeg -i test.mkv</code></p><p><img src="/post/ffmpeg.png" alt="ffmpeg"></p><p>忽略中文乱码我们其实可以获取到视频得长度的。其实我们还有一个python模块可以干这件事。<a href="https://pymediainfo.readthedocs.io/en/stable/">pymediainfo</a>使用代码示范：</p><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<span class="hljs-keyword">from</span> pymediainfo <span class="hljs-keyword">import</span> MediaInfomedia_info = MediaInfo.parse(<span class="hljs-string">&quot;my_video_file.mp4&quot;</span>)<span class="hljs-keyword">for</span> track <span class="hljs-keyword">in</span> media_info.tracks:    <span class="hljs-keyword">if</span> track.track_type == <span class="hljs-string">&quot;Video&quot;</span>:        print(<span class="hljs-string">&quot;Bit rate: &#123;t.bit_rate&#125;, Frame rate: &#123;t.frame_rate&#125;, &quot;</span>              <span class="hljs-string">&quot;Format: &#123;t.format&#125;&quot;</span>.<span class="hljs-built_in">format</span>(t=track)        )        print(<span class="hljs-string">&quot;Duration (raw value):&quot;</span>, track.duration)        print(<span class="hljs-string">&quot;Duration (other values:&quot;</span>)        pprint(track.other_duration)    <span class="hljs-keyword">elif</span> track.track_type == <span class="hljs-string">&quot;Audio&quot;</span>:        print(<span class="hljs-string">&quot;Track data:&quot;</span>)        pprint(track.to_data())</code></pre></div><p>得到的结果如下：</p><div class="hljs code-wrapper"><pre><code class="hljs python">Bit rate: <span class="hljs-number">3117597</span>, Frame rate: <span class="hljs-number">23.976</span>, Format: AVCDuration (raw value): <span class="hljs-number">958</span>Duration (other values):[<span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;958 ms&#x27;</span>, <span class="hljs-string">&#x27;00:00:00.958&#x27;</span>, <span class="hljs-string">&#x27;00:00:00;23&#x27;</span>, <span class="hljs-string">&#x27;00:00:00.958 (00:00:00;23)&#x27;</span>]Track data:&#123;<span class="hljs-string">&#x27;bit_rate&#x27;</span>: <span class="hljs-number">236392</span>, <span class="hljs-string">&#x27;bit_rate_mode&#x27;</span>: <span class="hljs-string">&#x27;VBR&#x27;</span>, <span class="hljs-string">&#x27;channel_layout&#x27;</span>: <span class="hljs-string">&#x27;L R&#x27;</span>, <span class="hljs-string">&#x27;channel_positions&#x27;</span>: <span class="hljs-string">&#x27;Front: L R&#x27;</span>, <span class="hljs-string">&#x27;channel_s&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;codec_id&#x27;</span>: <span class="hljs-string">&#x27;mp4a-40-2&#x27;</span>, <span class="hljs-string">&#x27;commercial_name&#x27;</span>: <span class="hljs-string">&#x27;AAC&#x27;</span>, <span class="hljs-string">&#x27;compression_mode&#x27;</span>: <span class="hljs-string">&#x27;Lossy&#x27;</span>, …&#125;</code></pre></div><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>我们现在知道了ffmpeg的截图命令，也知道了怎么获取一个视频文件的时长，可能形式需要转换一下。那么在已知视频文件路径的前提下，如何用python进行截图操作呢？预知后事，请听下回分解。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>图床</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu或者Debian环境下编译qbittorrent4.3.3</title>
    <link href="/Ubuntu%E6%88%96%E8%80%85Debian%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91qbittorrent4-3-3/"/>
    <url>/Ubuntu%E6%88%96%E8%80%85Debian%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91qbittorrent4-3-3/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>本文为安装最新或指定版本qBittorrent4.3.3的教学 适用于Ubuntu 18或更新版本，Debian 10或更新版本。</p><h3 id="安装须知"><a href="#安装须知" class="headerlink" title="安装须知"></a>安装须知</h3><hr><p>libtorrent是qBittorrent必要的后端程序，本教程使用1.2.12。在此之前需要安装编译libtorrent环境。</p><p>此外还依赖一些其他的包，在尝试的时候遇到了一些坑，都记录了下来，然后最近初学shell编程，所以整理了一个一键安装脚本。</p><p>最后的最后，在盒子上进行调试的时候3o会在编译qb的时候出现一个linking错误，后边看有没有机会修复吧。</p><h3 id="废话不多说，上部分代码"><a href="#废话不多说，上部分代码" class="headerlink" title="废话不多说，上部分代码"></a>废话不多说，上部分代码</h3><hr><ul><li>准备安装环境</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt updateapt -y install build-essential pkg-config automake libtool git libgeoip-dev python3 python3-devapt -y install libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-devapt -y install qtbase5-dev qttools5-dev-tools libqt5svg5-dev zlib1g-dev</code></pre></div><ul><li>编译boost</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-get -y install mpi-default-dev　　<span class="hljs-comment">#安装mpi库</span>apt-get -y install libicu-dev　　　　　<span class="hljs-comment">#支持正则表达式的UNICODE字符集　</span>apt-get -y install libbz2-devwget https://dl.bintray.com/boostorg/release/1.75.0/<span class="hljs-built_in">source</span>/boost_1_75_0.tar.bz2tar -jxvf boost_1_75_0.tar.bz2<span class="hljs-built_in">cd</span> boost_1_75_0sh ./bootstrap.sh./b2./b2/install</code></pre></div><ul><li>编译libtorrent</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt -y install libssl-devapt -y install opensslwget https://github.com/arvidn/libtorrent/releases/download/v1.2.12/libtorrent-rasterbar-1.2.11.tar.gztar xf libtorrent-rasterbar-1.2.12.tar.gz<span class="hljs-built_in">cd</span> libtorrent-rasterbar-1.2.12./configure --disable-debug --enable-encryption --with-libgeoip=system CXXFLAGS=-std=c++14make -j$(nproc)make installldconfig</code></pre></div><ul><li>安装qbittorrent</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">apt-get -y install qt5-defaultapt-get -y install zlib1g-dev<span class="hljs-comment"># 将命令改名，可能是新版本的调用脚本命名不一样了</span>file1=<span class="hljs-string">&quot;/usr/bin/lrelease&quot;</span>file2=<span class="hljs-string">&quot;/bin/lrelease&quot;</span><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$file1</span>&quot;</span> ]; <span class="hljs-keyword">then</span>  mv <span class="hljs-string">&quot;<span class="hljs-variable">$file1</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file1&#125;</span>-qt5&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$file2</span>&quot;</span> ]; <span class="hljs-keyword">then</span>  mv <span class="hljs-string">&quot;<span class="hljs-variable">$file2</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;file21&#125;</span>-qt5&quot;</span><span class="hljs-keyword">fi</span><span class="hljs-comment"># mv /bin/lrelease /bin/lrelease-qt5</span><span class="hljs-comment"># mv /usr/lib/qt5/bin/lrelease /usr/lib/qt5/bin/lrelease-qt5</span>wget https://github.com/qbittorrent/qBittorrent/archive/release-4.3.3.tar.gztar xf release-4.3.3.tar.gz<span class="hljs-built_in">cd</span> qBittorrent-release-4.3.3./configure --disable-gui --disable-debug CXXFLAGS=-std=c++14make -j$(nproc)make install<span class="hljs-comment"># 写入service文件</span>qbit_service=<span class="hljs-string">&quot;/etc/systemd/system/qbittorrent.service&quot;</span>touch <span class="hljs-variable">$qbit_service</span>cat&gt;<span class="hljs-variable">$qbit_service</span>&lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">[Unit]</span><span class="hljs-string">Description=qBittorrent Daemon Service</span><span class="hljs-string">After=network.target</span><span class="hljs-string">[Service]</span><span class="hljs-string">LimitNOFILE=512000</span><span class="hljs-string">User=root</span><span class="hljs-string">ExecStart=/usr/local/bin/qbittorrent-nox</span><span class="hljs-string">ExecStop=/usr/bin/killall -w qbittorrent-nox</span><span class="hljs-string">[Install]</span><span class="hljs-string">WantedBy=multi-user.target</span><span class="hljs-string">EOF</span>systemctl <span class="hljs-built_in">enable</span> qbittorrent.service <span class="hljs-comment"># 设置开机自启动</span>qbittorrent-nox -y --webui-port=2021 <span class="hljs-comment"># 打开尝试然后ctrl+c退出。</span><span class="hljs-comment"># 默认端口是2021哦，用户名admin，密码adminadmin。</span></code></pre></div><ul><li>设置qbittorrent命令</li></ul><div class="hljs code-wrapper"><pre><code class="hljs bash">qbit_command=<span class="hljs-string">&quot;/usr/bin/qbittorrent&quot;</span>touch <span class="hljs-variable">$qbit_command</span>cat&gt;<span class="hljs-variable">$qbit_command</span>&lt;&lt;<span class="hljs-string">EOF</span><span class="hljs-string">#!/bin/bash</span><span class="hljs-string">if [ \$1 == &quot;start&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl start qbittorrent.service #启动qBittorrent</span><span class="hljs-string">elif [ \$1 == &quot;stop&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl stop qbittorrent.service #关闭qBittorrent</span><span class="hljs-string">elif [ \$1 == &quot;restart&quot;]</span><span class="hljs-string">then</span><span class="hljs-string">  systemctl restart qbittorrent.service #重启qBittorrent</span><span class="hljs-string">fi</span><span class="hljs-string">EOF</span><span class="hljs-built_in">cd</span> /usr/bin &amp;&amp; chmod +x qbittorrent<span class="hljs-comment">#之后就可以使用命令qbittorrent start|stop|restart 分别代表开始，关闭，重启。</span></code></pre></div><h3 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h3><hr><p>因为我已经整理成了shell文件放到我的<a href="https://github.com/tomorrow505/qbittorrent433">GitHub</a>上了，感兴趣的可以去看看源代码。</p><p><code>wget https://raw.githubusercontent.com/tomorrow505/qbittorrent433/main/install.sh -O install.sh &amp;&gt;/dev/null &amp;&amp; /bin/bash install.sh</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[1]：<a href="https://npchk.info/ubuntu-debian-install-qbittorrent/">Ubuntu/Debian Linux編譯qBittorrent安裝指南</a></p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PT</tag>
      
      <tag>shell</tag>
      
      <tag>Linux</tag>
      
      <tag>qbittorrent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的PT之路</title>
    <link href="/%E6%88%91%E7%9A%84PT%E4%B9%8B%E8%B7%AF/"/>
    <url>/%E6%88%91%E7%9A%84PT%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>写在6年之期的一些小的感悟。</p><h2 id="影之大，一个优盘放不下"><a href="#影之大，一个优盘放不下" class="headerlink" title="影之大，一个优盘放不下"></a>影之大，一个优盘放不下</h2><p>早些年时候，硬盘大多4G-8G存一些课件之类的东西，足够了。突然有一天同学过来串门，说给我看一部电影《被解放的姜戈》，果断拿优盘过去拷，结果竟然放不下~尴了个尬的，一问多大，高清8G以上……好在教育网互传还挺快。才知道PT这么一回事，他的电影都是在学校PT站内下载的。说这我也想注册一个，结果傻眼了，未开放注册~~同学也就是个普通会员，没有邀请啥的。所以就等，说是每年会开注两次。</p><p>直到15年3月13日，估计是有人跟我说了，我才进了我的第一个PT站，一看很新奇，但是视频确实都很大。看了眼规则啥的，还要分享率、保种什么的，七七八八看下来，心里直觉得麻烦~~许是当时课程比较紧，就弃置了。</p><p>4月份的时候下载了第一部电影《外星醉汉PK地球神》，很喜欢阿米尔-汗，他的《三傻大闹宝莱坞》看了不下五遍，每一次看都有新的感触。但是不知为何，站点又再次搁置了，应该是比较忙的吧。</p><h2 id="迟来的发布员和开心的时光"><a href="#迟来的发布员和开心的时光" class="headerlink" title="迟来的发布员和开心的时光"></a>迟来的发布员和开心的时光</h2><p>到10月份的时候，一些事情算是尘埃落定了，我把之前在油管上爬的一个教程传了上去，看到有人下载，心里十分开心。Sharing changes the world. 是站点的理念，真的很感激那些为站点付出的人，看了下论坛，他们一个个都很有激情，让人不禁加入进去，于是我下载的第二个种子就是怎么上传种子到站点。</p><p>慢慢地，我开始使用百度云离线，QQ旋风，迅雷等去公网搜寻种子，然后转载过来。并且个人喜欢篮球，看NBA，所以也下载了很多NBA录像传了上去，也学到了很多发布的知识，那真是一段开心的时光，纯粹的开心。久了就有大佬PM：你愿意做发布员吗？此时我已经为了玩PT买了一个2T的西数移动硬盘，也几乎不怎么关电脑。答案自然是：Yes。</p><p>进了发布组，里边的大佬还是挺多的，09年开站，一代代的传承有很多已经成为公网的活跃分子。通过论坛的学习以及跟他们的交流，也规范了自己的发种姿势，更加知道了PT站的广阔天地。为了更好的转载，于是开始走上了收割之路……北邮人、落樱、清影、葡萄、馒头、春天、听听歌、蒲公英、好大啊、我堡等等。要么是论坛申请，要么是大佬在发布群内发邀，总之每次过考核都跟升级一样，时不时去看看，总是害怕不小心挂了。（当时还进了外网HDT，本地是要吐了，还要每个季度下载15G，想来后来肯定是放弃了，死掉了。）</p><h2 id="沉寂的时光太过漫长，写个工具吧"><a href="#沉寂的时光太过漫长，写个工具吧" class="headerlink" title="沉寂的时光太过漫长，写个工具吧"></a>沉寂的时光太过漫长，写个工具吧</h2><p>16年，校园站点意外关闭，收割的站点总是少了点什么，缺少一种归属感，像飘在外面一样，之前的发布组成员也一个个离开了，新进来的很少，校园PT的青黄不接就像河水断流，日渐颓势。好在还有站点可以逛，只是时间太漫长……</p><p>也不是说关了就一直没有开，偶尔开俩月，又维护，域名也是换来换去，慢慢地，用户就少了很多。</p><p>直到后来开站，已经不再支持IPV4，也没有什么工作组员了，我成为了一个版主。没有什么荣耀加身的乐趣，干的还是发布的活。当时落樱出了一个转载美剧的机器人，我们也萌生了这样的观念，想要快速把别的站资源转发过来。先后有了三个版本的种鸡，一个是Lancesaber基于python和tr的版本，需要配置环境自动运行。一个是rach的shell版本，也是基于qb，但是需要linux。当时想着是所有发布员都要用，所以第三个版本就是我的基于python和ut的半自动转载，之所以称之为半自动，是需要输入源种链接进去的，RSS是后期加上的。后来在Matthew的建议下使用了qb. 打包编译成了windows版本。</p><p>蛰伏的时间也很快，测试发种-修复bug-添加新站点-测试发种修复bug……终于还是基本成型了，于是开启了疯狂转种模式，上了京东两块4T（后悔死了），因为发布员很少了，基本上就是几台种鸡在跑，下载的人也寥寥，可是归属感在那里，有人下就接着发。于是乎，成为了管理，干的还是发布的活。</p><h2 id="开启公网之旅-那个男人是贝壳啊"><a href="#开启公网之旅-那个男人是贝壳啊" class="headerlink" title="开启公网之旅-那个男人是贝壳啊"></a>开启公网之旅-那个男人是贝壳啊</h2><p>转眼已经到了18年底。应该是这个时间节点吧，之前沉寂的时候也进了一些站点哇，南北洋、天空、朋友、家园。至今盛传八大只剩岛了，后来进站点都是走的论坛邀请区，因为孤岛所以没见官窑。</p><p>适逢春天关站后重开改域名，trcker也换了，用qb的都知道不能批量改，于是写了一个工具放在几个站点的论坛。后来突然一个贝壳图像的QQ加我说要把工具放到GitHub上，然后问种鸡能不能支持转发更多的站点。自己在校园站high了蛮久，或许是时候去外面看看了。</p><p>贝壳大佬邀请我进了猫，慢慢的进了备胎、铂金，直到8月岛开邀，终于集齐了。多数时间在校园网混迹的我，开始了种鸡适配之旅，这期间遇到了很多的问题，也有一些不愉快，大站点相对小站点的傲气是有资本积累的，无所谓对错，更多的时候就是不适合，所以我最终还是去往了相对较小较新的站点。由于种鸡适配，进入了猫站发布组，认识了很多大佬，轻松愉快，也知道了，那个男人叫贝壳大佬。</p><p>猫站的论坛可以学习到很多东西，也有很多nice的大佬。见识到了贝壳大佬、猫大、手大、宝大、86大、甘蔗大、空白大……都是一群极其厉害的人物，更加见识了，PT之路的无止境。</p><h2 id="外网之旅，你的脚本给我用一下吧"><a href="#外网之旅，你的脚本给我用一下吧" class="headerlink" title="外网之旅，你的脚本给我用一下吧"></a>外网之旅，你的脚本给我用一下吧</h2><p>时光很快到19年底，武汉的疫情牵动了整个国家的心，我们却迎来了最长的一个假期。在家里百无聊赖的时候，一个大佬说可以效仿别的站点搞一个美剧鸡，于是乎从猫站进了MTV，租了个小盒子开始把功能加到种鸡里边，由于自己没有太多看美剧的经验，没有甄别质量的想法，加之校园PT总是希望小体积的想法，写得不是很完善。另外当时需要拿盒子过岛的考核，时间一久，便没有精力再弄了。</p><p>期间进了吐鲁番、柠檬、杜比等等站点，也见证了柠檬的第一次发种大赛，宝大第一，手大拿着种鸡混了个第二，机智的雨小天大佬第三，后来才知道这个比赛还有钱拿，哈哈~~（国庆的时候果断参加了音乐大赛，真香。）</p><p>后来86大佬突然在群里问及一个js正则的问题，即使没有系统学过js，也帮忙解答了。后来有人在群里说旧的一键转载的脚本很多站点不能用了，本着助人为乐以及折腾无止境的精神，我找来了当时的脚本，帮忙把问题给解决了。宝大找到我说他还有一个高级版本的脚本，但是不太好用了。高级脚本牵扯到外站了，各个站点不一样，导致脚本整体脉络不是很清晰，想要厘清存在一些难度，与其补丁打满，不如开始重构。</p><p>于是乎，重构工作开始了，形如宝大、86大这类狠人站点可是真的多，一个接一个砸过来，我也就开始了外站。PHD，AVZ，HDT，RED，BHD，UHD，MTV，BLU，IPT，FL……同期还进了PTP，HDF，Xthor之类的。其中PTP是校园PT小伙伴给的，后来还在上面跟外国友人求到了KG。以及后来的后来跟daom求到的CG，86大佬求到的JPOP，以及最后的最后HDB，现在就等着一个BTN了。</p><p>脚本的编写还是有趣的，可以认识很多大佬，一起调试，期间因为大佬们的推荐，进了又一个潜力站点，柠檬，脚本也支持了众多国内小的站点，同时也在好几个发布组兼职。因为转载的还是那群人，就我自己而言，猫站是我的公网落脚站，柠檬是好朋友都在的站。所以脚本基本上会在这两个站的工作人员群更新。额外的人找到我也是同样的答案，想要脚本，去群里拿吧~</p><h2 id="一些看法和感悟"><a href="#一些看法和感悟" class="headerlink" title="一些看法和感悟"></a>一些看法和感悟</h2><p>其实贴吧是个交流的好地方，但是因为网络上不知道谁是谁，扯皮也时有存在，但是我还是倾向于干两件事：写工具和发邀请，尴尬的是，一则虽然qbittorrent有着很好的api，可以做很多有意思的工具，之前写了几个放在贴吧，无奈关注的人并不多。另外由于自身佛系本性，极少去大站打工，倒是喜欢在潜力新站里边玩，所以大站邀请并不多。倒是由于特殊原因，靠着大佬帮忙，帮助两个Pter收齐了九大。</p><p>个人的进军路线总结为：校园教育站-&gt;公网站-&gt;外网站。其中教育站由于连接性好，玩的比较多，公网是以后会用的比较多，也是一手资源出现的地方，很多官组什么的，外网站由于中文资源比较少，但是很多时候是一个补充，没有最好的，适合自己就好。进工作组认识大佬是个不错的途径，前提是有足够的的时间。</p><p>个人的保种观念及外网推荐：其实保种很多时候是一个站点存在的根本，发的再多没有保种没法下，感谢IYUU的出现~外网中的HR就是为了让大家多保种，我是本地保种党，自己也有30T左右的硬盘，而由于保种玩的称心的外站有FileList，JPOP，PTP，xthor，HDF、蓝鸟等等。不玩游戏所以没有GGN。</p><p>个人进站路线推荐：个人从来没有在贴吧求过邀请。心想，一来专一是好事，二来本地设备是优势，三来结识大佬是胜势。一个站点做种几万天，发种几百上千，这种人一般去求药应该不难；本地晒设备，有诚心，虚心请教，入门后数据好看，求药应该不难；认识大佬，谈笑风生，求种不难。求药场所无非贴吧、官窑、私信。还有TG什么的就不说了，但是三者都需要花费时间精力，如果想要速成，捐赠吧。</p><p>最后的最后，希望大家能够玩得开心，没有收到站点不要气馁，时间久了都会有。更多的发邀是相互选择，在不认识的前提下强调数据无可厚非，我倒是希望给更多的新人一些机会，发了蛮多邀请，希望大家能够珍惜手里的站点，通过它们，数据好一点结识大佬的机会就多一点，然后进入更广阔的天地。</p>]]></content>
    
    
    <categories>
      
      <category>业余爱好</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>PT</tag>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
